---
title: "Factor analysis for multiomics data with MOFA2"
description: "Some background information and a tutorial by Alex Gurbych from blackthorn.ai"
author: "Vivek Sriram"
date: "8/12/2024"
date-modified: "8/12/2024"
image: googleLens.PNG
categories:
  - Overviews
  - Tutorials
draft: false
---

In this week's blog, I'll be providing a brief overview on multiomic data and the utility of factor analysis. I will also summarize a tutorial and case study developed by Alex Gurbych from blackthorn.ai that highlights how to perform factor analysis using the Bioconductor package `MOFA2`. You can review Alex's original tutorial [here](https://levelup.gitconnected.com/multi-omics-analysis-3857956a7a3d). With context out of the way, let's get started!

------------------------------------------------------------------------

# 1. Introduction

In the following workflow, we will derive biological insights from a multiomic dataset through the application of factor analysis with the `MOFA2` package. Before we get into our case study example, let's go over some definitions.

## 1.1. Multiomics
**Multiomics** refers to a biological analysis approach that considers multiple data modalities concurrently to study a biological system holistically. The individual data modalities of multiomic analysis, also known as *'omes*, are comprised of large-scale data and typically summarize the entire set of biomolecules for an organism. Some examples of individual 'omes include the genome, proteome, transcriptome, epigenome, and phenome.

![An overview of how multiomic data can lend itself to precision medicine applications - Dokyoon Kim Lab for Integrative 'Omics and Biomedical Informatics at the University of Pennsylvania](kimLabOmics.PNG)

Multiomic studies can lend themselves to the improved characterization of biological processes across molecular layers. By integrating multiple 'omes together, researchers can analyze complex biological big data to find novel associations between biological entities, pinpoint relevant biomarkers, and build elaborate markers of disease and physiology.  

Motivated by this improved ability to represent the underlying biology of a system, multiomic profiling has been increasingly applied across a variety of biological domains, including cancer biology, regulatory genomics, microbiology, and host‐pathogen biology. A common aim of these applications is to characterize heterogeneity between samples, as manifested in one or several of the data modalities. Multiomic profiling is particularly appealing if the relevant axes of variation are not known beforehand, and hence may be missed by studies that consider a single data modality or targeted approaches. One approach to capture the relevant axes of variation in a biological system is *factor analysis*.


## 1.2. Factor analysis

**Factor analysis** is a statistical method that summarizes the variability across observed, correlated variables in a smaller set of variables. These newly generated variables correspond to the 'factors' of the original data - they are generated by determining linear combinations of the observed variables and adding small fixed deviations. Correlations between the factors of an input set of predictors and an output response variable can reveal previously unobserved latent axes of variation that affect the response of the data. Thus, the main goal of factor analysis is to identify hidden variables and evaluate their correlations with output variables of interest.

## 1.3. `MOFA2`
Given the utility of factor analysis for the identification of relevant axes of variation in biological systems, it becomes particularly beneficial to have a simple method for integrating and analyzing multiomic data in this manner - *Multiomic Factor Analysis (MOFA)* offers one such option.

**MOFA** is a probabilistic factor model that performs unsupervised integration of multiple modalities of omics data and discovers the principal axes of variation in multiomic data sets. Intuitively, MOFA can be viewed as a versatile and statistically rigorous generalization of principal component analysis (PCA) for multiomics data. MOFA infers a set of hidden factors that capture biological and technical sources of variability. It disentangles axes of heterogeneity that are shared across multiple modalities as well as those specific to individual data modalities. The learnt factors enable a variety of downstream analyses, including identification of sample subgroups, data imputation and the detection of outlier samples. The inferred factor loadings can be sparse, thereby facilitating the linkage between the factors and the most relevant molecular features. Importantly, MOFA disentangles to what extent each factor is unique to a single data modality or is manifested in multiple modalities, thereby revealing shared axes of variation between the different omics layers. Once trained, the model output can be used for a range of downstream analyses, including visualization, clustering, and classification of samples in the low‐dimensional spaces spanned by the factors.

You can read more about the `MOFA2` package on its Bioconducter documentation page [here](https://www.bioconductor.org/packages/release/bioc/html/MOFA2.html).


# 2. Dataset description

With background on multiomics and factor analysis covered, let's jump into our case study: multiomics factor analysis for a dataset of cancer patients.

For our example dataset, we will make use of a cohort of 200 patients diagnosed with chronic lymphocytic leukemia (CLL). The CLL dataset can be downloaded for free from [here](https://bioconductor.org/packages/release/data/experiment/html/BloodCancerMultiOmics2017.html).

The CLL dataset we will be using consists of four data modalities: 

-   genomics (somatic mutations)

-   epigenomics (DNA methylation)

-   transcriptomics (RNA-seq)

-   phenotypes (drug response).

Around 40% of the feature values are absent.

Let's start by importing the required libraries:

```{r, results='hide', message=FALSE, warning=FALSE}
setwd("~/Documents/Developer/vsriram24.github.io/posts/multiomics-fa")

library(ggplot2)
library(tidyverse)
library(data.table)
library(MOFA2)
library(MOFAdata)
```

Now, we import the CLL dataset. Data are stored as a list of matrices with features as rows and samples as columns. We can use the `lapply` function to get the number of features and samples for each "'ome" in our data.

```{r}
utils::data("CLL_data")

lapply(
  CLL_data, 
  dim
)
```

# 3. Model training

With our data uploaded into our environment, we can begin to fit a model. We start by creating a new `MOFA` model for our data using the `create_mofa` function:

```{r, results='hide', message=FALSE, warning=FALSE}
MOFAobject <- create_mofa(CLL_data)
```

We can visualize the number of features and samples in our data as well as missing values using the `plot_data_overview` function:

```{r}
plot_data_overview(MOFAobject)
```

In the above figure, `D` tells us the number of features for each data modality, while `N` represents the number of samples. Missing data are represented by gray bars.

With our model initialized, we can set various options to customize the way that we train it on our data. In our case, we will specify that we want to generate 15 factors, and that we want to set the maximum number of model training iterations to be 100.

```{r}
data_opts <- get_default_data_options(MOFAobject)

model_opts <- get_default_model_options(MOFAobject) 
model_opts$num_factors <- 15

train_opts <- get_default_training_options(MOFAobject)
train_opts$seed <- 1
train_opts$save_interrupted <- TRUE
train_opts$maxiter = 100
train_opts$convergence_mode <- "slow"
```

Finally, with our options specified, we can go ahead and train our model.

```{r, warning=FALSE}
MOFAobject <- prepare_mofa(
  MOFAobject,
  training_options = train_opts,
  model_options = model_opts,
  data_options = data_opts
)
```

```{r, warning=FALSE}
MOFAobject_trained <- run_mofa(
  MOFAobject,
  outfile = "MOFA2_CLL_trained.hdf5"
)
```

Our model has been successfully trained!

# 4. Postprocessing

## 4.1. Add sample metadata

Now that we have trained our model on our data, we can incorporate metadata from the input dataset to evaluate correlations between our different 'omes and additional variables. Let's get data for age, sex, death status, and treatment status:

 - Age: age in years 
 
 - Died: (T/F) did the patient die? 
 
 - Sex: (M/F) 
 
 - treatedAfter: (T/F) was the patient treated after?

```{r}
# Load sample metadata
CLL_metadata <- fread("ftp://ftp.ebi.ac.uk/pub/databases/mofa/cll_vignette/sample_metadata.txt")

# Add sample metadata to the model
samples_metadata(MOFAobject_trained) <- CLL_metadata
```

## 4.2. Correlation analysis of factors

In order for our model to work accurately, we must ensure that the factors that we have generated are not correlated with one another. If we observe significant correlations between factors, we either used too many factors or performed and insufficient amount of normalization. We can visualize correlations across factors using the `plot_factor_cor` function.

```{r}
plot_factor_cor(MOFAobject_trained)
```

We can see from our figure that our generated factors show no significant correlations with one another.


# 5. Variance Breakdown

## 5.1. Explained variance decomposition by factor

We can use the `plot_variance_explained` function to determine how much of the variance in each of our individual data modalities is explained by each of our factors:

```{r}
plot_variance_explained(
  MOFAobject_trained, 
  max_r2 = 15
)
```

From our explained variance plot, we can see that Factor 1 explains a high amount of variance across all four of our data modalities. Factor 2 explained a high amount of variance for drug response, Factor 3 explains a high amount of variance for drug response, transcriptomics, and genomics, and Factor 4 explains a high amount of variance for transcriptomics.


## 5.2. Explained variance per omic modality

We can also use the `plot_variance_explained` function to determine the amount of variance that is explained across our four data modalities given all 15 factors in our model.

```{r}
plot_variance_explained(
  MOFAobject_trained,
  plot_total = T
)[[2]]
```

Here, we can see that the phenotypic and transcriptomic modalities have more variance explained by our model than the genomic or epigenomic modalities.


# 6. Factor association analysis

We can now compare our generated factors to metadata from our input data to see if we capture any associations with variables related to CLL. Here, we generate correlation plots using the `correlate_factors_with_covariates` function.

```{r, warning=FALSE}
correlate_factors_with_covariates(
  MOFAobject_trained, 
  covariates = c("Gender","died","age", "treatedAfter"), 
  plot = "log_pval"
)
```

It appears that most of our factors have an association with at least one of our covariates under consideration.

# 7. Zooming in on an individual factor

## 7.1. Factor values

We can make use of the `plot_factor` function to evaluate how the data points in our dataset are distributed with respect to a factor of choice.

```{r}
plot_factor(
  MOFAobject_trained,
  dodge = TRUE,
  add_violin = TRUE,
  factors=c(1, 15)
)
```

## 7.2. Factor 1's association with the genomic data modality

We can use the `plot_weights` function to determine how different factors are weighted with respect to the features in our data. In the following graph, we focus on the influence of Factor 1 on features present in the genomic data modality. Features with a higher weight represent a stronger association with the factor of interest.

```{r}
plot_weights(
  MOFAobject_trained,
  view = "Mutations",
  factor=1,
  nfeatures = 15,
  scale = T
)
```

From this graph, we can see that most features have a weight of 0 with respect to Factor 1, indicating a lack of association with the factor. However, IGHV (immunoglobulin heavy chain variable) has a weight close to 1 with respect to Factor 1. Indeed, mutations in the genetic region are a main clinical marker for CLL!

The `plot_top_weights` function lets us visualize this same output, sorted by absolute value of the weight:

```{r}
plot_top_weights(
  MOFAobject_trained,
  view = "Mutations",
  nfeatures = 15,
  scale = T,
  factor=1
)
```

Once again, we can see that the weight for IGHV with respect to Factor 1 far exceeds the weights for any other genomic features in our dataset.

Based on these results, we'd expect to see that samples that have a high positive value for Factor 1 will have IGHV mutations. To confirm this hypothesis, let's plot the distribution of factor 1 values, colored by IGHV mutation status:

```{r}
plot_factor(
  MOFAobject_trained,
  dodge = TRUE,
  add_violin = TRUE,
  color_by = "IGHV",
  factors = c(1)
)
```

It does seem like our Factor 1 values correlate with presence/absence of IGHV mutation!

## 7.3. Factor 1's association with the transcriptomic data modality

From the variance explained plot we know that Factor 1 drives variation across all four of our data modalities. Let’s visualize the mRNA expression changes that are associated with Factor 1 using the `plot_weights` function again:

```{r}
plot_weights(
  MOFAobject_trained,
  nfeatures = 10,
  view = "mRNA",
  factor = 1
)
```

We can see from our generated plot that there are a substantial number of transcripts with weights close to -1 or 1 with respect to Factor 1. It is likely that genes with large positive mRNA expression values are more heavily expressed in samples with IGHV mutation. Let’s verify this assumption.

## 7.4. Molecular signature clustering for factor 1 

Let's use the `plot_data_heatmap` function to generate a heatmap of gene expression values against Factor 1 values. Furthermore, we color our heatmap by IGHV mutation status.

```{r}
plot_data_heatmap(
  MOFAobject_trained,
  scale = "row",
  cluster_cols = FALSE,
  cluster_rows = FALSE,
  show_colnames = FALSE,
  denoise = TRUE,
  features = 25,
  view = "mRNA",
  factor=1
)
```

From our heatmap, we can see that various transcripts correlate with high Factor 1 value, and that these samples are also positive for IGHV status - our assumption is confirmed!


# 8. Summary
This concludes my walkthrough of applying the `MOFA2` package to perform factor analysis on multiomics data. Here, we applied factor analysis to multiomics data to integrate and analyze relevant features related to different 'omic subtypes as well as patient metadata of interest. A big thank you again to Alex Gurbych from blackthorn.ai and the authors of the `MOFA2` package. I look forward to covering more tutorials involving multiomic data analysis and precision medicine in the future.

# 9. References
- ["Multi-Omics Data Factor Analysis, by Alex Gurbych"](https://levelup.gitconnected.com/multi-omics-analysis-3857956a7a3d)
- [Bioconductor MOFA2 documentation](https://www.bioconductor.org/packages/release/bioc/html/MOFA2.html)
- ["Multi‐Omics Factor Analysis—a framework for unsupervised integration of multi‐omics data sets", by Argelaguet et al.](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC6010767/)
- [MOFA Homepage](https://biofam.github.io/MOFA2/)
- [Dokyoon Kim Lab Homepage](https://www.biomedinfolab.com)

