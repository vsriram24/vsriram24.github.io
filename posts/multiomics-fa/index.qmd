---
title: "Multi-Omics Data Factor Analysis - AI in Precision Medicine"
description: "Tutorial by Alexx Gurbych from blackthorn.ai"
author: "Vivek Sriram"
date: "5/27/2024"
date-modified: "5/27/2024"
image: IMG_7480.jpg
categories:
  - Tutorials
draft: true
execute:
  eval: false
---

In this week's blog, I'll be summarizing a tutorial and case study developed by Alex Gurbych from blackthorn.ai on factor analysis for multi-omics data. You can review the original tutorial here: https://levelup.gitconnected.com/multi-omics-analysis-3857956a7a3d. My blog post will simply be summarizing and streamlining the content presented. With context out of the way, let's get started!

------------------------------------------------------------------------

# 1. Introduction

What is factor analysis? Factor analysis refers to a statistical method that summarizes the variability across observed, correlated variables with a smaller set of variables. These newly generated variables correspond to the 'factors' of the original data - they are generated by determining linear combinations of the observed variables and adding small fixed deviations.

Correlations between the generated factors from a dataset and the outcome variable can reveal previously unobserved latent variables that affect the response of the data. The discovery of such hidden variables and their correlations with output is the main goal of factor analysis.

In the following workflow, we will derive biological insights from a multiomic dataset through the application of factor analysis.

# 2. Dataset description
For our example dataset, we will make use of a cohort of 200 patients diagnosed with chronic lymphocytic leukemia (CLL). CLL is publicly available here: <https://bioconductor.org/packages/release/data/experiment/html/BloodCancerMultiOmics2017.html>

The CLL dataset includes 4 data modalities: genomics (somatic mutations), epigenomics (DNA methylation), transcriptomics (RNA-seq), and phenotypes (drug response). Around 40% of the feature values are absent.

We start by importing the required libraries:
```{r, results='hide', message=FALSE, warning=FALSE}
setwd("~/Documents/Developer/vsriram24.github.io/posts/multiomics-fa")

library(ggplot2)
library(tidyverse)
library(data.table)
library(MOFA2)
library(MOFAdata)
```

Now, import the CLL dataset. Data is stored as a list of matrices with features as rows, samples as columns.

```{r}
utils::data( "CLL_data" )       
lapply(CLL_data, dim)
```



In the above figure, D tells us the dimensionality of each data modality. (the number of features). N stands for the number of samples. Missing data are represented by grey bars.

# 4. Model training

First, create a model object. It is not trained at the moment.

```{r,include=FALSE}
MOFAobject <- create_mofa(CLL_data)
```

Let’s visualize the number of rows (features) and the number of columns (samples) we have + absent values.

```{r,include=FALSE}
plot_data_overview( MOFAobject )
```

Second, set required options. Read more about data options here; model options here; about training options here.

```{r,include=FALSE}
data_opts <- get_default_data_options(MOFAobject)
model_opts <- get_default_model_options(MOFAobject) 
model_opts$num_factors <- 15
train_opts <- get_default_training_options(MOFAobject)
train_opts$seed <- 1
train_opts$save_interrupted <- TRUE
train_opts$convergence_mode <- "slow"
```

Finally, prepare the model and train it.


```{r,include=FALSE}
MOFAobject <- prepare_mofa( MOFAobject,
                            training_options = train_opts,
                            model_options = model_opts,
                            data_options = data_opts )
MOFAobject <- run_mofa( MOFAobject)

#saveRDS( MOFAobject, "MOFA2_CLL.hdf5" )
```

# 5. Postprocessing

## 5.1. Add sample metadata

Metadata are stored in a data.frame. Important columns:
- Age: age in years
- Died: (T/F) did the patient die?
- Gender: (M/F)
- treatedAfter: (T/F) was the patient treated after?

You can load the full metadata from the Bioconductor package `BloodCancerMultiOmics2017` as `data("patmeta")` object.

```{r,include=FALSE}
# Load sample metadata
CLL_metadata <- fread( "ftp://ftp.ebi.ac.uk/pub/databases/mofa/cll_vignette/sample_metadata.txt" )
# Add sample metadata to the model
samples_metadata( MOFAobject ) <- CLL_metadata
```

## 5.2 Factors Correlation Analysis

To have a good model, reduced dimensions (or factors) must not be correlated. If you observe significant interdependence between factors, you probably used too many factors or the normalization was not adequate.

```{r,include=FALSE}
plot_factor_cor( MOFAobject )
```

Conclusions:
Factors show no significant correlation

# 6. Variance Breakdown

## 6.1 Explained variance decomposition by factor

The explained variance summarises the sources of variation from the observed factors.

```{r,include=FALSE}
plot_variance_explained( MOFAobject, 
                         max_r2=15 )
```

Conclusions:
- Factor1 represents strong diversity across all omics modalities. Looks like, it is supreme for the disease etiology.
- Factor2 expresses a very strong variance related solely to the drug response.
- Factor3 retains variance in all omics, except the epigenomic profile.
- Factor4 has a medium mRNA variance.
- Factor5 shows the interdependency between drug response and mRNA.

We will omit other components as their variances are expressed worse.


## 6.2 Explained Variance per Omics
Explained variance is a ratio to which a mathematical model considers the variation (or dispersion) of a dataset. Explained variance is the part of the total variance of the model that is explained by factors that are actually present and aren’t due to error variance.
Higher percentages of the variance indicate a stronger association. It also means that you make better predictions.

Let’s compute explained variation per data modality:

```{r,include=FALSE}
plot_variance_explained( MOFAobject,
                         plot_total = T )[[2]]
```

Conclusions:
Extracted 15 Factors explain:
~53% Drug effect variance
~27% epigenomic profile variance
~42% mRNA variance
~20% Mutations variance
Drug reaction (~53%) and mRNA profile (~42%) capture the most variability amongst omics.

# 7. Factor Association Analysis

Let’s compute the interconnection of the sample metadata (Gender, survival outcome (Died TRUE/FALSE), and Age) and Factor vals:

```{r,include=FALSE}
correlate_factors_with_covariates( MOFAobject, 
                      covariates = c("Gender","Died","Age"), 
                      plot = "log_pval" )
```

Conclusions:
Most Factors don’t have a clear association with any of the covariates.
Factors 13 and 15 associated with survival outcome.
We will go back to associations with clinical data at the end of the story.

#8. Factor1 Profile

## 8.1. Factor Values
A Factor is a linear combination of initial features and represents a source of data variability. On the image below, Factor values are located around the zero axis as the data is mandatory centered prior to the Factor analysis. Points with positive and negative signs represent contrasting phenotypes. A larger absolute value correlates with a more expressed biological effect.

```{r,include=FALSE}
plot_factor( MOFAobject,
             color_by = "Factor1",
             factors=1)
```

## 8.2 Feature Weights
Feature weights are the grades of the interconnection of each feature with each factor. A larger absolute feature weight indicates a stronger association of the feature with the factor. A sign interprets the effect direction: positive — the feature demonstrates larger values in the samples with positive factor values, etc.

## 8.3 Factor1 Somatic Mutations
Explained Variance demonstrated that Factor1 represents variance across all omics. The somatic mutation data are very sparse and any DNA edit will have consequences to all subsequent omics layers.

```{r,include=FALSE}
plot_weights( MOFAobject,
              view = "Mutations",
              factor=1,
              nfeatures = 15,
              scale = T)
```

Conclusions:
Most features are allocated around zero weight vertical line, indicating that they have no association with Factor1
Immunoglobulin Heavy Chain Variable (IGHV) region gene mutation clearly stands out. We’ve just discovered the main clinical marker for CLL.
Let’s create a plot to display features with the corresponding weight sign on the right:


```{r,include=FALSE}
plot_top_weights( MOFAobject,
                  view = "Mutations",
                  nfeatures = 15,
                  scale = T,
                  factor=1,
                  view = "Mutations")
```

IGHV has a positive weight. Samples with positive Factor1 values have IGHV mutation whereas samples with negative Factor1 values do not have the IGHV mutation. To confirm this, let’s plot the Factor values and color the IGHV mutation status.

```{r,include=FALSE}
plot_factor( MOFAobject,
             dodge = TRUE,
             add_violin = TRUE,
             color_by = "IGHV",
             factors=1)
```

## 8.4 Factor1 mRNA Expression
From the variance explained plot we know that Factor1 drives variation across all data modalities. Let’s visualize the mRNA expression changes that are associated with Factor1:

```{r,include=FALSE}
plot_weights( MOFAobject,
              nfeatures = 10,
              view = "mRNA",
              factor=1)
```

Conclusions:
A substantial number of genes with negative weights (for instance, ENSG00000198046) and genes with positive weight (for instance, ENSG00000168594) are present.
Likely, genes with large positive mRNA expression values are more expressed in the samples with IGHV mutation; genes with large negative values are more expressed in the samples without the IGHV mutation

Let’s verify the last assumption.

## 8.5. Factor1 Molecular Signatures Clustering
Let's make a heat map of Factor1 values (x-axis) versus gene expression values (y-axis). Samples are colored by IGHV status — is the mutation present (red) or not (blue).

```{r,include=FALSE}
plot_data_heatmap( MOFAobject,
                   scale = "row",
                   cluster_cols = FALSE,
                   cluster_rows = FALSE,
                   show_colnames = FALSE,
                   show_colnames = FALSE,
                   denoise = TRUE,
                   features = 25,
                   view = "mRNA",
                   factor=1)
```

Conclusions:
Clusters with different gene expressions are clearly visible which proves the assumption.

# 9. Summary

9. Summary
CLL dataset contains 4 omics: genomics (somatic mutations), epigenomics (DNA methylation), transcriptomics (RNA-seq), phenotypic (drug response); 200 patients
15 factors (reduced dimensions) model training converged on iteration 908 with ELBO=-2850734.58, deltaELBO=0.197 (0.00000100%). Factors showed no correlation, which is good.
Cumulatively, the 15 factors represented~53% drug response variation, ~42% mRNA, ~27% DNA methylation, and ~20% somatic mutation variation.
Factors 13 and 15 associated with survival outcome.
Factor1 represents strong diversity across all omics modalities. Looks like, it is supreme for the disease etiology. Factor2 expresses a very strong variance related solely to the drug response. Factor3 retains variance in all omics, except the epigenomic profile. Factor4 represents a medium mRNA vаriаncе. Factor5 shоws the interdependency bеtwееn the drug response and the mRNA.
IGHV mutation exists in samples with positive Factor1 values and absents in samples with negative Factor1 values.
IGHV mutation was discovered as the main clinical marker for CLL. IGHV biomarker potency was proven in multiple wet-lab experiments.


# 10. Key takeaways and suggestions

-   Do not blindly apply batch correction! You risk introducing more artifacts than you remove.

-   In general, it is better to use batch correction methods for data exploration and visualization rather than analysis.

-   If you have a batch effect, model it in your downstream analysis (i.e include it as a covariate) instead of modifying your data directly.

# 9. Conclusions

This concludes the content that was covered in the SASC User Group workshop on batch correction. I'd like to give a huge thank you again to Mary and the team at the BBI for organizing this tutorial and sharing it freely with the public! I look forward to covering more from these meetings in the future, as well as sharing my own thoughts and exploration of single cell data down the road.
