<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Home</title>
<link>https://vsriram24.github.io/blog.html</link>
<atom:link href="https://vsriram24.github.io/blog.xml" rel="self" type="application/rss+xml"/>
<description>Vivek Sriram&#39;s personal website</description>
<generator>quarto-1.4.555</generator>
<lastBuildDate>Mon, 09 Sep 2024 07:00:00 GMT</lastBuildDate>
<item>
  <title>An intro to Convolutional Neural Networks</title>
  <dc:creator>Vivek Sriram</dc:creator>
  <link>https://vsriram24.github.io/posts/cnn-overview/</link>
  <description><![CDATA[ 





<p>In this week’s blog, I will be summarizing the introductory “Convolutional Neural Networks” webpage from Fei-Fei Li’s Stanford CS 231n: “Deep Learning for Computer Vision” course. You can read the original page that I am summarizing <a href="https://cs231n.github.io/convolutional-networks/">here</a>, and you can took a look at Fei-Fei’s full course page <a href="https://cs231n.github.io">here</a>. Note that the original webpage includes about twice as much content as what I have in this post, including a more thorough discussion of real-world examples of neural networks, additional schemas such as parameter sharing, and a few coding examples in <code>numpy</code>. My goal for this post is to offer a “CliffsNotes of a CliffsNotes,” presenting just the basic intuition behind CNNs without any further detail. If you want to learn more, I would highly suggest reading the original webpage that this post summarizes, or additional resources such as <a href="https://arxiv.org/abs/1511.08458">this 2015 arXiv review paper</a> or <a href="https://www.geeksforgeeks.org/introduction-convolution-neural-network/">this GeeksForGeeks walkthrough</a> that includes some code examples. Without further ado, let’s get started!</p>
<p><img src="https://vsriram24.github.io/posts/cnn-overview/introPage.png" class="img-fluid"></p>
<hr>
<p>Convolutional Neural Networks (also known as CNNs or ConvNets) are very similar to standard Neural Networks. They are also made up of neurons that have learnable weights and biases, with each neuron receiving an input, performing a dot product, and leading into an optional non-linearity. The overall network will also express a single differentiable score function, as well as include a loss function for the last fully-connected layer of the network.</p>
<p>So what is the main difference between CNNs and other NNs? CNNs make the explicit assumption that the inputs are images. This assumption allows us to encode certain properties into the architecture, as well as make the forward function more efficient to implement and reduce the number of parameters in the network.</p>
<section id="architecture-overview" class="level3">
<h3 class="anchored" data-anchor-id="architecture-overview">Architecture Overview</h3>
<p>All neural networks will receive an input (a single vector) and transform it through a series of hidden layers. Each hidden layer is made up of a set of neurons, where each neuron is fully connected to all neurons in the previous layer, and the neurons in a single layer function completely independently from one another (i.e.&nbsp;they share no connections with each other). The last fully-connected layer of the neural network is called the output layer - in classification settings, it represents the class scores.</p>
<p>When working with images, the full connectivity of a neural network makes it difficult to scale neurons for large inputs - for instance, with an image that is 32x32 pixels and has 3 color channels, each individual neuron would need to have 32*32*3 = 3072 weights. So how do we eliminate the wastefulness of fully connected neural networks?</p>
<p>CNNs constrain their architecture to match the dimensionality of images as input - in a CNN, neurons are arranged in three dimensions: <strong>width</strong>, <strong>height</strong>, and <strong>depth</strong>. Further, the neurons in a layer of a CNN will only be connected to a small region of the layer before them. Lastly, the final output layer will have dimensionality limited to 1x1xn, where n is the depth of the input layer, because the CNN architecture reduces the full input image into a single vector of class scores.</p>
<p><img src="https://vsriram24.github.io/posts/cnn-overview/3d.png" class="img-fluid"></p>
</section>
<section id="cnn-layers" class="level3">
<h3 class="anchored" data-anchor-id="cnn-layers">CNN Layers</h3>
<p>Every layer of a CNN will transform one volume of activations to another through a differentiable function. There are three main types of layers used to build CNN architectures:</p>
<ul>
<li><p>Convolutional Layer</p></li>
<li><p>Pooling Layer</p></li>
<li><p>Fully-Connected Layer</p></li>
</ul>
<p>These layers are stacked together to form a full CNN architecture. CNNs will then transform the original image layer by layer from its original pixel values down to the final class scores.</p>
<p>A point to note is that some layers contain parameters, while others do not. For instance, the convolutional layers and the fully-connected layers perform transformations that are a function of not only the activations in the input volume, but also the parameters of the neurons. On the other hand, ReLU layers (applying an elementwise activation function such as thresholding at 0 with max[0,x]) or pooling layers will implement a fixed function. Parameters in the convolutional and fully connected layers will be trained via gradient descent to get the class scores predicted by the CNN to match with the labels in the training set of images.</p>
<p>Let’s now dive deeper into the individual CNN layers and their hyperpameters / connectivities</p>
<section id="convolutional-conv-layer" class="level4">
<h4 class="anchored" data-anchor-id="convolutional-conv-layer">Convolutional (CONV) Layer</h4>
<p>The convolutional layer (CONV) is the core building block of a CNN - these layers perform the most computational heavy lifting. The CONV layer’s parameters include a set of learnable filters - each filter will have a small width and height but will extend through the full depth of the input volume (e.g.&nbsp;5x5x3 for an RGB picture). During the forward pass, we slide (a.k.a. convolve) each filter across the width and height of the input volume, computing dot products between the entries of the filter and the input at any position. As we slide the filter over the input volume, we produce a 2D activation map that gives the responses of that filter at every spatial position. We can think of the activation maps as masks that activate when they see a specific visual feature (e.g an edge or a blotch of color in the first layer; wheel or honeycomb shape in the last layer).</p>
<p><img src="https://vsriram24.github.io/posts/cnn-overview/depthSlice.png" class="img-fluid"></p>
<section id="local-connectivity" class="level5">
<h5 class="anchored" data-anchor-id="local-connectivity">Local Connectivity</h5>
<p>Convolutional layers also maintain local connectivity within the CNN - each neuron is connected only to a local region of the input volume. The spatial extent of this connectivity is a a hyperparameter known as the <strong>receptive field</strong>. While the connections exist locally along the width and height dimensions, they will extend along the full depth of the input volume.</p>
</section>
<section id="spatial-arrangement" class="level5">
<h5 class="anchored" data-anchor-id="spatial-arrangement">Spatial Arrangement</h5>
<p>Three different hyperparameters control how many neurons exist in the output volume and how they are arranged - these hyperparameters include depth, stride, and zero-padding.</p>
<ol type="1">
<li>Depth: corresponds to the number of filters we would like to use. The more filters we include in our CNN, the more features we may be able to identify.</li>
<li>Stride: corresponds to how we slide each filter in two-dimensional space. If the stride is 1, then we move the filters one pixel at a time. Changing the stride allows us to spatially manipulate the output volume of a layer.</li>
<li>Zero-padding: corresponds to padding the input volume with 0’s around the border. Zero padding allows us to control the spatial size of the output volumes - most commonly, zero padding can be used to ensure that the input and output width and height are kept consistent.</li>
</ol>
</section>
</section>
<section id="pooling-layer" class="level4">
<h4 class="anchored" data-anchor-id="pooling-layer">Pooling Layer</h4>
<p>Pooling layers can be found in between successive CONV layers in a CNN. The objective of each pooling layer is to reduce the spatial size of the representation, allowing us to control the number of parameters in the network, reduce required computation, and prevent overfitting to the training data. Each pooling layer operates independently on every depth slice of the input and resizes it spatially using the MAX operation (for instance, taking just the maximum value from a 2x2 square of values). Similar to the CONV layer, pooling occurs over the width and height dimensions, leaving the depth of the input unchanged. Note that it is not a <strong>requirement</strong> to include a pooling layer - many modern architectures have dropped pooling by sticking with CONV layers and manipulating the stride and depth hyperparameters instead.</p>
</section>
<section id="fully-connected-fc-layer" class="level4">
<h4 class="anchored" data-anchor-id="fully-connected-fc-layer">Fully-connected (FC) Layer</h4>
<p>Neurons in a FC layer have full connections to all activations in the previous layer, just like in neural networks.</p>
</section>
</section>
<section id="cnn-architectures" class="level3">
<h3 class="anchored" data-anchor-id="cnn-architectures">CNN Architectures</h3>
<p>The most common form of a CNN architecture will stack a few CONV-ReLu layers, follow them with a pooling layer, and then repeat this pattern until the image has been merged spatially to a smaller size. At some point, one might transition to fully-connected layers from CONV layers. The last FC layer will hold the output (e.g.&nbsp;the class scores).</p>
<p><img src="https://vsriram24.github.io/posts/cnn-overview/exampleArch.png" class="img-fluid"></p>
<p>If you’re feeling a bit of fatigue in thinking about NN architectures, then you will be relieved to know that in most cases, you really do not have to worry about how the structure of your network will affect the performance of your model. You really never have to train a CNN from scratch - just download a pretrained model (whatever works best on ImageNet) and finetune it on your data.</p>
</section>
<section id="summary" class="level2">
<h2 class="anchored" data-anchor-id="summary">Summary</h2>
<p>This concludes my overview of the introductory “Convolutional Neural Networks” chapter from Fei-Fei Li’s CS231n course. I look forward to summarizing more such chapters in the future and sharing more examples of code walkthroughs of these topics in the future. Until next time!</p>
</section>
<section id="references" class="level2">
<h2 class="anchored" data-anchor-id="references">References</h2>
<ul>
<li><a href="https://cs231n.github.io/convolutional-networks/" class="uri">https://cs231n.github.io/convolutional-networks/</a></li>
</ul>


</section>

 ]]></description>
  <category>Overviews</category>
  <guid>https://vsriram24.github.io/posts/cnn-overview/</guid>
  <pubDate>Mon, 09 Sep 2024 07:00:00 GMT</pubDate>
  <media:content url="https://vsriram24.github.io/posts/cnn-overview/donut.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>posit::conf 2024</title>
  <dc:creator>Vivek Sriram</dc:creator>
  <link>https://vsriram24.github.io/posts/posit-conf-24/</link>
  <description><![CDATA[ 





<p>Welcome back to another week of <em>[VS]Codes</em>! A few weeks ago, I had the opportunity to attend <a href="https://posit.co/conference/">posit::conf 2024</a>, a national data science conference organized annually by <a href="https://posit.co">Posit, PBC</a>. This year, the conference was held in my home base of Seattle, and it was a wonderful experience getting to attend so many inspiring talks and meet so many members of the data science community. This blog post will summarize content from the workshop I attended on the first day of the conference, as well as some of the talks that I attended over the following couple of days. I’ll conclude this post with my personal overall takeaways from the conference.</p>
<p><img src="https://vsriram24.github.io/posts/posit-conf-24/positConf.jpg" class="img-fluid"></p>
<hr>
<section id="package-development-the-rest-of-the-owl---jenny-bryan" class="level3">
<h3 class="anchored" data-anchor-id="package-development-the-rest-of-the-owl---jenny-bryan">“Package Development: The Rest of the Owl” - <a href="https://jennybryan.org/about/">Jenny Bryan</a></h3>
<p>The title of this talk was inspired by this <a href="https://karlastarr.substack.com/p/draw-the-rest-of-the-fucking-owl">blog post</a>, and serves to explain how one goes from the basics of creating a new package in R to fleshing out a more complete data product.</p>
<p>The key package this workshop highlighted was <code>devtools</code>: you can learn more about this package <a href="https://devtools.r-lib.org">here</a>.</p>
<p>The first thing you should always do when starting to develop a new package is to call <code>library(devtools)</code>. You can also force yourself to do this by including the line <code>require(devtools)</code> in your <code>.Rprofile</code>. With <code>devtools</code> loaded, you can call <code>dev_sitrep()</code> and <code>git_sitrep()</code> to get package development and git/GitHub ‘situation reports’ respectively as you work on your package.</p>
<p>When you call the <code>library</code> command in R, your code will go from installed packages to memory. On the other hand, calling the <code>load_all()</code> function from <code>devtools</code> will go through the entire process from source to memory. This includes the following steps:</p>
<ul>
<li><p>simulates building, installing, and attaching your package</p></li>
<li><p>makes all of the functions in your package available to use</p></li>
<li><p>makes anything you’ve imported available to use</p></li>
<li><p>allows fast iteration of editing and test-driving your functions.</p></li>
</ul>
<p>As you write code, it is also helpful to call the <code>check()</code> function often to ensure that you are not breaking things as you develop. Your workflow for writing and testing code in your package should emulate the following process:</p>
<p><img src="https://vsriram24.github.io/posts/posit-conf-24/packDev.png" class="img-fluid"></p>
<p>Another thing that folks don’t really consider when developing packages is that <strong><em>GitHub code search is your friend</em></strong>. You can check out <a href="https://github.com/cran" class="uri">https://github.com/cran</a> on GitHub - as packages get uploaded to CRAN, this user mirrors the full source code for the package onto GitHub for you. The same thing applies for <a href="https://github.com/tidyverse" class="uri">https://github.com/tidyverse</a> and <a href="https://github.com/r-lib" class="uri">https://github.com/r-lib</a>.</p>
<p>Regarding testing - when you are working on package development, most of your time will be spent looking at test files. For testing within the <code>devtools</code> framework, we call <code>use_testthat()</code>. Then we can run <code>test_file()</code> on a test R script that we’ve generated. A good workflow for macro-iteration across all files is to call <code>test()</code> followed by <code>test_coverage()</code> and finally followed by <code>check()</code>. <strong>Always aim to make tests self-sufficient and self-contained</strong>. It is better to repeat code than to introduce dependencies across tests. Don’t include <code>library()</code> or <code>source()</code> calls in your test files - include these in helper files instead.</p>
<p>Lastly, with respect to documentation - help topics are saved in <code>.Rd</code> files and will live in the <code>man/</code> folder of your R package. You can build a <code>README.md</code> file from your <code>README.Rmd</code> using the <code>build_readme()</code> function. It is also helpful to insert a <code>roxygen</code> skeleton into your code.</p>
<p>The following figure offers a good summary of how to approach package development with <code>devtools</code>:</p>
<p><img src="https://vsriram24.github.io/posts/posit-conf-24/packDev2.png" class="img-fluid"></p>
</section>
<section id="keynote-session-updates-from-posit---hadley-wickham" class="level3">
<h3 class="anchored" data-anchor-id="keynote-session-updates-from-posit---hadley-wickham">“Keynote Session: Updates from Posit” - <a href="https://hadley.nz">Hadley Wickham</a></h3>
<p>The company that organized this conference, formerly known as RStudio, is now known as Posit, PBC. But what is a PBC? PBC stands for “positive benefit corporation.” PBC’s sit between charities and full for-profit corporations. The mission of Posit is <strong>to create free and open source software for data science, scientific research, and technical communication</strong>. Posit supports both free and commercial tools - the free tools are meant to allow anyone to do data science work. The commercial tools are intended for larger organizations that apply Posit’s tooling at large.</p>
</section>
<section id="github-how-to-tell-your-professional-story---abigail-haddad" class="level3">
<h3 class="anchored" data-anchor-id="github-how-to-tell-your-professional-story---abigail-haddad">“GitHub: How To Tell Your Professional Story” - <a href="https://github.com/abigailhaddad">Abigail Haddad</a></h3>
<p>GitHub doesn’t just have to be a way for you to version control your code - it can be a platform for showcasing the work that you care about. You can update the <code>README</code> file for the repo that has the same name as your GitHub username to be able to provide an introduction to your GitHub page. Make sure to also pin repositories to your profile that can showcase your skillset in the right way.</p>
<p>*Note: I went ahead and did this right after Abigail’s talk. You can check out the result <a href="https://github.com/vsriram24">here</a> :)</p>
</section>
<section id="oops-im-a-manager---finding-your-minimal-viable-process---andrew-holz" class="level3">
<h3 class="anchored" data-anchor-id="oops-im-a-manager---finding-your-minimal-viable-process---andrew-holz">“Oops, I’m A Manager - Finding your Minimal Viable Process” - <a href="https://www.linkedin.com/in/andrewholz/">Andrew Holz</a></h3>
<p>What’s the minimal viable process (MVP) to being a manager? Let’s break these terms down with some layman’s definitions:</p>
<ul>
<li><p>P(rocess): how sh*t gets done!</p></li>
<li><p>V(iable): someone is paying the bills, so they expect the process to be <em>meaningful</em>.</p></li>
<li><p>M(inimal): heavy processes don’t promote progress - they paralyze it. Keep the process as lean as possible.</p></li>
</ul>
<p>We can distill this process into three phases: gather, do, and deliver</p>
<ol type="1">
<li>Gather</li>
</ol>
<ul>
<li>Intentionally consider all stakeholders and the level of input they can and should provide</li>
<li>Specify as much detail as the team needs, and no more (see https://tidyfirst.substack.com/p/responsible-slack)</li>
</ul>
<ol start="2" type="1">
<li>Do</li>
</ol>
<ul>
<li>Make sure you leave as much space as possible for the ‘who,’ ‘what,’ and ‘how’</li>
<li>Don’t make one person do the same thing over and over again. Also avoid dictating how they go about doing their tasks.</li>
<li>Lastly, be careful when you set up meetings - consider purpose and frequency as well as who needs to be there.
<ul>
<li>8 people in a meeting is too much - everyone will just be waiting for their turn to speak instead of actively communicating. A 4-person meeting is much better. The best kind of meeting? Context pairs where two individuals are fully aware of the context of their discussion.</li>
</ul></li>
</ul>
<ol start="3" type="1">
<li>Delivery</li>
</ol>
<ul>
<li>Beyond shipping your product, other aspects of delivery are often neglected. First, delivering your product involves being able to tell a coherent story with your stakeholders. Second, make sure that your entire team gets credit for its wins. Finally, do your best to own your mistakes.</li>
</ul>
<p>Ultimately, being a good manager is a process of trial and error. There is no “right” process - there is only the “right NOW” process. Observe and reflect along with your team, and make changes to your process over time.</p>
</section>
<section id="some-notes-from-lightning-talks---eric-leung-ben-arancibia-claire-bai-luis-d.-verde-arregoitia-mika-braginsky-andrew-gard" class="level3">
<h3 class="anchored" data-anchor-id="some-notes-from-lightning-talks---eric-leung-ben-arancibia-claire-bai-luis-d.-verde-arregoitia-mika-braginsky-andrew-gard">Some notes from Lightning Talks - <a href="https://erictleung.com">Eric Leung</a>, <a href="https://www.linkedin.com/in/bcarancibia/">Ben Arancibia</a>, <a href="https://www.linkedin.com/in/claire-bai-388727122/">Claire Bai</a>, <a href="https://luisdva.github.io">Luis D. Verde Arregoitia</a>, <a href="https://mikabr.io">Mika Braginsky</a>, <a href="https://www.lakeforest.edu/academics/faculty/agard">Andrew Gard</a></h3>
<ul>
<li>When you’re faced with a new challenging task, don’t reinvent the wheel! Use the best (available) tool for the job</li>
<li>Companies like <a href="https://cotahealthcare.com">COTA Healthcare</a> are developing R packages like <code>rwnavigator</code> to facilitate outcomes analysis for cancer. The goal of such tasks is to incorporate medical expertise from oncologists and functionality to standardize and simplify code.</li>
<li>The ALARM project has developed an R package called “fifty-states” to simulate alternative congressional redistricting plans for all 50 states. You can learn more about their package <a href="https://alarm-redist.org/fifty-states/">here</a>.</li>
<li>Documenting your code… comment next to the packages you call and also comment above individual steps. Comment as little and as clearly as possible. Automate informative comments by leveraging built-in descriptions, checking code for package components, and examining comments in code.</li>
<li><a href="https://datapages.github.io">Datapages</a> are a great tool for findable, accessible, interoperable, reusable (FAIR), and interactive data sharing. Uploading a static <code>.csv</code> file is easy for you but hard for the audience. On the other hand, making a custom repository and website is easy for the audience but hard for you. Sharing a datapage gives you the best of both worlds and makes it easy to share your data analysis in a robust manner while communicating its impact to your audience.</li>
<li>Learning in the age of AI… even if we don’t need to code ourselves in the future, we need to have the right vocabulary to be able to tell the AI what to do. Instead of telling students what they should implement, have them analyze AI output and figure out what didn’t work and why it is missing.</li>
<li>Check out the TV show <em>The Expanse</em>!</li>
</ul>
</section>
<section id="please-let-me-merge-before-i-start-crying-and-other-things-ive-said-at-the-git-terminal---meghan-harris" class="level3">
<h3 class="anchored" data-anchor-id="please-let-me-merge-before-i-start-crying-and-other-things-ive-said-at-the-git-terminal---meghan-harris">“Please Let Me Merge Before I Start Crying: And Other Things I’ve Said at the Git Terminal” - <a href="https://github.com/Meghansaha">Meghan Harris</a></h3>
<p><a href="https://git-scm.com">Git</a> is not the same as <a href="https://github.com">GitHub</a>. Git is the version control system, while GitHub is the developer platform that uses the Git software. R users can interact with Git through:</p>
<ul>
<li><p>a command-line interface (CLI)</p></li>
<li><p>the RStudio graphical user interface (GUI)</p></li>
<li><p>a third-party UI (e.g.&nbsp;<a href="https://github.com/apps/desktop">GitHub Desktop</a>)</p></li>
</ul>
<p>Merging in git involves the joining of two or more development histories (also known as branches) together. Merging allows you to safely modify work when collaborating with others. A lot of people think they are scared of merges… the truth is, they’re really scared of merge conflicts! Merge conflicts occur when competing changes are made to the same line of a file (a content conflict) or someone edits a file and someone else deletes the file (a structure conflict).</p>
<p>Here are some tips to dealing with merge conflicts:</p>
<p>1. <strong>Don’t panic!</strong> You can use <code>git merge --abort</code> like a time machine to get you to where you were before. REmember, you are in control. You can choose which code to use.</p>
<p>2. <strong>Assess the damage.</strong> You can call <code>git status</code> to see what has happened. Don’t be scared, but be careful. It doesn’t matter how complicated the conflict is… the process is the same.</p>
<p>Remember, merge conflicts are not git problems. They are communication, workflow, or knowledge gap problems. When you are working, be thoughtful before, during, and after your coding sessions.</p>
<ul>
<li>Before you code: check your git environment and check the branch status. Always pull first before touching anything. Emergencies are not real!</li>
<li>While you code: commit often, push thoughtfully, and use git stashes when needed.</li>
<li>After you code: you are reviewer #1! Make your code as clear as can be.</li>
</ul>
<p>With respect to learning how to get better with git… do what you need to do, however you need to do it. Sometimes, all you really need is a bit more practice.</p>
</section>
<section id="keynote-session-a-future-of-data-science---allen-downey" class="level3">
<h3 class="anchored" data-anchor-id="keynote-session-a-future-of-data-science---allen-downey">“Keynote Session: A Future of Data Science” - <a href="https://www.allendowney.com/wp/">Allen Downey</a></h3>
<p>What does it mean for data work to be successful? It means that we have successfully answered a question of interest. Now how do we go about answering a question? We need the following things:</p>
<ul>
<li><p>data</p></li>
<li><p>a simple method / basic visualization</p></li>
<li><p>free software and tools for reliable science</p></li>
<li><p>a distribution system (e.g.&nbsp;a <a href="https://vsriram24.github.io/blog.html">blog</a>)</p></li>
</ul>
<p><img src="https://vsriram24.github.io/posts/posit-conf-24/statTest.png" class="img-fluid"></p>
<p>Data science involves the application of tools and processes to answer questions, resolve disagreements, and make better decisions. Data science has been on the <a href="https://en.wikipedia.org/wiki/Gartner_hype_cycle">Gartner hype cycle</a> for a while… where are we today with respect to this cycle for data science? The peak of inflated expectations happened around 2009 to 2012, while the trough of disillusionment happened from 2016 to 2018. Now, we’re starting to hit the plateau of productivity… and the reason for this is because we have not fully embraced <a href="https://en.wikipedia.org/wiki/Computational_statistics">computational statistics</a>.</p>
<p>What is the difference between mathematical statistics and computational statistics? Mathematical statistics can be thought of as the start of the field, while computational statistics can be considered its final evolution. Data science as a field exists because statistics missed the boat on computers. Topics like general purpose programming languages, machine learning, and more were not introduced into the statistical discipline early on enough.</p>
<p>Nevertheless, there are many reasons to be optimistic about the progression of statistics and data science. Not only do we have more and more available data, but we also have improved data literacy. However, data bias from the increased consumption of negative media is skewing the trajectory of data science progress downward. Ultimately, data itself is the antidote to this negativity bias. We can use data to understand the world better, so that we know how to make the world better! This is the ultimate benefit of open data!</p>
<p><img src="https://vsriram24.github.io/posts/posit-conf-24/openSci.png" class="img-fluid"></p>
</section>
<section id="uniquely-human-data-storytelling-in-the-age-of-ai---laura-gast" class="level3">
<h3 class="anchored" data-anchor-id="uniquely-human-data-storytelling-in-the-age-of-ai---laura-gast">“Uniquely Human: Data Storytelling in the Age of AI” - <a href="https://www.linkedin.com/in/laurabgast/">Laura Gast</a></h3>
<p>You have to speak for the data! The data will NOT speak for itself. You can do this with the four following modes of persuasion:</p>
<ul>
<li><p>Logos (logic): data and methods</p></li>
<li><p>Ethos (trust): credibility</p></li>
<li><p>Pathos (emotion): narrative</p></li>
<li><p>Kairos (time): audience and timing</p></li>
</ul>
<p>Context feeds story. Story feeds impact. Context includes the following three components: background, framing, and circumstance. Make sure to contextualize both the inputs and the outputs of your data story. Data visualization can be used to communicate scale of impact.</p>
<p>Story includes both an arc and a narrative. A story provides your audience with access. Your audience is not passive - you want them to be excited and rooting for the outcome of your analysis. At the same time, you must be careful in a world where “great stories” and things that aren’t true aren’t really the same thing. You want to make sure that you do not lose credibility.</p>
<p>Regarding impact: data is not information, information is not knowledge, and knowledge is not wisdom. Data does not act, and AI does not have intent. It thus becomes evident that <strong>humans cannot be cut out of the process</strong>. Remember that you will always have to speak for the data through context, story, and impact.</p>
<hr>
</section>
<section id="personal-takeaways" class="level3">
<h3 class="anchored" data-anchor-id="personal-takeaways">Personal Takeaways</h3>
<p>I had a great time at my first posit::conf, and I look forward to attending more in the future. Here are a few key takeaways related to trends in the field of data science as well as ways that I could update my personal workflows:</p>
<ul>
<li><p>In the coming years, with platforms like <a href="https://github.com/posit-dev/positron">Positron</a> and <a href="https://github.com/r-wasm/quarto-live">Quarto Live</a>, we will see expanded ways that people can learn and practice data science across languages and disciplines.</p></li>
<li><p>GitHub should be used not just as a version control platform but as a way to share your projects with the public, as well as to learn from other people’s work. Learn how to use GitHub code search!</p></li>
<li><p><a href="https://duckdb.org">DuckDB</a> (and <a href="https://github.com/tidyverse/duckplyr">duckplyr</a>) is a simple and highly effective way of storing and manipulating data tables. Stop using <code>.csv</code>’s!</p></li>
<li><p>Generative AI tools like ChatGPT aren’t the end-all, be-all to data science work, but they can be extremely helpful tools for implementing new tools that have a high learning curve (e.g.&nbsp;<a href="https://developer.mozilla.org/en-US/docs/Web/CSS">CSS</a>)</p></li>
<li><p>Learning new concepts can be a challenging task, particularly when there are multiple ways to do a single thing. It’s often easiest to pick a single way of doing things and master it. Go with what works for you!</p></li>
<li><p>Regardless of how the field of AI continues to progress (whether the hype grows or shrinks), people will remain at the heart of data science. It is our responsibility as ethical data scientists to promote open sharing of data and tools, as well as to advocate for the data and tell the stories we wish to tell when communicating with stakeholders who are not as data literate.</p></li>
<li><p>Nothing is ever really an <u>emergency</u>. If someone’s life is on the line, then you can worry. Otherwise, there’s no need for you to stress as much as you currently are!</p></li>
</ul>
<hr>
<p>This concludes my summary of my experience at posit::conf 2024! I’d like to give a huge thank you to Posit for bringing not just the national but also international data science community together in such a fun, educational event. Until next time, [VS]Coders!</p>


</section>

 ]]></description>
  <category>Conferences</category>
  <guid>https://vsriram24.github.io/posts/posit-conf-24/</guid>
  <pubDate>Mon, 02 Sep 2024 07:00:00 GMT</pubDate>
  <media:content url="https://vsriram24.github.io/posts/posit-conf-24/pensiveZola.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>An intro to NLP for oncology</title>
  <dc:creator>Vivek Sriram</dc:creator>
  <link>https://vsriram24.github.io/posts/nlp-oncology-overview/</link>
  <description><![CDATA[ 





<p>In this week’s blog, I will be summarizing Yim et al’s 2016 review paper from <em>JAMA Oncology</em>, titled “Natural Language Processing in Oncology: A Review.” This paper was written by researchers at the University of Washington Medical Center, including individuals from the Departments of Biomedical and Health Informatics, the Department of Linguistics, the Division of Oncology at the Department of Medicine, and the Department of Radiology. You can read the abstract for this paper <a href="https://pubmed.ncbi.nlm.nih.gov/27124593/">here</a>.</p>
<p>The full text of this manuscript is unfortunately not publicly available (you or your institution must have access to <em>JAMA Oncology</em> to read the full text), so I hope that this summary provides those without access to this journal some insight into some exciting content. Furthermore, given that this paper is from 2016, it does not include many of the recent advances in the past 8 years related to transformer / large language models that have become more relevant in NLP applications. Nevertheless, I found this paper to be an excellent summary of how to frame the workflow for tackling NLP research questions, particularly in terms of the collaborations needed among oncologists and informaticians. Much of the content covered remains as relevant today as it did 8 years ago, and I look forward to using my takeaways from this material in <a href="https://hutchdatascience.org/tr-analytics/">my own work at the Fred Hutch Cancer Center</a>.</p>
<p>With context out of the way, let’s get started!</p>
<p><img src="https://vsriram24.github.io/posts/nlp-oncology-overview/paperAbstract.png" class="img-fluid"></p>
<hr>
<section id="oncology-focused-nlp" class="level2">
<h2 class="anchored" data-anchor-id="oncology-focused-nlp">Oncology-focused NLP</h2>
<p><strong>Natural Language Processing</strong> (NLP) refers to any computer-based algorithm that can handle, augment, and transform natural language so that it can be represented for computation.</p>
<p>NLP is particularly attractive for clinical research applications for the following reasons. One can:</p>
<ol type="1">
<li>define new variables that are not readily available in electronic health records as stored values</li>
<li>automate the process of reviewing clinical notes for patient diagnosis instead of requiring a resource-intensive manual review process.</li>
<li>expedite biomedical discovery by empowering clinicians with the ability to analyze outcomes in the context of big data</li>
</ol>
<p>With respect to the field of oncology, NLP applications typically have the following objectives:</p>
<ol type="1">
<li><strong>Case identification:</strong> determine which patients may have a case of the disease of interest
<ul>
<li>Here, we process the free text from clinical notes to augment the diagnosis codes that correspond to a patient’s labeled set of diseases or symptoms</li>
</ul></li>
<li><strong>Staging:</strong> determine the stage of a patient’s cancer progress
<ul>
<li>Here, we process the free text from clinical notes to determine the stage of a patient’s cancer progression. This objective is more challenging than case identification because it is highly context-specific depending on the type of cancer.</li>
</ul></li>
<li><strong>Outcome determination:</strong> determine the patient’s ultimate outcome (cancer advancement vs.&nbsp;remission vs.&nbsp;death)
<ul>
<li>Here, we process the free text from clinical notes to determine the patient’s ultimate outcome (advancement vs.&nbsp;remission vs.&nbsp;death). This objective is the most challenging of the three because it essentially requires us to perform cancer staging with respect to time.</li>
</ul></li>
</ol>
</section>
<section id="the-role-of-the-oncologist" class="level2">
<h2 class="anchored" data-anchor-id="the-role-of-the-oncologist">The role of the oncologist</h2>
<p>As with many objectives in the domain of biomedical informatics, developing NLP systems for oncology applications requires significant involvement from a domain expert.</p>
<p>An oncologist can contribute to the development of an NLP system in the following ways:</p>
<ul>
<li><strong>Project conception:</strong> using their domain expertise, an oncologist can devise practical and impactful applications of NLP</li>
<li><strong>Corpus annotation:</strong> an oncologist can assist with annotation of training data by providing the “correct answers” for a body of text based upon a set of annotation guidelines.</li>
<li><strong>System evaluation and error analysis:</strong> based on measures such as precision and recall, an oncologist can manually review true and false positives and negatives in the test data to help determine the strengths and weaknesses of the system</li>
</ul>
</section>
<section id="nlp-tasks-and-strategies-for-oncology" class="level2">
<h2 class="anchored" data-anchor-id="nlp-tasks-and-strategies-for-oncology">NLP tasks and strategies for oncology</h2>
<p>Within the context of oncology, NLP is typically used for <strong>Information Extraction</strong> (IE). IE refers to the transformation of unstructured data into a structured form. IE encompasses multiple subtasks, including <strong>Named Entity Recognition</strong> (NER), <strong>Relation Extraction</strong> (RE), <strong>Text Classification</strong>, and <strong>Template Extraction</strong>.</p>
<ul>
<li>NER involves grouping words in a text and assigning them to a pre-defined “concept</li>
<li>RE involves the assignment of relationships between entities</li>
<li>Text Classification assigns categorical label for a body of text</li>
<li>Template Extraction collects a set of related entities, relations, and labels to define a form for structured data.</li>
</ul>
<p>You can refer to figure 1 from the paper to see an example of clinical information extraction.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://vsriram24.github.io/posts/nlp-oncology-overview/nlp_fig1.png" class="img-fluid figure-img"></p>
<figcaption>Fig 1 from the manuscript - an example of free-text processing, IE, and text classification</figcaption>
</figure>
</div>
<p>Strategies to tackle the above sub-tasks can be grouped into the following three buckets: rule-based, statistical, and hybrid approaches.</p>
<ul>
<li><strong>Rule-based</strong> approaches involve heuristic algorithms designed by domain specialists. They can be as simple as individual keyword look-ups or can be defined by complex conditional logic. When the defined rules are simple, rule-based approaches can significantly improve the interpretability of a model. However, if the rules are more complicated, the established model will lose interpretability and become harder to replicate or update.</li>
<li><strong>Statistical</strong> (a.k.a machine learning) systems are algorithms designed to statistically maximize the probability of finding the correct answer based on the distribution of the training data. Such models are less prone to overfitting compared to rule-based approaches, and they can be easily adapted to new data. However, these models require an extensive amount of unbiased, representative training data to work accurately.</li>
<li><strong>Hybrid</strong> approaches work to minimize the disadvantages of rule-based and statistical algorithms by combining these two methods.</li>
</ul>
</section>
<section id="resources-needed-for-clinical-nlp" class="level2">
<h2 class="anchored" data-anchor-id="resources-needed-for-clinical-nlp">Resources needed for clinical NLP</h2>
<p>Creating an NLP system requires the use of three common related NLP resources: extraction tools, ontologies, and corpora.</p>
<ul>
<li><p><strong>Extraction tools</strong> refer to developed subsystems that can be used on new datasets with little to no modifications. Typical clinical NLP pipelines can involve the following tasks:</p>
<ol type="1">
<li>Section Identification: identifying sections is particularly useful for clinical notes, where different sections will contain different types of content</li>
<li>Medical NER: this is a more specialized version of general English NER, taking into account acronyms, abbreviations, and synonyms that are common in medical text. Generally, out-of-the-box NER systems are usually insufficient, requiring the application of in-house rule-based and statistical NER systems. Two freely available development tools include MetaMap and the Mayo Clinical Text Analysis and Knowledge Extraction System</li>
<li>Negation detection: this helps distinguish the phrase “patient has fever” from “patient has no signs of fever.” This can be a complicated task depending on the language used in the notes.</li>
</ol>
<ul>
<li>Other common tasks in NLP pipelines include: coreference resolution, temporal classification, medication information extraction, family history extraction, assertion detection, and polarity detection. You can see some examples of these tasks in Figure 4 from the paper:</li>
</ul></li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://vsriram24.github.io/posts/nlp-oncology-overview/nlp_fig4.png" class="img-fluid figure-img"></p>
<figcaption>Fig 4 from the manuscript - examples of common tasks in NLP pipelines</figcaption>
</figure>
</div>
<ul>
<li><p><strong>Ontologies</strong> refer to knowledge bases that reference how various concepts are related to one another. The most basic form of an ontology could be a medical dictionary. A more complicated form of an ontology might involve a knowledge graph of concepts and their relationships.</p></li>
<li><p><strong>Corpora</strong> are collections of (sometimes annotated) clinical text that can be used to train or test an NLP system. Some examples of publicly available de-identified medical corpora including the i2b2 challenge sets, the Conference and Laboratories of the Evaluation Forum datasets, the MIMIC-II corpus, the MIPACQ corpus, and <a href="http://MTSamples.com">MTSamples.com</a>.</p></li>
</ul>
</section>
<section id="challenges-in-designing-an-nlp-system" class="level2">
<h2 class="anchored" data-anchor-id="challenges-in-designing-an-nlp-system">Challenges in designing an NLP system</h2>
<p>We can create a desired NLP system by framing our desired objective (case identification, staging, or outcome prediction) as a series of NLP operations. For instance, a basic case identification task may involve NER followed by negation detection. On the other hand, an outcome prediction task may involve a simple NER task or a more complicated algorithm that identifies tumor sizes and associated dates before performing logic operations to deduce that a change took place.</p>
<p>Ultimately, the final success of an NLP system will depend on two key points:</p>
<ol type="1">
<li><strong>how do you frame the problem at hand?</strong></li>
<li><strong>how effective are the individual components of your pipeline?</strong></li>
</ol>
<p>Multiple challenges can affect the efficacy of your model. Firstly, creation of an NLP system requires careful planning and investment to develop an annotated text corpus for system training and testing. Model performance can also be highly variable depending on the task at hand – new larger, heterogeneous test data can challenge the accuracy of your system. Multiple iterations of software development are usually needed before you can arrive at a robust NLP product. Lastly, the data science mantra of “garbage in, garbage out” continues to ring true – the tools that you develop will only be as good the quality of the data that train the systems.</p>
</section>
<section id="summary" class="level2">
<h2 class="anchored" data-anchor-id="summary">Summary</h2>
<p>This concludes my overview of “Natural Language Processing in Oncology: A Review.” I look forward to covering more such papers in the future as I progress with my work in clinical NLP at the Hutch.</p>
</section>
<section id="references" class="level2">
<h2 class="anchored" data-anchor-id="references">References</h2>
<ul>
<li><a href="https://pubmed.ncbi.nlm.nih.gov/27124593/">“Natural Language Processing in Oncology: A Review”</a></li>
</ul>


</section>

 ]]></description>
  <category>Overviews</category>
  <guid>https://vsriram24.github.io/posts/nlp-oncology-overview/</guid>
  <pubDate>Mon, 19 Aug 2024 07:00:00 GMT</pubDate>
  <media:content url="https://vsriram24.github.io/posts/nlp-oncology-overview/minnesota.jpeg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Factor analysis for multiomics data with MOFA2</title>
  <dc:creator>Vivek Sriram</dc:creator>
  <link>https://vsriram24.github.io/posts/multiomics-fa/</link>
  <description><![CDATA[ 





<p>In this week’s blog, I’ll be providing a brief overview on multiomic data and the utility of factor analysis. I will also summarize a tutorial and case study developed by Alex Gurbych from blackthorn.ai that highlights how to perform factor analysis using the Bioconductor package <code>MOFA2</code>. You can review Alex’s original tutorial <a href="https://levelup.gitconnected.com/multi-omics-analysis-3857956a7a3d">here</a>. With context out of the way, let’s get started!</p>
<hr>
<section id="introduction" class="level1">
<h1>1. Introduction</h1>
<p>In the following workflow, we will derive biological insights from a multiomic dataset through the application of factor analysis with the <code>MOFA2</code> package. Before we get into our case study example, let’s go over some definitions.</p>
<section id="multiomics" class="level2">
<h2 class="anchored" data-anchor-id="multiomics">1.1. Multiomics</h2>
<p><strong>Multiomics</strong> refers to a biological analysis approach that considers multiple data modalities concurrently to study a biological system holistically. The individual data modalities of multiomic analysis, also known as <em>’omes</em>, are comprised of large-scale data and typically summarize the entire set of biomolecules for an organism. Some examples of individual ’omes include the genome, proteome, transcriptome, epigenome, and phenome.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://vsriram24.github.io/posts/multiomics-fa/kimLabOmics.PNG" class="img-fluid figure-img"></p>
<figcaption>An overview of how multiomic data can lend itself to precision medicine applications - Dokyoon Kim Lab for Integrative ’Omics and Biomedical Informatics at the University of Pennsylvania</figcaption>
</figure>
</div>
<p>Multiomic studies can lend themselves to the improved characterization of biological processes across molecular layers. By integrating multiple ’omes together, researchers can analyze complex biological big data to find novel associations between biological entities, pinpoint relevant biomarkers, and build elaborate markers of disease and physiology.</p>
<p>Motivated by this improved ability to represent the underlying biology of a system, multiomic profiling has been increasingly applied across a variety of biological domains, including cancer biology, regulatory genomics, microbiology, and host‐pathogen biology. A common aim of these applications is to characterize heterogeneity between samples, as manifested in one or several of the data modalities. Multiomic profiling is particularly appealing if the relevant axes of variation are not known beforehand, and hence may be missed by studies that consider a single data modality or targeted approaches. One approach to capture the relevant axes of variation in a biological system is <em>factor analysis</em>.</p>
</section>
<section id="factor-analysis" class="level2">
<h2 class="anchored" data-anchor-id="factor-analysis">1.2. Factor analysis</h2>
<p><strong>Factor analysis</strong> is a statistical method that summarizes the variability across observed, correlated variables in a smaller set of variables. These newly generated variables correspond to the ‘factors’ of the original data - they are generated by determining linear combinations of the observed variables and adding small fixed deviations. Correlations between the factors of an input set of predictors and an output response variable can reveal previously unobserved latent axes of variation that affect the response of the data. Thus, the main goal of factor analysis is to identify hidden variables and evaluate their correlations with output variables of interest.</p>
</section>
<section id="mofa2" class="level2">
<h2 class="anchored" data-anchor-id="mofa2">1.3. <code>MOFA2</code></h2>
<p>Given the utility of factor analysis for the identification of relevant axes of variation in biological systems, it becomes particularly beneficial to have a simple method for integrating and analyzing multiomic data in this manner - <em>Multiomic Factor Analysis (MOFA)</em> offers one such option.</p>
<p><strong>MOFA</strong> is a probabilistic factor model that performs unsupervised integration of multiple modalities of omics data and discovers the principal axes of variation in multiomic data sets. Intuitively, MOFA can be viewed as a versatile and statistically rigorous generalization of principal component analysis (PCA) for multiomics data. MOFA infers a set of hidden factors that capture biological and technical sources of variability. It disentangles axes of heterogeneity that are shared across multiple modalities as well as those specific to individual data modalities. The learnt factors enable a variety of downstream analyses, including identification of sample subgroups, data imputation and the detection of outlier samples. The inferred factor loadings can be sparse, thereby facilitating the linkage between the factors and the most relevant molecular features. Importantly, MOFA disentangles to what extent each factor is unique to a single data modality or is manifested in multiple modalities, thereby revealing shared axes of variation between the different omics layers. Once trained, the model output can be used for a range of downstream analyses, including visualization, clustering, and classification of samples in the low‐dimensional spaces spanned by the factors.</p>
<p>You can read more about the <code>MOFA2</code> package on its Bioconducter documentation page <a href="https://www.bioconductor.org/packages/release/bioc/html/MOFA2.html">here</a>.</p>
</section>
</section>
<section id="dataset-description" class="level1">
<h1>2. Dataset description</h1>
<p>With background on multiomics and factor analysis covered, let’s jump into our case study: multiomics factor analysis for a dataset of cancer patients.</p>
<p>For our example dataset, we will make use of a cohort of 200 patients diagnosed with chronic lymphocytic leukemia (CLL). The CLL dataset can be downloaded for free from <a href="https://bioconductor.org/packages/release/data/experiment/html/BloodCancerMultiOmics2017.html">here</a>.</p>
<p>The CLL dataset we will be using consists of four data modalities:</p>
<ul>
<li><p>genomics (somatic mutations)</p></li>
<li><p>epigenomics (DNA methylation)</p></li>
<li><p>transcriptomics (RNA-seq)</p></li>
<li><p>phenotypes (drug response).</p></li>
</ul>
<p>Around 40% of the feature values are absent.</p>
<p>Let’s start by importing the required libraries:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setwd</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"~/Documents/Developer/vsriram24.github.io/posts/multiomics-fa"</span>)</span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyverse)</span>
<span id="cb1-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(data.table)</span>
<span id="cb1-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(MOFA2)</span>
<span id="cb1-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(MOFAdata)</span></code></pre></div>
</div>
<p>Now, we import the CLL dataset. Data are stored as a list of matrices with features as rows and samples as columns. We can use the <code>lapply</code> function to get the number of features and samples for each “’ome” in our data.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">utils<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CLL_data"</span>)</span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(</span>
<span id="cb2-4">  CLL_data, </span>
<span id="cb2-5">  dim</span>
<span id="cb2-6">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$Drugs
[1] 310 200

$Methylation
[1] 4248  200

$mRNA
[1] 5000  200

$Mutations
[1]  69 200</code></pre>
</div>
</div>
</section>
<section id="model-training" class="level1">
<h1>3. Model training</h1>
<p>With our data uploaded into our environment, we can begin to fit a model. We start by creating a new <code>MOFA</code> model for our data using the <code>create_mofa</code> function:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">MOFAobject <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">create_mofa</span>(CLL_data)</span></code></pre></div>
</div>
<p>We can visualize the number of features and samples in our data as well as missing values using the <code>plot_data_overview</code> function:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot_data_overview</span>(MOFAobject)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://vsriram24.github.io/posts/multiomics-fa/index_files/figure-html/unnamed-chunk-4-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>In the above figure, <code>D</code> tells us the number of features for each data modality, while <code>N</code> represents the number of samples. Missing data are represented by gray bars.</p>
<p>With our model initialized, we can set various options to customize the way that we train it on our data. In our case, we will specify that we want to generate 15 factors, and that we want to set the maximum number of model training iterations to be 100.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">data_opts <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_default_data_options</span>(MOFAobject)</span>
<span id="cb6-2"></span>
<span id="cb6-3">model_opts <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_default_model_options</span>(MOFAobject) </span>
<span id="cb6-4">model_opts<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>num_factors <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span></span>
<span id="cb6-5"></span>
<span id="cb6-6">train_opts <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_default_training_options</span>(MOFAobject)</span>
<span id="cb6-7">train_opts<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>seed <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb6-8">train_opts<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>save_interrupted <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span>
<span id="cb6-9">train_opts<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>maxiter <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span></span>
<span id="cb6-10">train_opts<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>convergence_mode <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"slow"</span></span></code></pre></div>
</div>
<p>Finally, with our options specified, we can go ahead and train our model.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">MOFAobject <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">prepare_mofa</span>(</span>
<span id="cb7-2">  MOFAobject,</span>
<span id="cb7-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">training_options =</span> train_opts,</span>
<span id="cb7-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">model_options =</span> model_opts,</span>
<span id="cb7-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data_options =</span> data_opts</span>
<span id="cb7-6">)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Checking data options...</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Checking training options...</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Checking model options...</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">MOFAobject_trained <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">run_mofa</span>(</span>
<span id="cb11-2">  MOFAobject,</span>
<span id="cb11-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">outfile =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"MOFA2_CLL_trained.hdf5"</span></span>
<span id="cb11-4">)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning: Output file MOFA2_CLL_trained.hdf5 already exists, it will be replaced</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Connecting to the mofapy2 python package using reticulate (use_basilisk = FALSE)... 
    Please make sure to manually specify the right python binary when loading R with reticulate::use_python(..., force=TRUE) or the right conda environment with reticulate::use_condaenv(..., force=TRUE)
    If you prefer to let us automatically install a conda environment with 'mofapy2' installed using the 'basilisk' package, please use the argument 'use_basilisk = TRUE'</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>
        #########################################################
        ###           __  __  ____  ______                    ### 
        ###          |  \/  |/ __ \|  ____/\    _             ### 
        ###          | \  / | |  | | |__ /  \ _| |_           ### 
        ###          | |\/| | |  | |  __/ /\ \_   _|          ###
        ###          | |  | | |__| | | / ____ \|_|            ###
        ###          |_|  |_|\____/|_|/_/    \_\              ###
        ###                                                   ### 
        ######################################################### 
       
 
        
use_float32 set to True: replacing float64 arrays by float32 arrays to speed up computations...

Successfully loaded view='Drugs' group='group1' with N=200 samples and D=310 features...
Successfully loaded view='Methylation' group='group1' with N=200 samples and D=4248 features...
Successfully loaded view='mRNA' group='group1' with N=200 samples and D=5000 features...
Successfully loaded view='Mutations' group='group1' with N=200 samples and D=69 features...


Model options:
- Automatic Relevance Determination prior on the factors: False
- Automatic Relevance Determination prior on the weights: True
- Spike-and-slab prior on the factors: False
- Spike-and-slab prior on the weights: False
Likelihoods:
- View 0 (Drugs): gaussian
- View 1 (Methylation): gaussian
- View 2 (mRNA): gaussian
- View 3 (Mutations): gaussian




######################################
## Training the model with seed 1 ##
######################################


ELBO before training: -19615100.54 

Iteration 1: time=0.58, ELBO=-3087652.10, deltaELBO=16527448.442 (84.25880055%), Factors=15
Iteration 2: time=0.55, Factors=15
Iteration 3: time=0.52, Factors=15
Iteration 4: time=0.56, Factors=15
Iteration 5: time=0.50, Factors=15
Iteration 6: time=0.42, ELBO=-2873482.21, deltaELBO=214169.888 (1.09186230%), Factors=15
Iteration 7: time=0.44, Factors=15
Iteration 8: time=0.49, Factors=15
Iteration 9: time=0.47, Factors=15
Iteration 10: time=0.40, Factors=15
Iteration 11: time=0.54, ELBO=-2867923.23, deltaELBO=5558.977 (0.02834029%), Factors=15
Iteration 12: time=0.47, Factors=15
Iteration 13: time=0.41, Factors=15
Iteration 14: time=0.39, Factors=15
Iteration 15: time=0.53, Factors=15
Iteration 16: time=0.50, ELBO=-2865486.12, deltaELBO=2437.114 (0.01242468%), Factors=15
Iteration 17: time=0.63, Factors=15
Iteration 18: time=0.97, Factors=15
Iteration 19: time=1.05, Factors=15
Iteration 20: time=0.54, Factors=15
Iteration 21: time=0.53, ELBO=-2863390.64, deltaELBO=2095.482 (0.01068300%), Factors=15
Iteration 22: time=0.46, Factors=15
Iteration 23: time=0.44, Factors=15
Iteration 24: time=0.59, Factors=15
Iteration 25: time=0.46, Factors=15
Iteration 26: time=0.46, ELBO=-2862445.15, deltaELBO=945.491 (0.00482022%), Factors=15
Iteration 27: time=0.49, Factors=15
Iteration 28: time=0.55, Factors=15
Iteration 29: time=0.58, Factors=15
Iteration 30: time=0.38, Factors=15
Iteration 31: time=0.31, ELBO=-2861818.14, deltaELBO=627.006 (0.00319655%), Factors=15
Iteration 32: time=0.39, Factors=15
Iteration 33: time=0.31, Factors=15
Iteration 34: time=0.34, Factors=15
Iteration 35: time=0.46, Factors=15
Iteration 36: time=0.41, ELBO=-2861358.43, deltaELBO=459.708 (0.00234364%), Factors=15
Iteration 37: time=0.54, Factors=15
Iteration 38: time=0.32, Factors=15
Iteration 39: time=0.36, Factors=15
Iteration 40: time=0.30, Factors=15
Iteration 41: time=0.45, ELBO=-2860993.31, deltaELBO=365.123 (0.00186144%), Factors=15
Iteration 42: time=0.28, Factors=15
Iteration 43: time=0.29, Factors=15
Iteration 44: time=0.30, Factors=15
Iteration 45: time=0.30, Factors=15
Iteration 46: time=0.25, ELBO=-2860681.72, deltaELBO=311.589 (0.00158852%), Factors=15
Iteration 47: time=0.25, Factors=15
Iteration 48: time=0.24, Factors=15
Iteration 49: time=0.28, Factors=15
Iteration 50: time=0.26, Factors=15
Iteration 51: time=0.27, ELBO=-2860392.99, deltaELBO=288.726 (0.00147196%), Factors=15
Iteration 52: time=0.29, Factors=15
Iteration 53: time=0.26, Factors=15
Iteration 54: time=0.26, Factors=15
Iteration 55: time=0.26, Factors=15
Iteration 56: time=0.30, ELBO=-2860101.84, deltaELBO=291.150 (0.00148432%), Factors=15
Iteration 57: time=0.29, Factors=15
Iteration 58: time=0.25, Factors=15
Iteration 59: time=0.29, Factors=15
Iteration 60: time=0.39, Factors=15
Iteration 61: time=0.26, ELBO=-2859789.25, deltaELBO=312.592 (0.00159363%), Factors=15
Iteration 62: time=0.26, Factors=15
Iteration 63: time=0.28, Factors=15
Iteration 64: time=0.28, Factors=15
Iteration 65: time=0.23, Factors=15
Iteration 66: time=0.29, ELBO=-2859453.86, deltaELBO=335.396 (0.00170989%), Factors=15
Iteration 67: time=0.27, Factors=15
Iteration 68: time=0.25, Factors=15
Iteration 69: time=0.25, Factors=15
Iteration 70: time=0.24, Factors=15
Iteration 71: time=0.28, ELBO=-2859111.11, deltaELBO=342.743 (0.00174734%), Factors=15
Iteration 72: time=0.26, Factors=15
Iteration 73: time=0.25, Factors=15
Iteration 74: time=0.28, Factors=15
Iteration 75: time=0.27, Factors=15
Iteration 76: time=0.26, ELBO=-2858782.22, deltaELBO=328.898 (0.00167676%), Factors=15
Iteration 77: time=0.25, Factors=15
Iteration 78: time=0.28, Factors=15
Iteration 79: time=0.31, Factors=15
Iteration 80: time=0.29, Factors=15
Iteration 81: time=0.29, ELBO=-2858489.40, deltaELBO=292.820 (0.00149283%), Factors=15
Iteration 82: time=0.29, Factors=15
Iteration 83: time=0.28, Factors=15
Iteration 84: time=0.28, Factors=15
Iteration 85: time=0.27, Factors=15
Iteration 86: time=0.33, ELBO=-2858247.17, deltaELBO=242.225 (0.00123489%), Factors=15
Iteration 87: time=0.28, Factors=15
Iteration 88: time=0.25, Factors=15
Iteration 89: time=0.33, Factors=15
Iteration 90: time=0.26, Factors=15
Iteration 91: time=0.28, ELBO=-2858055.75, deltaELBO=191.417 (0.00097587%), Factors=15
Iteration 92: time=0.29, Factors=15
Iteration 93: time=0.26, Factors=15
Iteration 94: time=0.26, Factors=15
Iteration 95: time=0.27, Factors=15
Iteration 96: time=0.32, ELBO=-2857907.84, deltaELBO=147.911 (0.00075407%), Factors=15
Iteration 97: time=0.26, Factors=15
Iteration 98: time=0.25, Factors=15
Iteration 99: time=0.27, Factors=15


#######################
## Training finished ##
#######################


Warning: Output file MOFA2_CLL_trained.hdf5 already exists, it will be replaced
Saving model in MOFA2_CLL_trained.hdf5...</code></pre>
</div>
</div>
<p>Our model has been successfully trained!</p>
</section>
<section id="postprocessing" class="level1">
<h1>4. Postprocessing</h1>
<section id="add-sample-metadata" class="level2">
<h2 class="anchored" data-anchor-id="add-sample-metadata">4.1. Add sample metadata</h2>
<p>Now that we have trained our model on our data, we can incorporate metadata from the input dataset to evaluate correlations between our different ’omes and additional variables. Let’s get data for age, sex, death status, and treatment status:</p>
<ul>
<li><p>Age: age in years</p></li>
<li><p>Died: (T/F) did the patient die?</p></li>
<li><p>Sex: (M/F)</p></li>
<li><p>treatedAfter: (T/F) was the patient treated after?</p></li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load sample metadata</span></span>
<span id="cb15-2">CLL_metadata <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fread</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ftp://ftp.ebi.ac.uk/pub/databases/mofa/cll_vignette/sample_metadata.txt"</span>)</span>
<span id="cb15-3"></span>
<span id="cb15-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add sample metadata to the model</span></span>
<span id="cb15-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">samples_metadata</span>(MOFAobject_trained) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> CLL_metadata</span></code></pre></div>
</div>
</section>
<section id="correlation-analysis-of-factors" class="level2">
<h2 class="anchored" data-anchor-id="correlation-analysis-of-factors">4.2. Correlation analysis of factors</h2>
<p>In order for our model to work accurately, we must ensure that the factors that we have generated are not correlated with one another. If we observe significant correlations between factors, we either used too many factors or performed and insufficient amount of normalization. We can visualize correlations across factors using the <code>plot_factor_cor</code> function.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot_factor_cor</span>(MOFAobject_trained)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://vsriram24.github.io/posts/multiomics-fa/index_files/figure-html/unnamed-chunk-9-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>We can see from our figure that our generated factors show no significant correlations with one another.</p>
</section>
</section>
<section id="variance-breakdown" class="level1">
<h1>5. Variance Breakdown</h1>
<section id="explained-variance-decomposition-by-factor" class="level2">
<h2 class="anchored" data-anchor-id="explained-variance-decomposition-by-factor">5.1. Explained variance decomposition by factor</h2>
<p>We can use the <code>plot_variance_explained</code> function to determine how much of the variance in each of our individual data modalities is explained by each of our factors:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot_variance_explained</span>(</span>
<span id="cb17-2">  MOFAobject_trained, </span>
<span id="cb17-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max_r2 =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span></span>
<span id="cb17-4">)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://vsriram24.github.io/posts/multiomics-fa/index_files/figure-html/unnamed-chunk-10-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>From our explained variance plot, we can see that Factor 1 explains a high amount of variance across all four of our data modalities. Factor 2 explained a high amount of variance for drug response, Factor 3 explains a high amount of variance for drug response, transcriptomics, and genomics, and Factor 4 explains a high amount of variance for transcriptomics.</p>
</section>
<section id="explained-variance-per-omic-modality" class="level2">
<h2 class="anchored" data-anchor-id="explained-variance-per-omic-modality">5.2. Explained variance per omic modality</h2>
<p>We can also use the <code>plot_variance_explained</code> function to determine the amount of variance that is explained across our four data modalities given all 15 factors in our model.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot_variance_explained</span>(</span>
<span id="cb18-2">  MOFAobject_trained,</span>
<span id="cb18-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">plot_total =</span> T</span>
<span id="cb18-4">)[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]]</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://vsriram24.github.io/posts/multiomics-fa/index_files/figure-html/unnamed-chunk-11-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>Here, we can see that the phenotypic and transcriptomic modalities have more variance explained by our model than the genomic or epigenomic modalities.</p>
</section>
</section>
<section id="factor-association-analysis" class="level1">
<h1>6. Factor association analysis</h1>
<p>We can now compare our generated factors to metadata from our input data to see if we capture any associations with variables related to CLL. Here, we generate correlation plots using the <code>correlate_factors_with_covariates</code> function.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">correlate_factors_with_covariates</span>(</span>
<span id="cb19-2">  MOFAobject_trained, </span>
<span id="cb19-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">covariates =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Gender"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"died"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"age"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"treatedAfter"</span>), </span>
<span id="cb19-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">plot =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"log_pval"</span></span>
<span id="cb19-5">)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://vsriram24.github.io/posts/multiomics-fa/index_files/figure-html/unnamed-chunk-12-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>It appears that most of our factors have an association with at least one of our covariates under consideration.</p>
</section>
<section id="zooming-in-on-an-individual-factor" class="level1">
<h1>7. Zooming in on an individual factor</h1>
<section id="factor-values" class="level2">
<h2 class="anchored" data-anchor-id="factor-values">7.1. Factor values</h2>
<p>We can make use of the <code>plot_factor</code> function to evaluate how the data points in our dataset are distributed with respect to a factor of choice.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot_factor</span>(</span>
<span id="cb20-2">  MOFAobject_trained,</span>
<span id="cb20-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dodge =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>,</span>
<span id="cb20-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">add_violin =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>,</span>
<span id="cb20-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">factors=</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>)</span>
<span id="cb20-6">)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://vsriram24.github.io/posts/multiomics-fa/index_files/figure-html/unnamed-chunk-13-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="factor-1s-association-with-the-genomic-data-modality" class="level2">
<h2 class="anchored" data-anchor-id="factor-1s-association-with-the-genomic-data-modality">7.2. Factor 1’s association with the genomic data modality</h2>
<p>We can use the <code>plot_weights</code> function to determine how different factors are weighted with respect to the features in our data. In the following graph, we focus on the influence of Factor 1 on features present in the genomic data modality. Features with a higher weight represent a stronger association with the factor of interest.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot_weights</span>(</span>
<span id="cb21-2">  MOFAobject_trained,</span>
<span id="cb21-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">view =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Mutations"</span>,</span>
<span id="cb21-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">factor=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb21-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nfeatures =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>,</span>
<span id="cb21-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">scale =</span> T</span>
<span id="cb21-7">)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://vsriram24.github.io/posts/multiomics-fa/index_files/figure-html/unnamed-chunk-14-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>From this graph, we can see that most features have a weight of 0 with respect to Factor 1, indicating a lack of association with the factor. However, IGHV (immunoglobulin heavy chain variable) has a weight close to 1 with respect to Factor 1. Indeed, mutations in the genetic region are a main clinical marker for CLL!</p>
<p>The <code>plot_top_weights</code> function lets us visualize this same output, sorted by absolute value of the weight:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot_top_weights</span>(</span>
<span id="cb22-2">  MOFAobject_trained,</span>
<span id="cb22-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">view =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Mutations"</span>,</span>
<span id="cb22-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nfeatures =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>,</span>
<span id="cb22-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">scale =</span> T,</span>
<span id="cb22-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">factor=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb22-7">)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://vsriram24.github.io/posts/multiomics-fa/index_files/figure-html/unnamed-chunk-15-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>Once again, we can see that the weight for IGHV with respect to Factor 1 far exceeds the weights for any other genomic features in our dataset.</p>
<p>Based on these results, we’d expect to see that samples that have a high positive value for Factor 1 will have IGHV mutations. To confirm this hypothesis, let’s plot the distribution of factor 1 values, colored by IGHV mutation status:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot_factor</span>(</span>
<span id="cb23-2">  MOFAobject_trained,</span>
<span id="cb23-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dodge =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>,</span>
<span id="cb23-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">add_violin =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>,</span>
<span id="cb23-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color_by =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"IGHV"</span>,</span>
<span id="cb23-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">factors =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb23-7">)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://vsriram24.github.io/posts/multiomics-fa/index_files/figure-html/unnamed-chunk-16-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>It does seem like our Factor 1 values correlate with presence/absence of IGHV mutation!</p>
</section>
<section id="factor-1s-association-with-the-transcriptomic-data-modality" class="level2">
<h2 class="anchored" data-anchor-id="factor-1s-association-with-the-transcriptomic-data-modality">7.3. Factor 1’s association with the transcriptomic data modality</h2>
<p>From the variance explained plot we know that Factor 1 drives variation across all four of our data modalities. Let’s visualize the mRNA expression changes that are associated with Factor 1 using the <code>plot_weights</code> function again:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot_weights</span>(</span>
<span id="cb24-2">  MOFAobject_trained,</span>
<span id="cb24-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nfeatures =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,</span>
<span id="cb24-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">view =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mRNA"</span>,</span>
<span id="cb24-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">factor =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb24-6">)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://vsriram24.github.io/posts/multiomics-fa/index_files/figure-html/unnamed-chunk-17-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>We can see from our generated plot that there are a substantial number of transcripts with weights close to -1 or 1 with respect to Factor 1. It is likely that genes with large positive mRNA expression values are more heavily expressed in samples with IGHV mutation. Let’s verify this assumption.</p>
</section>
<section id="molecular-signature-clustering-for-factor-1" class="level2">
<h2 class="anchored" data-anchor-id="molecular-signature-clustering-for-factor-1">7.4. Molecular signature clustering for factor 1</h2>
<p>Let’s use the <code>plot_data_heatmap</code> function to generate a heatmap of gene expression values against Factor 1 values. Furthermore, we color our heatmap by IGHV mutation status.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot_data_heatmap</span>(</span>
<span id="cb25-2">  MOFAobject_trained,</span>
<span id="cb25-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">scale =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"row"</span>,</span>
<span id="cb25-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cluster_cols =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>,</span>
<span id="cb25-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cluster_rows =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>,</span>
<span id="cb25-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show_colnames =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>,</span>
<span id="cb25-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">denoise =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>,</span>
<span id="cb25-8">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">features =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>,</span>
<span id="cb25-9">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">view =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mRNA"</span>,</span>
<span id="cb25-10">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">factor=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb25-11">)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://vsriram24.github.io/posts/multiomics-fa/index_files/figure-html/unnamed-chunk-18-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>From our heatmap, we can see that various transcripts correlate with high Factor 1 value, and that these samples are also positive for IGHV status - our assumption is confirmed!</p>
</section>
</section>
<section id="summary" class="level1">
<h1>8. Summary</h1>
<p>This concludes my walkthrough of applying the <code>MOFA2</code> package to perform factor analysis on multiomics data. Here, we applied factor analysis to multiomics data to integrate and analyze relevant features related to different ’omic subtypes as well as patient metadata of interest. A big thank you again to Alex Gurbych from blackthorn.ai and the authors of the <code>MOFA2</code> package. I look forward to covering more tutorials involving multiomic data analysis and precision medicine in the future.</p>
</section>
<section id="references" class="level1">
<h1>9. References</h1>
<ul>
<li><a href="https://levelup.gitconnected.com/multi-omics-analysis-3857956a7a3d">“Multi-Omics Data Factor Analysis, by Alex Gurbych”</a></li>
<li><a href="https://www.bioconductor.org/packages/release/bioc/html/MOFA2.html">Bioconductor MOFA2 documentation</a></li>
<li><a href="https://www.ncbi.nlm.nih.gov/pmc/articles/PMC6010767/">“Multi‐Omics Factor Analysis—a framework for unsupervised integration of multi‐omics data sets”, by Argelaguet et al.</a></li>
<li><a href="https://biofam.github.io/MOFA2/">MOFA Homepage</a></li>
<li><a href="https://www.biomedinfolab.com">Dokyoon Kim Lab Homepage</a></li>
</ul>


</section>

 ]]></description>
  <category>Overviews</category>
  <category>Tutorials</category>
  <guid>https://vsriram24.github.io/posts/multiomics-fa/</guid>
  <pubDate>Mon, 12 Aug 2024 07:00:00 GMT</pubDate>
  <media:content url="https://vsriram24.github.io/posts/multiomics-fa/googleLens.PNG" medium="image"/>
</item>
<item>
  <title>Obliteride 2024</title>
  <dc:creator>Vivek Sriram</dc:creator>
  <link>https://vsriram24.github.io/posts/obliteride-24/</link>
  <description><![CDATA[ 





<p>Welcome back to another week of <em>[VS]Codes</em>! I currently have some longer tutorials and overviews cooking in the background, which I will be sharing in the coming weeks. In the meantime, I’d like to use this week’s post to share some information about an upcoming fundraising event in which I will be participating.</p>
<hr>
<p>This coming weekend, I will be taking part in a 25-mile bike ride as a part of <a href="https://www.obliteride.org">Fred Hutch Obliteride</a>. Obliteride is an annual event that raises money for cancer research at Fred Hutch. Since 2013, more than 27,000 participants and volunteers, along with sponsors and over 104,000 Obliteride donors, have raised more than $48 million for breakthrough work at Fred Hutch.</p>
<p><img src="https://vsriram24.github.io/posts/obliteride-24/images/12907812_web1_M-Riders-finish.jpg" class="img-fluid"></p>
<p>Here are a few examples of work that was supported at Fred Hutch by Obliteride in just the past year:</p>
<ul>
<li><p>Research and clinical advances for a variety of cancers and disease areas, including breast, colon, head and neck, and prostate cancers.</p></li>
<li><p>Partnerships to increase health equity and reduce disparities in labs, clinics, classrooms, and more.</p></li>
<li><p>Advances in patient care, including diagnostics, surgery, and follow-up.</p></li>
</ul>
<p><strong>My participation in Obliteride 2024 is focused on amplifying the impact of data science across Fred Hutch.</strong> My team (the <a href="https://hutchdatascience.org">Fred Hutch Data Science Lab</a>) focuses on getting both data and tools into the hands of researchers at Fred Hutch through the creation of centralized data resources and advanced models and workflows for simplified data analysis, as well as the development of comprehensive training resources and communities of practice across a variety of subjects in biomedical data science.</p>
<p>This year, with the support of our donors, <strong>we aim to accelerate the next discoveries that the Fred Hutch will make via expanded data access, advanced technology, and artificial intelligence</strong>. Any donations toward my profile or that of my team’s will directly facilitate the research conducted by groups at Fred Hutch who strive to advance their work by engaging with our data science and AI services.</p>
<p>My team and I are a part of Obliteride because we want to help Fred Hutch overcome cancer once and for all. Please consider sponsoring me <a href="https://secure.fredhutch.org/site/TR/?px=2167539&amp;fr_id=2070&amp;pg=personal&amp;success=true">here</a> - every donation helps!</p>
<p>Until next week, [VS]Coders!</p>



 ]]></description>
  <category>Miscellaneous</category>
  <guid>https://vsriram24.github.io/posts/obliteride-24/</guid>
  <pubDate>Mon, 05 Aug 2024 07:00:00 GMT</pubDate>
  <media:content url="https://vsriram24.github.io/posts/obliteride-24/zolaTongue.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Introduction to PyTorch</title>
  <dc:creator>Vivek Sriram</dc:creator>
  <link>https://vsriram24.github.io/posts/pytorch-tutorial/</link>
  <description><![CDATA[ 





<p>In today’s blog post, we’ll go through the <a href="https://pytorch.org/tutorials/beginner/basics/intro.html">“Introduction to PyTorch</a>” tutorial available from the PyTorch’s online <a href="https://pytorch.org/tutorials/index.html">learning community</a>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://vsriram24.github.io/posts/pytorch-tutorial/pytorch.png" class="img-fluid figure-img"></p>
<figcaption>A screen-grab of the PyTorch introductory documentation</figcaption>
</figure>
</div>
<p>This tutorial is designed to walk through every component you would need to start developing models in PyTorch. With that, many of the elements show you how to complete certain steps in multiple ways… In this walkthrough, I will be selecting a subset of elements from these components and streamlining the steps of data processing and model training to showcase exactly how one would use these tools for an example dataset.</p>
<p>In a future blog post, I will take the foundation developed through this walkthrough and explore a modifiedd data analysis workflow, with a more complicated neural network and additional hyperparameter training for a different set of data.</p>
<p>With background out of the way, let’s get started~</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb1-1"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">```{r}</span></span>
<span id="cb1-2"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">library(reticulate)</span></span>
<span id="cb1-3"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">use_python('/opt/anaconda3/bin/python')</span></span>
<span id="cb1-4"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">```</span></span></code></pre></div>
<p>Most machine learning workflows involve uploading data, creating models, optimizing model parameters, and performing predictions on input data. This tutorial introduces you to a complete ML workflow implemented in PyTorch.</p>
<p>In PyTorch, we use tensors to encode the inputs and outputs of a model, as well as the model’s parameters. Tensors are a specialized data structure that are very similar to arrays and matrices.</p>
<div id="58dcd33a" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import required packages</span></span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb2-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb2-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span></code></pre></div>
</div>
<div id="a0abb367" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb3-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> nn</span>
<span id="cb3-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch.utils.data <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Dataset</span>
<span id="cb3-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch.utils.data <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> DataLoader</span></code></pre></div>
</div>
<div id="75f4655a" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#import torchvision</span></span>
<span id="cb4-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torchvision <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> datasets, transforms</span>
<span id="cb4-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torchvision.transforms <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ToTensor, Lambda</span>
<span id="cb4-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torchvision.io <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> read_image</span></code></pre></div>
</div>
<p>We start by checking to see if we can train our model on a hardware accelerator like the GPU or MPS if available. Otherwise, we’ll use the CPU.</p>
<div id="c306642b" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get cpu, gpu or mps device for training.</span></span>
<span id="cb5-2">device <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (</span>
<span id="cb5-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cuda"</span></span>
<span id="cb5-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> torch.cuda.is_available()</span>
<span id="cb5-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mps"</span></span>
<span id="cb5-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> torch.backends.mps.is_available()</span>
<span id="cb5-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cpu"</span></span>
<span id="cb5-8">)</span>
<span id="cb5-9"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Using </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>device<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> device"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Using mps device</code></pre>
</div>
</div>
<p>Code for processing data samples can get messy and hard to maintain. We ideally want our dataset code to be de-coupled from model training code for better readability and modularity. We will break our analysis into the following two sections: <strong>Data</strong> and <strong>Modeling</strong>.</p>
<section id="data" class="level2">
<h2 class="anchored" data-anchor-id="data">Data</h2>
<section id="importing-and-transforming-the-data" class="level3">
<h3 class="anchored" data-anchor-id="importing-and-transforming-the-data">Importing and transforming the data</h3>
<p>PyTorch offers domain-specific libraries such as <code>TorchText</code>, <code>TorchVision</code>, and <code>TorchAudio</code>. In this tutorial, we will be using a <code>TorchVision</code> dataset. The <code>torchvision.datasets</code> module contains <code>Dataset</code> objects for many real-world vision data. Here, we will use the FashionMNIST dataset. Fashion-MNIST is a dataset of images consisting of 60,000 training examples and 10,000 test examples. Each example includes a 28x28 grayscale image and an associated label from one of 10 classes.</p>
<p>Each PyTorch <code>Dataset</code> stores a set of samples and their corresponding labels. Data do not always come in the final processed form that is required for training ML algorithms. We use <em>transforms</em> to perform some manipulation of the data and make it suitable for training. Every TorchVision <code>Dataset</code> includes 2 arguments: <code>transform</code> to modify the samples and <code>target_transform</code> to modify the labels.</p>
<p>The FashionMNIST features are in PIL Image format. For training, we need the features as normalized tensors, and the labels as one-hot encoded tensors. To make this transformation, we use the <code>ToTensor()</code> function. <code>ToTensor()</code> converts a PIL image or NumPy <code>ndarray</code> into a <code>FloatTensor</code> and scales the image’s pixel intensity values in the range [0., 1.]</p>
<div id="0a1ab475" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Download training data from open datasets.</span></span>
<span id="cb7-2">training_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> datasets.FashionMNIST(</span>
<span id="cb7-3">    root<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data"</span>,</span>
<span id="cb7-4">    train<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb7-5">    download<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb7-6">    transform<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ToTensor()</span>
<span id="cb7-7">)</span>
<span id="cb7-8"></span>
<span id="cb7-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Download test data from open datasets.</span></span>
<span id="cb7-10">test_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> datasets.FashionMNIST(</span>
<span id="cb7-11">    root<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data"</span>,</span>
<span id="cb7-12">    train<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>,</span>
<span id="cb7-13">    download<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb7-14">    transform<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ToTensor()</span>
<span id="cb7-15">)</span></code></pre></div>
</div>
<p>We now have our data uploaded! We can index an input <code>Dataset</code> manually (i.e.&nbsp;<code>training_data[index]</code>) to get individual samples. Here, we use <code>matplotlib</code> to visualize some samples in our training data.</p>
<div id="0ea7bd1a" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">labels_map <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb8-2">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"T-Shirt"</span>,</span>
<span id="cb8-3">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Trouser"</span>,</span>
<span id="cb8-4">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Pullover"</span>,</span>
<span id="cb8-5">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Dress"</span>,</span>
<span id="cb8-6">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Coat"</span>,</span>
<span id="cb8-7">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Sandal"</span>,</span>
<span id="cb8-8">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Shirt"</span>,</span>
<span id="cb8-9">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Sneaker"</span>,</span>
<span id="cb8-10">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Bag"</span>,</span>
<span id="cb8-11">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Ankle Boot"</span>,</span>
<span id="cb8-12">}</span>
<span id="cb8-13"></span>
<span id="cb8-14">figure <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>))</span>
<span id="cb8-15">cols, rows <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb8-16"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, cols <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> rows <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb8-17">    sample_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randint(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(training_data), size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,)).item()</span>
<span id="cb8-18">    img, label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> training_data[sample_idx]</span>
<span id="cb8-19">    figure.add_subplot(rows, cols, i)</span>
<span id="cb8-20">    plt.title(labels_map[label])</span>
<span id="cb8-21">    plt.axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"off"</span>)</span>
<span id="cb8-22">    plt.imshow(img.squeeze(), cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gray"</span>)</span>
<span id="cb8-23">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://vsriram24.github.io/posts/pytorch-tutorial/index_files/figure-html/cell-7-output-1.png" width="613" height="631" class="figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="preparing-data-for-training-with-dataloaders" class="level3">
<h3 class="anchored" data-anchor-id="preparing-data-for-training-with-dataloaders">Preparing data for training with <code>DataLoaders</code></h3>
<p>While training a model, we typically want to pass samples in “minibatches”, reshuffle the data at every epoch to reduce model overfitting, and use Pythonic multiprocessing to speed up data retrieval. <code>DataLoader</code> is an iterable that abstracts this complexity for us in an easy API. We pass our input <code>Dataset</code> as an argument to <code>DataLoader</code>. This wraps an iterable over our dataset, supporting automatic batching, sampling, shuffling, and multiprocess data loading in the process.</p>
<p>Here we define a batch size of 64 - each element in the <code>DataLoader</code> iterable will return a batch of 64 features and labels.</p>
<div id="4d5c6ec1" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">batch_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span></span>
<span id="cb9-2"></span>
<span id="cb9-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create data loaders.</span></span>
<span id="cb9-4">train_dataloader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataLoader(training_data, batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>batch_size, shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb9-5">test_dataloader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataLoader(test_data, batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>batch_size, shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb9-6"></span>
<span id="cb9-7"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> X, y <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> test_dataloader:</span>
<span id="cb9-8">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Shape of X [N, C, H, W]: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>X<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb9-9">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Shape of y: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>y<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>y<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>dtype<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb9-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">break</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Shape of X [N, C, H, W]: torch.Size([64, 1, 28, 28])
Shape of y: torch.Size([64]) torch.int64</code></pre>
</div>
</div>
</section>
<section id="iterating-over-the-dataloader" class="level3">
<h3 class="anchored" data-anchor-id="iterating-over-the-dataloader">Iterating over the <code>DataLoader</code></h3>
<p>Now that we have loaded our data into a <code>DataLoader</code>, we can iterate through the dataset as needed (using <code>next(iter(DataLoader)</code>). Each iteration returns a batch of <code>train_features</code> and <code>train_labels</code> (containing <code>batch_size=64</code> features and labels respectively). Because we specified <code>shuffle=True</code>, the data are shuffled after we iterate over all of our batches.</p>
<div id="787bbacb" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display image and label.</span></span>
<span id="cb11-2">train_features, train_labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">iter</span>(train_dataloader))</span>
<span id="cb11-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Feature batch shape: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>train_features<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>size()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb11-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Labels batch shape: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>train_labels<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>size()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb11-5">img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_features[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].squeeze()</span>
<span id="cb11-6">label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_labels[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb11-7">plt.imshow(img, cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gray"</span>)</span>
<span id="cb11-8">plt.show()</span>
<span id="cb11-9"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Label: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>label<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Feature batch shape: torch.Size([64, 1, 28, 28])
Labels batch shape: torch.Size([64])
Label: 5</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://vsriram24.github.io/posts/pytorch-tutorial/index_files/figure-html/cell-9-output-2.png" width="415" height="411" class="figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
</section>
<section id="modeling" class="level2">
<h2 class="anchored" data-anchor-id="modeling">Modeling</h2>
<section id="defining-a-neural-network" class="level3">
<h3 class="anchored" data-anchor-id="defining-a-neural-network">Defining a neural network</h3>
<p>Neural networks comprise of layers/modules that perform operations on data. The <code>torch.nn</code> namespace provides all the building blocks you need to build your own neural network. Every module in PyTorch subclasses the <code>nn.Module</code>. A neural network is a module itself that consists of other modules (layers). This nested structure allows for building and managing complex architectures easily.</p>
<p>To define a neural network in PyTorch, we create a class that inherits from <code>nn.Module</code>. We define the layers of the network in the <code>__init__</code> function and specify how data will pass through the network in the <code>forward</code> function.</p>
<div id="10b85434" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define model</span></span>
<span id="cb13-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> NeuralNetwork(nn.Module):</span>
<span id="cb13-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb13-4">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb13-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.flatten <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Flatten()</span>
<span id="cb13-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.linear_relu_stack <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Sequential(</span>
<span id="cb13-7">            nn.Linear(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>),</span>
<span id="cb13-8">            nn.ReLU(),</span>
<span id="cb13-9">            nn.Linear(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>),</span>
<span id="cb13-10">            nn.ReLU(),</span>
<span id="cb13-11">            nn.Linear(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb13-12">        )</span>
<span id="cb13-13"></span>
<span id="cb13-14">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x):</span>
<span id="cb13-15">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.flatten(x)</span>
<span id="cb13-16">        logits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.linear_relu_stack(x)</span>
<span id="cb13-17">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> logits</span></code></pre></div>
</div>
<p>Now that we’ve defined the structure of our <code>NeuralNetwork</code>, we can create an instance of it and move it to a faster device (GPU or MPS) if available to accelerate operations. We can also print its structure to see the layers that we’ve just defined.</p>
<div id="a04a753a" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> NeuralNetwork().to(device)</span>
<span id="cb14-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Model structure: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>model<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Model structure: NeuralNetwork(
  (flatten): Flatten(start_dim=1, end_dim=-1)
  (linear_relu_stack): Sequential(
    (0): Linear(in_features=784, out_features=512, bias=True)
    (1): ReLU()
    (2): Linear(in_features=512, out_features=512, bias=True)
    (3): ReLU()
    (4): Linear(in_features=512, out_features=10, bias=True)
  )
)</code></pre>
</div>
</div>
<p>Many layers inside a neural network are parameterized, meaning that they have associated weights and biases that are optimized during training. Subclassing <code>nn.Module</code> automatically tracks all fields defined inside your model object, and makes all parameters accessible using your model’s <code>parameters()</code> or <code>named_parameters()</code> methods.</p>
<p>The linear layer is a module that applies a linear transformation on the input using its stored weights and biases. Non-linear activations are what create the complex mappings between the model’s inputs and outputs. They are applied after linear transformations to introduce nonlinearity, helping neural networks learn a wide variety of phenomena.</p>
<p>In this model, we use <code>nn.ReLU</code> between our linear layers, but there are other options for activations to introduce non-linearity in your model.</p>
<div id="f0865109" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> name, param <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> model.named_parameters():</span>
<span id="cb16-2">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Layer: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> | Size: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>param<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>size()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> | Values : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>param[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Layer: linear_relu_stack.0.weight | Size: torch.Size([512, 784]) | Values : tensor([[ 0.0069, -0.0090, -0.0053,  ...,  0.0014, -0.0055, -0.0313],
        [-0.0027, -0.0257, -0.0303,  ..., -0.0329,  0.0320, -0.0336]],
       device='mps:0', grad_fn=&lt;SliceBackward0&gt;) 

Layer: linear_relu_stack.0.bias | Size: torch.Size([512]) | Values : tensor([ 0.0255, -0.0069], device='mps:0', grad_fn=&lt;SliceBackward0&gt;) 

Layer: linear_relu_stack.2.weight | Size: torch.Size([512, 512]) | Values : tensor([[ 0.0210, -0.0186,  0.0411,  ...,  0.0346,  0.0432, -0.0231],
        [-0.0199,  0.0335, -0.0396,  ..., -0.0416,  0.0382,  0.0423]],
       device='mps:0', grad_fn=&lt;SliceBackward0&gt;) 

Layer: linear_relu_stack.2.bias | Size: torch.Size([512]) | Values : tensor([ 0.0328, -0.0148], device='mps:0', grad_fn=&lt;SliceBackward0&gt;) 

Layer: linear_relu_stack.4.weight | Size: torch.Size([10, 512]) | Values : tensor([[ 0.0231, -0.0346, -0.0262,  ..., -0.0030, -0.0107,  0.0297],
        [ 0.0025, -0.0110, -0.0214,  ...,  0.0298, -0.0307,  0.0295]],
       device='mps:0', grad_fn=&lt;SliceBackward0&gt;) 

Layer: linear_relu_stack.4.bias | Size: torch.Size([10]) | Values : tensor([-0.0358,  0.0367], device='mps:0', grad_fn=&lt;SliceBackward0&gt;) 
</code></pre>
</div>
</div>
</section>
<section id="optimizing-the-model-parameters" class="level3">
<h3 class="anchored" data-anchor-id="optimizing-the-model-parameters">Optimizing the Model Parameters</h3>
<p>Now that we have our data and our model, it’s time to train, validate and test our model by optimizing its parameters on the input data! Training a model is an iterative process; in each iteration the model makes a guess about the output, calculates the error in its guess (loss), collects the derivatives of the error with respect to its parameters, and optimizes these parameters using gradient descent.</p>
<section id="hyperparameters" class="level4">
<h4 class="anchored" data-anchor-id="hyperparameters">Hyperparameters</h4>
<p>Hyperparameters are adjustable parameters that let you control the model optimization process. Different hyperparameter values can impact model training and convergence rates.</p>
<p>We define the following hyperparameters for training: - Number of Epochs - the number times to iterate over the dataset - Batch Size - the number of data samples propagated through the network before the parameters are updated - Learning Rate - how much to update models parameters at each batch/epoch. Smaller values yield slow learning speed, while large values may result in unpredictable behavior during training.</p>
<div id="4762a8a7" class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">learning_rate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-3</span></span>
<span id="cb18-2">batch_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span></span>
<span id="cb18-3">epochs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span></code></pre></div>
</div>
</section>
<section id="optimization-loop" class="level4">
<h4 class="anchored" data-anchor-id="optimization-loop">Optimization Loop</h4>
<p>To train our model, we need a loss function as well as an optimizer.</p>
<p>Once we set our hyperparameters, we can then train and optimize our model with an optimization loop. Each iteration of the optimization loop is called an epoch.</p>
<p>Each epoch consists of two main parts: - The Train Loop - iterate over the training dataset and try to converge to optimal parameters. - The Validation/Test Loop - iterate over the test dataset to check if model performance is improving.</p>
<p>The loss function measures the degree of dissimilarity between an obtained result and the target value, and it is the loss function that we want to minimize during training. To calculate the loss we make a prediction using the inputs of our given data sample and compare it against the true data label value.</p>
<p>Common loss functions include <code>nn.MSELoss</code> (Mean Square Error) for regression tasks, and <code>nn.NLLLoss</code> (Negative Log Likelihood) for classification. <code>nn.CrossEntropyLoss</code> combines <code>nn.LogSoftmax</code> and <code>nn.NLLLoss</code>.</p>
<p>We pass our model’s output logits to <code>nn.CrossEntropyLoss</code>, which will normalize the logits and compute the prediction error.</p>
<div id="e0f2514b" class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize the loss function</span></span>
<span id="cb19-2">loss_fn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.CrossEntropyLoss()</span></code></pre></div>
</div>
<p>Optimization is the process of adjusting model parameters to reduce model error in each training step. Optimization algorithms define how this process is performed (in this example we use Stochastic Gradient Descent). All optimization logic is encapsulated in the optimizer object. Here, we use the SGD optimizer; additionally, there are many different optimizers available in PyTorch such as ADAM and RMSProp, that work better for different kinds of models and data.</p>
<p>We initialize the optimizer by registering the model’s parameters that need to be trained, and passing in the learning rate hyperparameter.</p>
<div id="0c4c879d" class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">optimizer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.optim.SGD(model.parameters(), lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>learning_rate)</span></code></pre></div>
</div>
<p>Inside the training loop, optimization happens in three steps: - Call <code>optimizer.zero_grad()</code> to reset the gradients of model parameters. Gradients by default add up; to prevent double-counting, we explicitly zero them at each iteration. - Backpropagate the prediction loss with a call to <code>loss.backward()</code>. PyTorch deposits the gradients of the loss w.r.t. each parameter. - Once we have our gradients, we call <code>optimizer.step()</code> to adjust the parameters by the gradients collected in the backward pass.</p>
</section>
<section id="full-implementation" class="level4">
<h4 class="anchored" data-anchor-id="full-implementation">Full Implementation</h4>
<p>We define <code>train_loop</code> that loops over our optimization code, and <code>test_loop</code> that evaluates the model’s performance against our test data.</p>
<div id="5e10e012" class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> train_loop(dataloader, model, loss_fn, optimizer):</span>
<span id="cb21-2">    size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(dataloader.dataset)</span>
<span id="cb21-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the model to training mode - important for batch normalization and dropout layers</span></span>
<span id="cb21-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Unnecessary in this situation but added for best practices</span></span>
<span id="cb21-5">    model.train()</span>
<span id="cb21-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> batch, (X, y) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(dataloader):</span>
<span id="cb21-7">        X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X.to(device)</span>
<span id="cb21-8">        y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y.to(device)</span>
<span id="cb21-9">        </span>
<span id="cb21-10">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute prediction and loss</span></span>
<span id="cb21-11">        pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(X)</span>
<span id="cb21-12">        loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> loss_fn(pred, y)</span>
<span id="cb21-13"></span>
<span id="cb21-14">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Backpropagation</span></span>
<span id="cb21-15">        loss.backward()</span>
<span id="cb21-16">        optimizer.step()</span>
<span id="cb21-17">        optimizer.zero_grad()</span>
<span id="cb21-18"></span>
<span id="cb21-19">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> batch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb21-20">            loss, current <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> loss.item(), batch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> batch_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(X)</span>
<span id="cb21-21">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"loss: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>loss<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:&gt;7f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">  [</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>current<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:&gt;5d}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>size<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:&gt;5d}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">]"</span>)</span>
<span id="cb21-22"></span>
<span id="cb21-23"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> test_loop(dataloader, model, loss_fn):</span>
<span id="cb21-24">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the model to evaluation mode - important for batch normalization and dropout layers</span></span>
<span id="cb21-25">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Unnecessary in this situation but added for best practices</span></span>
<span id="cb21-26">    model.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">eval</span>()</span>
<span id="cb21-27">    size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(dataloader.dataset)</span>
<span id="cb21-28">    num_batches <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(dataloader)</span>
<span id="cb21-29">    test_loss, correct <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb21-30"></span>
<span id="cb21-31">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Evaluating the model with torch.no_grad() ensures that no gradients are computed during test mode</span></span>
<span id="cb21-32">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># also serves to reduce unnecessary gradient computations and memory usage for tensors with requires_grad=True</span></span>
<span id="cb21-33">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> torch.no_grad():</span>
<span id="cb21-34">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> X, y <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> dataloader:</span>
<span id="cb21-35">            X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X.to(device)</span>
<span id="cb21-36">            y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y.to(device)</span>
<span id="cb21-37">        </span>
<span id="cb21-38">            pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(X)</span>
<span id="cb21-39">            test_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> loss_fn(pred, y).item()</span>
<span id="cb21-40">            correct <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> (pred.argmax(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> y).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>(torch.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>().item()</span>
<span id="cb21-41"></span>
<span id="cb21-42">    test_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/=</span> num_batches</span>
<span id="cb21-43">    correct <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/=</span> size</span>
<span id="cb21-44">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Test Error: </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> Accuracy: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>correct)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:&gt;0.1f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">%, Avg loss: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>test_loss<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:&gt;8f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
</div>
<p>In a single training loop, the model makes predictions on the training dataset (fed to it in batches), and then backpropagates the prediction error to adjust the model’s parameters.</p>
<p>We can also check the model’s performance against the test dataset to ensure it is learning.</p>
<p>The training process is conducted over several iterations (epochs). During each epoch, the model learns parameters to make better predictions. We print the model’s accuracy and loss at each epoch; we’d like to see the accuracy increase and the loss decrease with every epoch.</p>
<div id="ccaff7e7" class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> t <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(epochs):</span>
<span id="cb22-2">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Epoch </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">-------------------------------"</span>)</span>
<span id="cb22-3">    train_loop(train_dataloader, model, loss_fn, optimizer)</span>
<span id="cb22-4">    test_loop(test_dataloader, model, loss_fn)</span>
<span id="cb22-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Done!"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch 1
-------------------------------
loss: 2.296714  [   64/60000]
loss: 2.285919  [ 6464/60000]
loss: 2.289640  [12864/60000]
loss: 2.269527  [19264/60000]
loss: 2.238294  [25664/60000]
loss: 2.245018  [32064/60000]
loss: 2.233091  [38464/60000]
loss: 2.209641  [44864/60000]
loss: 2.167873  [51264/60000]
loss: 2.210138  [57664/60000]
Test Error: 
 Accuracy: 45.4%, Avg loss: 2.163287 

Epoch 2
-------------------------------
loss: 2.148807  [   64/60000]
loss: 2.146786  [ 6464/60000]
loss: 2.100028  [12864/60000]
loss: 2.086866  [19264/60000]
loss: 2.088841  [25664/60000]
loss: 2.022998  [32064/60000]
loss: 2.008321  [38464/60000]
loss: 1.980193  [44864/60000]
loss: 1.942847  [51264/60000]
loss: 1.935418  [57664/60000]
Test Error: 
 Accuracy: 47.7%, Avg loss: 1.898360 

Epoch 3
-------------------------------
loss: 1.934336  [   64/60000]
loss: 1.874416  [ 6464/60000]
loss: 1.709932  [12864/60000]
loss: 1.756551  [19264/60000]
loss: 1.738622  [25664/60000]
loss: 1.706300  [32064/60000]
loss: 1.609682  [38464/60000]
loss: 1.628336  [44864/60000]
loss: 1.539030  [51264/60000]
loss: 1.561772  [57664/60000]
Test Error: 
 Accuracy: 59.2%, Avg loss: 1.528465 

Epoch 4
-------------------------------
loss: 1.439419  [   64/60000]
loss: 1.322930  [ 6464/60000]
loss: 1.461314  [12864/60000]
loss: 1.465872  [19264/60000]
loss: 1.336003  [25664/60000]
loss: 1.346315  [32064/60000]
loss: 1.377878  [38464/60000]
loss: 1.287794  [44864/60000]
loss: 1.289096  [51264/60000]
loss: 1.287725  [57664/60000]
Test Error: 
 Accuracy: 62.3%, Avg loss: 1.254067 

Epoch 5
-------------------------------
loss: 1.233157  [   64/60000]
loss: 1.233771  [ 6464/60000]
loss: 1.178213  [12864/60000]
loss: 1.106026  [19264/60000]
loss: 1.188458  [25664/60000]
loss: 1.199469  [32064/60000]
loss: 1.154457  [38464/60000]
loss: 1.008805  [44864/60000]
loss: 1.108838  [51264/60000]
loss: 1.131137  [57664/60000]
Test Error: 
 Accuracy: 64.1%, Avg loss: 1.088662 

Done!</code></pre>
</div>
</div>
<p>We can now use this model to make individual predictions.</p>
<p>To use the model, we pass it the input data. This executes the model’s <code>forward</code>, along with some background operations. Note that we do not call <code>model.forward()</code> directly!</p>
<div id="32e55b06" class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">classes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb24-2">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"T-shirt/top"</span>,</span>
<span id="cb24-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Trouser"</span>,</span>
<span id="cb24-4">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Pullover"</span>,</span>
<span id="cb24-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Dress"</span>,</span>
<span id="cb24-6">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Coat"</span>,</span>
<span id="cb24-7">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Sandal"</span>,</span>
<span id="cb24-8">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Shirt"</span>,</span>
<span id="cb24-9">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Sneaker"</span>,</span>
<span id="cb24-10">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Bag"</span>,</span>
<span id="cb24-11">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Ankle boot"</span>,</span>
<span id="cb24-12">]</span>
<span id="cb24-13"></span>
<span id="cb24-14">model.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">eval</span>()</span>
<span id="cb24-15">x, y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> test_data[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], test_data[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb24-16"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> torch.no_grad():</span>
<span id="cb24-17">    x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x.to(device)</span>
<span id="cb24-18">    pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(x)</span>
<span id="cb24-19">    predicted, actual <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> classes[pred[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].argmax(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)], classes[y]</span>
<span id="cb24-20">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Predicted: "</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>predicted<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">", Actual: "</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>actual<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Predicted: "Ankle boot", Actual: "Ankle boot"</code></pre>
</div>
</div>
</section>
</section>
</section>
<section id="summary" class="level1">
<h1>Summary</h1>
<p>This concludes my walkthrough of using basic PyTorch to process data and train a neural network. As mentioned, in a future post in the coming weeks, I will iterate on this pipeline, demonstrating a different neural network architecture and more data exploration for a different dataset. Until next time, [VS]Coders!</p>


</section>

 ]]></description>
  <category>Tutorials</category>
  <guid>https://vsriram24.github.io/posts/pytorch-tutorial/</guid>
  <pubDate>Mon, 29 Jul 2024 07:00:00 GMT</pubDate>
  <media:content url="https://vsriram24.github.io/posts/pytorch-tutorial/zolaCake.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Cascadia R Conference 2024</title>
  <dc:creator>Vivek Sriram</dc:creator>
  <link>https://vsriram24.github.io/posts/cascadia-conf-24/</link>
  <description><![CDATA[ 





<p>Welcome back to another week of <em>[VS]Codes</em>! A few weeks ago, I had the opportunity to attend <a href="https://cascadiarconf.com">Cascadia R Conference 2024</a>, a local R conference for the data science community of the Pacific Northwest. It was a great experience getting to see so many different applications of data science across a variety of industries, and I very much enjoyed the experience of connecting with other data scientists from the surrounding PNW area. This blog post will summarize content from some of the talks that I attended that day as well as my personal overall takeaways from the conference.</p>
<p><img src="https://vsriram24.github.io/posts/cascadia-conf-24/cascadia.jpg" class="img-fluid"></p>
<hr>
<section id="keynote-why-is-everybody-talking-about-generative-ai-by-deepsha-menghani-from-microsoft" class="level3">
<h3 class="anchored" data-anchor-id="keynote-why-is-everybody-talking-about-generative-ai-by-deepsha-menghani-from-microsoft">Keynote: “Why is everybody talking about Generative AI?,” by <a href="https://deepshamenghani.quarto.pub/dmenghani/">Deepsha Menghani</a> from Microsoft</h3>
<p>Generative Artificial Intelligence (GenAI) is a type of artificial intelligence that can create new content based on the patterns it has learned from existing day. GenAI can be trained through human intervention - a human can reinforce what behavior is correct and what isn’t. GenAI can be very powerful when you make it work <em>for you</em>.</p>
<p>We can break GenAI use cases into three different scenarios:</p>
<ol type="1">
<li>Direct</li>
<li>Customized</li>
<li>Commercial</li>
</ol>
<p>In a direct scenario, a prompt leads directly to a response.</p>
<p>In a customized scenario, a prompt will lead to data, which will then lead to a response.</p>
<p>Lastly, in a commercial scenario, a prompt will lead to decision making, leading to data, then to actions, then to an outcome, then to feedback, and back to decision making. This will be an iterative process.</p>
<p>With this framework of GenAI scenarios, we can see how GenAI might operate across different fields.</p>
<table class="caption-top table">
<caption>GenAI scenarios for different fields</caption>
<colgroup>
<col style="width: 3%">
<col style="width: 25%">
<col style="width: 25%">
<col style="width: 46%">
</colgroup>
<thead>
<tr class="header">
<th>Field</th>
<th>Direct</th>
<th>Customized</th>
<th>Commercial</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Finance</td>
<td>Financial literacy</td>
<td>Budget and tax optimization</td>
<td>Fraud detection</td>
</tr>
<tr class="even">
<td>Healthcare</td>
<td>Developing a general health routine</td>
<td>Personalized fitness / health data summaries</td>
<td>Medical image processing</td>
</tr>
<tr class="odd">
<td>Education</td>
<td>General conceptual explanations</td>
<td>Personalized study plans</td>
<td>Reasoning and content generation (e.g.&nbsp;Khanmigo bot - a safe space to converse while learning)</td>
</tr>
<tr class="even">
<td>You!</td>
<td>Code assistance / copilot (e.g.&nbsp;turning comments into code or synthetic data generation)</td>
<td>README / documentation generation. Return a consistent README / documentation structure</td>
<td>Shiny application support bot. Feed documentation into a bot that sits at the bottom of your web app. This bot can help users when they want to use your dashboard.</td>
</tr>
</tbody>
</table>
<p>GenAI has many pros and cons to consider:</p>
<table class="caption-top table">
<caption>“The Good, The Bad, and The Ugly” of GenAI</caption>
<colgroup>
<col style="width: 34%">
<col style="width: 35%">
<col style="width: 30%">
</colgroup>
<thead>
<tr class="header">
<th>The Good</th>
<th>The Bad</th>
<th>The Ugly</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Knowledge accessibility</td>
<td>Garbage in = garbage out</td>
<td>Bias</td>
</tr>
<tr class="even">
<td>Personalization</td>
<td>Data Privacy</td>
<td>Resource Intensive</td>
</tr>
<tr class="odd">
<td>Creativity</td>
<td>Dependencies</td>
<td>Cost</td>
</tr>
<tr class="even">
<td>Efficiency</td>
<td>Hallucinations</td>
<td>Ethics</td>
</tr>
<tr class="odd">
<td></td>
<td>Misinformation</td>
<td>Evolving Regulations</td>
</tr>
</tbody>
</table>
<p>GenAI can be incredibly useful in commercial settings if you train it on an application that you’ve developed so that it can help users navigate the application. However, this means it’s more important than ever before to have good, comprehensive documentation, because this will be the training data for your GenAI model!</p>
<p>A caveat to using GenAI - when you have a hammer, everything looks like a nail! Don’t fall into the trap of thinking that GenAI is the only tool you can use… remember to think about the impact that you want!</p>
<p><em>Questions:</em></p>
<ul>
<li><p>How do you pick the right LLM for your purposes?</p>
<ul>
<li>Go with accessibility, cost, data privacy</li>
</ul></li>
<li><p>How do you evaluate the output of an LLM?</p>
<ul>
<li>Evaluation is such an evolving field. Different models can check for different things (e.g.&nbsp;no swear words). Human evaluation also</li>
</ul></li>
<li><p>What is the impact on jobs of data scientists?</p>
<ul>
<li>People who use AI to advance their work will do better. There will be an up-leveling from nitty-gritty work to strategic oversight. Some jobs will become more impactful through the introduction of AI. Other jobs may not find AI to be useful. Employers should train their employees in terms of how they can best apply AI in their jobs.</li>
</ul></li>
</ul>
</section>
<section id="r-workflows-in-azure-machine-learning-for-athletic-data-analysis-by-emily-kraschel-from-the-university-of-oregon" class="level3">
<h3 class="anchored" data-anchor-id="r-workflows-in-azure-machine-learning-for-athletic-data-analysis-by-emily-kraschel-from-the-university-of-oregon">“R Workflows in Azure Machine Learning for Athletic Data Analysis,” by <a href="https://github.com/ekrasch">Emily Kraschel</a> from the University of Oregon</h3>
<p>When working with data related to sports, you need to work fast. Data collection is live, and will need to be evaluated over a variety of timescales, from daily to weekly to even longer. Sports analytics work requires efficient storage, as well as a combination of basic analysis and reporting as well as more complicated decision making.</p>
<p>This fast space of sports analytics stands in high contrast to the slow work of data science, which generally involves extensive data cleaning, the development of in-depth reports and aggregation, and advanced data analysis.</p>
<p>The conflicting needs of data science and sports analytics are thus as follows: - data are changing constantly. There are many new versions of the data and many additions to existing data - data science in general comes with numerous bottlenecks and stopping points - sports data is inherently observational, resulting in an inability to perform controlled experimentation</p>
<p>The old framework implemented by the team at the University of Oregon focused on automated reports generated from a data analysis dashboard. This process was good for a fast pace of work, but hindered slower, more complicated analysis. It was challenging to take a step back and decide on new metrics that could be incorporated into the dashboard. There was no central source for raw data, resulting in a variety of athlete IDs coming from different instrument interfaces. Furthermore, with the lack of centrality in the infrastructure of the system, data would exist in different versions, different places, and different file formats. The team was left with a clunky system if they tried to pull data out of the dashboard to perform further, more in-depth analysis.</p>
<p>Thus, the goals of the new framework were as follows: - improve competition outcomes through the generation of more complete, valid, actionable data - lower the barriers to more complex data science and analytics - aggregate the data in a centralized location and unify athlete IDs across instrumentation sources - enhance compute power and the ability to collaborate - reduce bottlenecks in data analysis (e.g.&nbsp;duplication, updates, incomplete data, etc.)</p>
<p>With these goals in mind, the team decided to migrate their data infrastructure to the cloud with Azure ML. Services that they have begun to take advantage of include: - analysis in Jupyter notebooks - configurable compute - services for pipeline development and implementation - improved data storage and loading - enhanced data security</p>
<p>The team still has an automated dashboard for day-to-day analysis. However, the new platform improves their ability to perform slow work, letting them step back from the constant stream of data. Now they can pull data easily across all instrument APIs into a centralized storage point. They are able to merge data more easily, maintain the most recent version of a given dataset, and perform compute more quickly.</p>
<p>With this new cloud-based infrastructure, the team is able to perform a variety of more complicated analysis in R, including developing prediction models for hamstring injuries through the application of discrete time survival models, or evaluating differences in jump height by rate of force development across genders.</p>
</section>
<section id="fair-machine-learning-by-simon-couch-from-posit-pbc" class="level3">
<h3 class="anchored" data-anchor-id="fair-machine-learning-by-simon-couch-from-posit-pbc">“<a href="https://github.com/simonpcouch/cascadia-24">Fair Machine Learning</a>,” by <a href="https://www.simonpcouch.com">Simon Couch</a> from Posit PBC</h3>
<p>What does it mean for a model to be good vs.&nbsp;a model to be fair? A good model will produce a high value of sensitivity, specificity, or accuracy, all depending on the metric that you choose. Fairness, on the other hand, is not just about statistical behavior. Fairness is about our beliefs. We can think of fairness as the translation of values into mathematical measures.</p>
<p>In general, definitions of fairness are not mathematically or morally compatible (see <a href="https://www.annualreviews.org/content/journals/10.1146/annurev-statistics-042720-125902">Mitchel et al.&nbsp;2021</a>). Metrics such as <em>R<sup>2</sup></em> and <em>AUC</em> are useful for evaluating a model, but at the end of the day, a model is just a single part of a larger system. It is important to think about how model predictions will be used at the end of the day.</p>
<p>The hard part of this process is articulating what fairness means to you (or your stakeholders) in the context of a problem. Then, you need to choose a mathematical measure of fairness that speaks to that meaning - this should situate the resulting measure in the context of the entire system.</p>
<p>Choose tools that help you think about the hard parts of fair ML. The {tidymodels} set of packages, including {rsample}, {recipes}, {parsnip}, {tune}, and {yardstick}, are a great set of software options to support fair machine learning. You can refer to the textbook <a href="tmwr.org">Tidy Modeling with R</a> or <a href="tidymodels.org">tidymodels.org</a> for more information on how to use these tools.</p>
<p><em>Questions:</em></p>
<ul>
<li><p>What is a structured way to get stakeholders involved?</p>
<ul>
<li>Model cards are a great option. These are just a couple of paragraphs that provide context for how the data were initially generated and various techniques used to model the data. Model cards can be generated using the {vetiver} package.</li>
</ul></li>
</ul>
</section>
<section id="how-to-make-a-thousand-plots-look-good-data-viz-tips-for-parameterized-reporting-by-david-keyes-from-r-for-the-rest-of-us" class="level3">
<h3 class="anchored" data-anchor-id="how-to-make-a-thousand-plots-look-good-data-viz-tips-for-parameterized-reporting-by-david-keyes-from-r-for-the-rest-of-us">“<a href="https://cascadia2024.rfortherestofus.com/#/title-slide">How to make a Thousand Plots Look Good: Data Viz Tips for Parameterized Reporting</a>,” by <a href="https://rfortherestofus.com/about">David Keyes</a> from R for the Rest of Us</h3>
<p>Parameterized reporting refers to process of creating a single document in markdown/Quarto and using it to make multiple reports at once. For instance, one can work with a single report for the visualization of housing and demographics data, and then expand this report to view data for a variety of towns, counties, and countries.</p>
<p>How can we think about intuitive data visualization in the context of parameterized reporting? Here are some rules to consider:</p>
<ol type="1">
<li><p>There is no magic package</p></li>
<li><p>Consider the outer limits of your data</p></li>
</ol>
<ul>
<li>e.g.&nbsp;scale of income</li>
</ul>
<ol start="3" type="1">
<li><p>Minimize text and position it carefully</p></li>
<li><p>Don’t label everything</p></li>
</ol>
<ul>
<li>{ggrepel}: repel overlapping labels in ggplot</li>
<li>{shadowtext}: add background color to text</li>
</ul>
<ol start="5" type="1">
<li><p>Hide small values</p></li>
<li><p>Don’t put text where it could be obscured</p></li>
</ol>
<ul>
<li>Add text elements as multiple layers. Make sure to include a separate element for text position</li>
</ul>
<ol start="7" type="1">
<li>Highlight items strategically</li>
</ol>
<ul>
<li>Make use of color, size, shadow, outline, and opacity</li>
<li>Consider the R package {ggfx}</li>
</ul>
<p>Here’s the ultimate takeaway: there are a countless number of R packages that can help you achieve your goals in modularizing your applications, but at the end of the day, you are the one who has to do the thinking!</p>
</section>
<section id="cartographic-tricks-and-techniques-in-r-by-justin-sherrill-from-econorthwest" class="level3">
<h3 class="anchored" data-anchor-id="cartographic-tricks-and-techniques-in-r-by-justin-sherrill-from-econorthwest">“Cartographic Tricks and Techniques in R,” by <a href="https://econw.com/staff/justin-sherrill/">Justin Sherrill</a> from ECONorthwest</h3>
<p>Cartography refers to the generation of maps for geographic locations. However, in a more figurative sense, cartography is an exercise in story-telling. Through the information that you convey in your cartographic visualizations, you are choosing the story that you tell. Writing a good story is about making decisions - you need to make the right sacrifices in the information that you choose to exclude.</p>
<p>What are the key principles of “good” cartography? 1. Visual hierarchy (the arrangement of elements that guide the viewer’s eye through the content in the right order) 2. Legibility 3. Figure-ground (the ability to differentiate between an object and its background) 4. Balance</p>
<p><a href="https://en.wikipedia.org/wiki/Jacques_Bertin">Jacques Bertin</a> and <a href="https://en.wikipedia.org/wiki/William_Bunge">William Bunge</a> were two renowned geographers from the 20th century who consistently followed the principles of good cartography. You can refer to a lot of their work to get inspiration for developing cartographic visualizations. <a href="https://timogrossenbacher.ch">Timo Grossenbacher</a> is a modern-day geographer and data scientist who has used R to develop some beautiful cartographic illustrations. <a href="https://timogrossenbacher.ch/bivariate-maps-with-ggplot2-and-sf/">Here</a> is a great example of a bivariate thematic map he generated of Switzerland’s regional income inequality.</p>
<p>As Timo demonstrates, you can do pretty much all of the data visualization you want to do with {ggplot2}. {ggplot2} is one of the strongest data visualization tools in existence.</p>
<p>Here is a set of great packages to apply for geospatial data visualization in R and {ggplot2}:</p>
<p>1. {ggspatial}: includes the north arrow / scale bar</p>
<p>2. {mapboxapi}: can show roads, bodies of water, and more.</p>
<p>3. {patchwork}: can do map insets to show larger context of your zoomed in map - can also use {ggmagnify}</p>
<p>4. {ggrepel}: label placement to avoid overlapping labels</p>
<p>5. {st_inscribed_circle}: label an unusually shaped polygon</p>
<p>6. {ggforce}: label a subset of points in a nice style</p>
<p>7. {ggfx}: fun effects for {ggplot2}</p>
<p>8. {ggdensity}: show density patterns</p>
<p>9. {rmapshaper}: simplify geometries of shapes</p>
<p>10. {smoothr}: round the corners for shapes</p>
<p>11. {ggarrow}: make pretty arrows</p>
<p>12. {ggstar}: pch symbols</p>
<p>13. {ggsvg}: use SVGs as points in your plot</p>
<p>These packages are all very easy to implement and can turn your basic cartographic maps into true works of art! If you’re interested in playing around with cartographic visualizations, you can get access to open-source geospatial data for the state of Washington from the <a href="https://geo.wa.gov">Washington Geospatial Open Data Portal</a>.</p>
</section>
<section id="personal-takeaways" class="level3">
<h3 class="anchored" data-anchor-id="personal-takeaways">Personal Takeaways</h3>
<p>I had a lot of fun attending Cascadia R Conference 2024, and I look forward to being back in 2025! Here are some personal takeaways I got from the conference.</p>
<ul>
<li><p>The R community is extremely creative and fun! This conference felt very different from some of the technical biomedical informatics conferences I’ve attended in the past, many of which were focused purely on scientific advancements. At this conference, there were so many talks that demonstrated all sorts of random things you could do with the language of R, and these wacky detours were both encouraged and celebrated!</p></li>
<li><p>There is a growing focus on R for production-level ventures, including parameterization and modularization. Many data scientists are interested in scaling R for industrial applications and integrating it with other languages.</p></li>
<li><p>While we are currently in a hype cycle for the field of generative AI and large language models, there is still plenty of other interesting work to be accomplished in the field of data science. It’s important to not get carried away by the fear of missing out (FOMO)! Focus on the goals of your work and find the right tools for the job (i.e.&nbsp;problem-first instead of tooling-first solutions)</p></li>
</ul>
<hr>
<p>This concludes my summary of my experience at Cascadia R Conference 2024! I’d like to give a huge thank you to the <a href="https://cascadiarconf.com/about/">organizers</a> of this conference for all of their hard work and for bringing the PNW data science community together in such a wonderful event. The next conference I will be attending will be <a href="https://posit.co/conference/">posit::conf(2024)</a>, and I look forward to summarizing my experiences there in another blog post. Until next week, [VS]Coders!</p>


</section>

 ]]></description>
  <category>Conferences</category>
  <guid>https://vsriram24.github.io/posts/cascadia-conf-24/</guid>
  <pubDate>Mon, 22 Jul 2024 07:00:00 GMT</pubDate>
  <media:content url="https://vsriram24.github.io/posts/cascadia-conf-24/lakesideChats.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>My podcast recommendations</title>
  <dc:creator>Vivek Sriram</dc:creator>
  <link>https://vsriram24.github.io/posts/podcasts/</link>
  <description><![CDATA[ 





<p>Welcome back to another edition of <em>[VS]Codes</em>! In this week’s post, I’ll be summarizing a list of my top podcasts, including content that covers the biomedical informatics and digital health space, statistics and data science, and a couple of miscellaneous topics as well. Without further ado, let’s get started!</p>
<p><img src="https://vsriram24.github.io/posts/podcasts/mountain.jpg" class="img-fluid" width="500"></p>
<hr>
<p><strong><em>Biomedicine / Health AI</em></strong></p>
<ol type="1">
<li><p><a href="https://www.linkedin.com/company/the-ai-health-podcast/"><strong>The AI Health Podcast</strong></a>, hosted by <a href="https://dbmi.hms.harvard.edu/people/pranav-rajpurkar">Pranav Rajpurkar</a> and <a href="https://asaporta.github.io">Adriel Saporta</a></p>
<p>“The AI Health Podcast” was my first foray into the realm of podcasts covering technical topics - with the demands of my doctoral research and my limited time, I was finding it challenging to keep up with the plethora of advances that were concurrently occurring in medicine with the expanded use of AI. Pranav and Adriel do a great job of synthesizing complex topics across the field of health AI, explaining both the biomedical context as well as the impact of the methodologies being developed. I appreciate how each episode is separated into a section covering the context of the topic followed by an interview with an expert. The experts interviewed also come from a variety of backgrounds in both academia and industry, offering diverse perspectives on artificial intelligence and biomedicine.</p></li>
<li><p><a href="https://erictopol.substack.com"><strong>Ground Truths</strong></a>, hosted by <a href="https://en.wikipedia.org/wiki/Eric_Topol">Eric Topol</a></p>
<p>Eric Topol is a giant in the field cardiovascular medicine, At the same time, he is a keen proponent of expanding the applications of AI to medicine. In this podcast, he interviews leading experts on a variety of topics in biomedicine and health science. I appreciate how the pace of his discussions synthesizes complex areas into very digestible conversations, and I don’t think any other host has the same ability as Eric to bring such esteemed guests to the table so easily!</p></li>
<li><p><a href="https://medium.com/wharton-pulse-podcast"><strong>The Pulse</strong></a>, hosted by <a href="https://whartondigitalhealthclub.org">Wharton Digital Health</a></p>
<p>I learned about “The Pulse” from other Wharton students while I was at the University of Pennsylvania. This podcast is a great way to gain a broad perspective of the field of health technology from a commercial perspective - the companies and interviews vary tremendously from episode to episode, and I found these episodes particularly helpful while I was in academia and looking to learn more about opportunities in the health technology space in industry. Given that the series comes from the Wharton School, there is a focus in some episodes on the business / MBA side of health tech, but much of the content is still relevant to broad audiences looking to learn more about the landscape of the field.</p></li>
</ol>
<p><strong><em>Data Science / Statistics</em></strong></p>
<ol start="4" type="1">
<li><p><a href="https://www.thoughtspot.com/data-chief/podcast"><strong>The Data Chief</strong></a>, hosted by <a href="https://www.thoughtspot.com/author/cindi-howson">Cindi Howson</a></p>
<p>How does one become a “Chief Data Officer”? What does it take to manage the data infrastructure of an organization? How does one continue to support a culture of innovation and progress from such a high-level position? “The Data Chief” answers these questions and more through interviews with leaders across a variety of industries. I appreciate how this podcast exposes listeners to the importance of well-maintained data ecosystems across practically any application area one can think of.</p></li>
<li><p><a href="https://casualinfer.libsyn.com"><strong>Casual Inference</strong></a>, hosted by <a href="https://www.lucymcgowan.com">Lucy D’Agostino McGowan</a> and <a href="https://www.bu.edu/sph/profile/eleanor-murray/">Ellie Murray</a></p>
<p>A play on the field of “causal inference,” this podcast covers a variety of topics in epidemiology, statistics, data science, causal inference, and public health. I am a big fan of the hosts’ mantra of “keeping it casual” by requiring guests to explain their subject matter expertise as simply as they can!</p></li>
<li><p><a href="https://podcast.bestbook.cool"><strong>Build a Career in Data Science</strong></a>, hosted by <a href="https://jnolis.com">Jacqueline Nolis</a> and <a href="https://hookedondata.org/about">Emily Robinson</a></p>
<p>This podcast serves as an accompaniment to Jacqueline and Emily’s amazing book “Build a Career in Data Science,” but there is absolutely no need to have read the book to follow along! Jacqueline and Emily spend each episode on a chapter from their book, covering practical advice for how to succeed in the data science industry. Topics include how to interview for a data science job, how to communicate with stakeholders, how to pick the right position for you, and more!</p></li>
<li><p><a href="https://nssdeviations.com"><strong>Not So Standard Deviations</strong></a>, hosted by <a href="https://rdpeng.org">Roger Peng</a> and <a href="https://hilaryparker.com">Hilary Parker</a></p>
<p>As I transitioned from the biomedical focus of my dissertation research to broader data science applications, I wanted to find a podcast that could expose me to the gamut of statistics, machine learning, data science. “Not So Standard Deviations” fits this bill to a tee, including discussions of topics in both data science and tech while making time for fun tangents and detours depending on the news of the day.</p></li>
</ol>
<p><strong><em>Miscellaneous</em></strong></p>
<ol start="8" type="1">
<li><p><a href="https://www.pushkin.fm/podcasts/the-happiness-lab-with-dr-laurie-santos"><strong>The Happiness Lab</strong></a>, hosted by <a href="https://www.drlauriesantos.com">Laurie Santos</a></p>
<p>Laurie Santos is a professor of psychology at Yale and has spent her career studying the evolutionary origins of human cognition and the science of happiness. In this podcast, she considers a variety of questions in the happiness space using a science-based approach, interviewing a plethora of guests across the field of human cognition. I’ve found the way I think about how I approach each of my days has notably shifted since finding this podcast!</p></li>
<li><p><a href="https://headgum.com/factually-with-adam-conover"><strong>“Factually!”</strong></a>, hosted by <a href="https://www.adamconover.net">Adam Conover</a></p>
<p>I first learned about Adam Conover from watching his television show “Adam Ruins Everything,” where he reveals hidden truths about a variety of topics that are commonly misunderstood by the public using a comedic lens. “Factually!” continues this tradition of irreverently diving deeper through interviews with experts that cover every topic imaginable, whether it be the ethics of artificial intelligence or “your houseplants can think!”</p></li>
</ol>
<hr>
<p>This concludes my blog post for today. Until next week!</p>



 ]]></description>
  <category>Personal</category>
  <guid>https://vsriram24.github.io/posts/podcasts/</guid>
  <pubDate>Mon, 15 Jul 2024 07:00:00 GMT</pubDate>
  <media:content url="https://vsriram24.github.io/posts/podcasts/zolaStaring.jpeg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>A Python introduction to neural networks and backpropagation</title>
  <dc:creator>Vivek Sriram</dc:creator>
  <link>https://vsriram24.github.io/posts/karpathy-1/</link>
  <description><![CDATA[ 





<p>This is a walkthrough of Andrej Karpathy’s video “<a href="https://www.youtube.com/watch?v=VMj-3S1tku0">The spelled-out intro to neural networks and backpropagation: building micrograd</a>”. This video is the first in his YouTube series, “<a href="https://www.youtube.com/playlist?list=PLAqhIrjkxbuWI23v9cThsA9GvCAUhRvKZ">Neural Networks: Zero to Hero</a>.”</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://vsriram24.github.io/posts/karpathy-1/karpathyVideo.png" class="img-fluid figure-img"></p>
<figcaption>A screen-grab of Andrej’s video</figcaption>
</figure>
</div>
<p><a href="https://aws.amazon.com/what-is/neural-network/#:~:text=A%20neural%20network%20is%20a,that%20resembles%20the%20human%20brain.">Neural networks</a> are mathematical models used to represent nodes and the signals they send to one another through their links. Neural networks replicate the structure of the brain, where interconnected neurons send messages to each other through electric signals across the synpases that bridge them together. While individual nodes can perform only simple operations, many nodes connected together in a network can perform complex computational tasks.</p>
<p>The general structure of a neural network for machine learning includes three types of nodes, grouped into different “layers” within the neural network. The first set of nodes are the input nodes, corresponding to input (or training data). The second set of nodes refer to intermediate (hidden) nodes. The final type of node is the output node, corresponding to the result of processing the input data through the hidden nodes. This output layer typically comes in the form of a loss function, characterizing the difference between the output of the model and the expected output. The goal of optimizing a neural network is to minimize this output loss to best match the behavior of the input data.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://vsriram24.github.io/posts/karpathy-1/nn.jpeg" class="img-fluid figure-img"></p>
<figcaption>The basic format of a neural network</figcaption>
</figure>
</div>
<p>Backpropagation is an algorithm for supervised learning of neural networks using <a href="https://en.wikipedia.org/wiki/Gradient_descent">gradient descent</a>. This method will calculate the gradient of each intermediate node in the network with respect to the loss function, allowing us to iteratively tune their weights to minimize the overall loss.</p>
<p>In his video tutorial, Andrej shows how to construct a neural network from scratch and perform backpropagation on it to optimize the weights of the network. The code presented in this example is a direct copy of the code walked through in the video, streamlined a bit for interpretation. Writing this blog post helped me solidify my understanding of the material (and also helped me practice writing Python code in Quarto :) ). I would highly recommend following along with this tutorial and further videos for a hands-on, ground-up exploration of neural networks and language models! I aim to work through his other tutorials in the future as well.</p>
<p>With background out of the way, let’s get started~</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb1-1"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">```{r}</span></span>
<span id="cb1-2"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">library(reticulate)</span></span>
<span id="cb1-3"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">use_python('/opt/anaconda3/bin/python')</span></span>
<span id="cb1-4"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">```</span></span></code></pre></div>
<div id="876ff6ad" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import required packages</span></span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> math</span>
<span id="cb2-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb2-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb2-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> random</span></code></pre></div>
</div>
<section id="defining-functions-and-manually-calculating-derivatives" class="level1">
<h1>Defining functions and manually calculating derivatives</h1>
<p>We can start by thinking about a simple mathematical expression to give us some intuition behind the workings of individual neurons.</p>
<p>Let’s define a scalar value function <em>f(</em>x<em>)</em> that takes scalar input and returns scalar output. We can apply this function to a single value or a range of values.</p>
<div id="546a8d98" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># e.g. scalar value function that takes scalar input and returns scalar output</span></span>
<span id="cb3-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> f(x):</span>
<span id="cb3-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb3-4"></span>
<span id="cb3-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># e.g. single value</span></span>
<span id="cb3-6">f(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.0</span>)</span>
<span id="cb3-7"></span>
<span id="cb3-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># e.g. range of values</span></span>
<span id="cb3-9">xs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.arange(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span>)</span>
<span id="cb3-10">ys <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> f(xs)</span>
<span id="cb3-11">ys</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="52">
<pre><code>array([100.    ,  91.6875,  83.75  ,  76.1875,  69.    ,  62.1875,
        55.75  ,  49.6875,  44.    ,  38.6875,  33.75  ,  29.1875,
        25.    ,  21.1875,  17.75  ,  14.6875,  12.    ,   9.6875,
         7.75  ,   6.1875,   5.    ,   4.1875,   3.75  ,   3.6875,
         4.    ,   4.6875,   5.75  ,   7.1875,   9.    ,  11.1875,
        13.75  ,  16.6875,  20.    ,  23.6875,  27.75  ,  32.1875,
        37.    ,  42.1875,  47.75  ,  53.6875])</code></pre>
</div>
</div>
<p>We can plot the output of our function to see the association between our input and output as well.</p>
<div id="08eb2ee0" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">plt.plot(xs, ys)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://vsriram24.github.io/posts/karpathy-1/index_files/figure-html/cell-4-output-1.png" width="575" height="411" class="figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Determining the derivative of <em>f</em> would let us identify inflection points in our data. Let’s calculate the derivative of <em>f</em> at 3 (i.e.&nbsp;<em>f’(</em>3)) numerically using the fundamental law of calculus:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Clim_%7Bh%5Cto%5Cinfty%7D%20%5Cfrac%7Bf(x+h)-f(x)%7D%7Bh%7D%0A"></p>
<div id="4e7b59a9" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0000000001</span></span>
<span id="cb6-2">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.0</span></span>
<span id="cb6-3"></span>
<span id="cb6-4">(f(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>h) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> f(x))<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>h</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="54">
<pre><code>14.000001158365194</code></pre>
</div>
</div>
<p>Note that if our <em>h</em> is too small for Python, we will end up with a floating point error. With some trial and error for different values of <em>h</em>, we can see <em>f’</em>(3) = 14</p>
<p>Now let’s make a function that is a little more complicated: <img src="https://latex.codecogs.com/png.latex?%0Ad(a,%20b,%20c)%20=%20a*b%20+%20c%0A"></p>
<div id="160ef1ba" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span></span>
<span id="cb8-2">b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.0</span></span>
<span id="cb8-3">c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">10.0</span></span>
<span id="cb8-4">d1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> c</span></code></pre></div>
</div>
<p>Again, we can calculate the derivative of <strong><em>d</em></strong>. This time, since we have three inputs, we have to pick a variable with respect to which we calculate the derivative. Let’s numerically calculate the derivative of <strong><em>d</em></strong> with respect to <em>a</em>.</p>
<div id="3cbeff89" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0000001</span></span>
<span id="cb9-2"></span>
<span id="cb9-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#derivative wrt a</span></span>
<span id="cb9-4">a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> h</span>
<span id="cb9-5"></span>
<span id="cb9-6">d2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> c</span>
<span id="cb9-7"></span>
<span id="cb9-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'d1'</span>, d1)</span>
<span id="cb9-9"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'d2'</span>, d2)</span>
<span id="cb9-10"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'slope'</span>, (d2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>d1)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>h)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>d1 4.0
d2 3.9999997
slope -2.9999999995311555</code></pre>
</div>
</div>
<p>We can do the same with respect to <em>b</em> as well.</p>
<div id="6d673f91" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#derivative wrt b</span></span>
<span id="cb11-2">b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> h</span>
<span id="cb11-3">a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span></span>
<span id="cb11-4"></span>
<span id="cb11-5">d2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> c</span>
<span id="cb11-6"></span>
<span id="cb11-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'d1'</span>, d1)</span>
<span id="cb11-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'d2'</span>, d2)</span>
<span id="cb11-9"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'slope'</span>, (d2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>d1)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>h)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>d1 4.0
d2 4.0000002
slope 1.9999999967268423</code></pre>
</div>
</div>
<p>We now have some intuition for how functions and derivatives work.</p>
</section>
<section id="the-value-class" class="level1">
<h1>The ‘Value’ Class</h1>
<p>Let’s define a class “Value” to store the individual values that come together to make a function / mathematical expression. Each ‘Value’ can be thought of as a node in a neural network.</p>
<div id="98e2aaf3" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Value:</span>
<span id="cb13-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, data, _children<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(), _op<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>):</span>
<span id="cb13-3">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data</span>
<span id="cb13-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span></span>
<span id="cb13-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._backward <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span>: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#default: nothing</span></span>
<span id="cb13-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._prev <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(_children)</span>
<span id="cb13-7">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._op <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _op</span>
<span id="cb13-8">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> label</span>
<span id="cb13-9"></span>
<span id="cb13-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Nicer looking way to see what the value actually is instead of an object</span></span>
<span id="cb13-11">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__repr__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb13-12">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Value(data=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">)"</span></span>
<span id="cb13-13"></span>
<span id="cb13-14">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__add__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, other):</span>
<span id="cb13-15">        other <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> other <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">isinstance</span>(other, Value) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> Value(other)</span>
<span id="cb13-16">        out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Value(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> other.data, (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, other), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'+'</span>)</span>
<span id="cb13-17">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _backward():</span>
<span id="cb13-18">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> out.grad</span>
<span id="cb13-19">            other.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> out.grad</span>
<span id="cb13-20">        out._backward <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _backward</span>
<span id="cb13-21">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> out</span>
<span id="cb13-22"></span>
<span id="cb13-23">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__radd__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, other): <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># other * self</span></span>
<span id="cb13-24">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> other</span>
<span id="cb13-25">        </span>
<span id="cb13-26">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__mul__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, other):</span>
<span id="cb13-27">        other <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> other <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">isinstance</span>(other, Value) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> Value(other)</span>
<span id="cb13-28">        out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Value(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> other.data, (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, other), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'*'</span>)</span>
<span id="cb13-29">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _backward():</span>
<span id="cb13-30">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> other.data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> out.grad</span>
<span id="cb13-31">            other.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> out.grad</span>
<span id="cb13-32">        out._backward <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _backward</span>
<span id="cb13-33">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> out</span>
<span id="cb13-34"></span>
<span id="cb13-35">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__rmul__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, other): <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># other * self</span></span>
<span id="cb13-36">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> other</span>
<span id="cb13-37"></span>
<span id="cb13-38">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> tanh(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb13-39">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.data</span>
<span id="cb13-40">        t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (math.exp(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>x)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>(math.exp(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>x)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb13-41">        out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Value(t, (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, ), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tanh'</span>)</span>
<span id="cb13-42">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _backward():</span>
<span id="cb13-43">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span>  (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> out.grad</span>
<span id="cb13-44">        out._backward <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _backward</span>
<span id="cb13-45">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> out</span>
<span id="cb13-46"></span>
<span id="cb13-47">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> exp(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb13-48">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.data</span>
<span id="cb13-49">        out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Value(math.exp(x), (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, ), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'exp'</span>)</span>
<span id="cb13-50"></span>
<span id="cb13-51">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _backward():</span>
<span id="cb13-52">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> out.data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> out.grad</span>
<span id="cb13-53">        out._backward <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _backward</span>
<span id="cb13-54"></span>
<span id="cb13-55">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> out</span>
<span id="cb13-56"></span>
<span id="cb13-57">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__pow__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, other):</span>
<span id="cb13-58">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">assert</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">isinstance</span>(other, (<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>)), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"only supporting int/float powers for now"</span></span>
<span id="cb13-59">        out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Value(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>other, (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>,), <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'**</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>other<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb13-60"></span>
<span id="cb13-61">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _backward():</span>
<span id="cb13-62">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> other <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>(other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> out.grad</span>
<span id="cb13-63">        out._backward <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _backward</span>
<span id="cb13-64"></span>
<span id="cb13-65">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> out</span>
<span id="cb13-66">    </span>
<span id="cb13-67">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__truediv__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, other): <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#self / other</span></span>
<span id="cb13-68">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> other<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb13-69"></span>
<span id="cb13-70">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__neg__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>): <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># -self</span></span>
<span id="cb13-71">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb13-72"></span>
<span id="cb13-73">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__sub__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, other): <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># self - other</span></span>
<span id="cb13-74">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>other)</span>
<span id="cb13-75"></span>
<span id="cb13-76">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> backward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb13-77">        topo <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb13-78">        visited <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>()</span>
<span id="cb13-79">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> build_topo(v):</span>
<span id="cb13-80">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> v <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> visited:</span>
<span id="cb13-81">                visited.add(v)</span>
<span id="cb13-82">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> child <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> v._prev:</span>
<span id="cb13-83">                    build_topo(child)</span>
<span id="cb13-84">                topo.append(v)</span>
<span id="cb13-85">        </span>
<span id="cb13-86">        build_topo(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>)</span>
<span id="cb13-87">        </span>
<span id="cb13-88">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># call _backward() in the right topological order</span></span>
<span id="cb13-89">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span></span>
<span id="cb13-90">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> node <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">reversed</span>(topo):</span>
<span id="cb13-91">            node._backward()</span></code></pre></div>
</div>
<p>We can see how to perform mathematical operations using our <code>Value</code> class:</p>
<div id="b71aa313" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Value(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span>)</span>
<span id="cb14-2">b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Value(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4.0</span>)</span>
<span id="cb14-3">a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>b</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="59">
<pre><code>Value(data=-2.0)</code></pre>
</div>
</div>
<p>Now let’s define an example function <strong><em>L</em></strong> that makes use of our <code>Value</code> class:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AL(a,%20b,%20c,%20f)%20=%20(a*b%20+%20c)*f%0A"></p>
<div id="df1bfc2e" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Value(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'a'</span>)</span>
<span id="cb16-2">b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Value(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.0</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'b'</span>)</span>
<span id="cb16-3">c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Value(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">10.0</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'c'</span>)</span>
<span id="cb16-4">e <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> e.label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'e'</span></span>
<span id="cb16-5">d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> e <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> d.label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'d'</span></span>
<span id="cb16-6">f <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Value(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span>, label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'f'</span>)</span>
<span id="cb16-7">L <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> f<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> L.label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'L'</span></span>
<span id="cb16-8">L</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="60">
<pre><code>Value(data=-8.0)</code></pre>
</div>
</div>
<p>Based on the code in our <code>Value</code> class, we are able to see for each node which nodes came before it and what the operation was to generate the current node.</p>
<div id="1d50d242" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">d._prev</span>
<span id="cb18-2">d._op</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="61">
<pre><code>'+'</code></pre>
</div>
</div>
<p>We can also define a function ‘draw_dot’ to be able to visualize the components of our function. Here, we build out a graph using the GraphViz API. We then iterate over all nodes and create corresponding nodes and edges (including values and operations as different node types in our network).</p>
<div id="50d4d7c6" class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> graphviz <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Digraph</span>
<span id="cb20-2"></span>
<span id="cb20-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> trace(root):</span>
<span id="cb20-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># builds a set of all nodes and edges in a graph</span></span>
<span id="cb20-5">    nodes, edges <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>()</span>
<span id="cb20-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> build(v):</span>
<span id="cb20-7">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> v <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> nodes:</span>
<span id="cb20-8">            nodes.add(v)</span>
<span id="cb20-9">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> child <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> v._prev:</span>
<span id="cb20-10">                edges.add((child, v))</span>
<span id="cb20-11">                build(child)</span>
<span id="cb20-12">    build(root)</span>
<span id="cb20-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> nodes, edges</span>
<span id="cb20-14"></span>
<span id="cb20-15"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> draw_dot(root):</span>
<span id="cb20-16">    dot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Digraph(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'svg'</span>, graph_attr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'rankdir'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'LR'</span>}) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#LR = left to right</span></span>
<span id="cb20-17"></span>
<span id="cb20-18">    nodes, edges <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> trace(root)</span>
<span id="cb20-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> n <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> nodes:</span>
<span id="cb20-20">        uid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span>(n))</span>
<span id="cb20-21">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># for any value in the graph, create a rectangular ('record') node for it</span></span>
<span id="cb20-22">        dot.node(name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> uid, label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{ </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%s</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> | data </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%.4f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> | grad </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%.4f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> }"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> (n.label, n.data, n.grad), shape <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'record'</span>)</span>
<span id="cb20-23">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> n._op:</span>
<span id="cb20-24">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># if this value is a result of some operation, create an op node for it</span></span>
<span id="cb20-25">            dot.node(name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> uid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> n._op, label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> n._op)</span>
<span id="cb20-26">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># and connect this node to it</span></span>
<span id="cb20-27">            dot.edge(uid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> n._op, uid)</span>
<span id="cb20-28"></span>
<span id="cb20-29">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> n1, n2 <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> edges:</span>
<span id="cb20-30">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># connect n1 to the op node of n2</span></span>
<span id="cb20-31">        dot.edge(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span>(n1)), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span>(n2)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> n2._op)</span>
<span id="cb20-32"></span>
<span id="cb20-33">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> dot</span></code></pre></div>
</div>
<div id="cac24515" class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">draw_dot(L)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="63">
<div>
<figure class="figure">
<p><img src="https://vsriram24.github.io/posts/karpathy-1/index_files/figure-html/cell-14-output-1.svg" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="manual-backpropagation-example" class="level1">
<h1>Manual backpropagation example</h1>
<p>With our basic function <strong><em>L</em></strong> now represented as a network of values and operations, let’s perform manual backpropagation.</p>
<p>We’ll start from <strong><em>L</em></strong> and work backwards, taking the derivative with respect to <strong><em>L</em></strong> at each intermediate value. This exercise is equivalent to determining the derivative of an output <strong><em>L</em></strong> with respect to the internal weights of a neural network.</p>
<div id="735327fb" class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Let's calculate gradient of L wrt a manually using the fundamental theorem of calculus</span></span>
<span id="cb22-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (f(x+h) - f(x))/h</span></span>
<span id="cb22-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> lol():</span>
<span id="cb22-4">    h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.001</span></span>
<span id="cb22-5">    </span>
<span id="cb22-6">    a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Value(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'a'</span>)</span>
<span id="cb22-7">    b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Value(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.0</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'b'</span>)</span>
<span id="cb22-8">    c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Value(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">10.0</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'c'</span>)</span>
<span id="cb22-9">    e <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> e.label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'e'</span></span>
<span id="cb22-10">    d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> e <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> d.label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'d'</span></span>
<span id="cb22-11">    f <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Value(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span>, label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'f'</span>)</span>
<span id="cb22-12">    L <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> f<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> L.label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'L'</span></span>
<span id="cb22-13">    L1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> L.data</span>
<span id="cb22-14"></span>
<span id="cb22-15">    a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Value(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> h, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'a'</span>)</span>
<span id="cb22-16">    b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Value(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.0</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'b'</span>)</span>
<span id="cb22-17">    c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Value(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">10.0</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'c'</span>)</span>
<span id="cb22-18">    e <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> e.label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'e'</span></span>
<span id="cb22-19">    d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> e <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> d.label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'d'</span></span>
<span id="cb22-20">    f <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Value(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span>, label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'f'</span>)</span>
<span id="cb22-21">    L <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> f<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> L.label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'L'</span></span>
<span id="cb22-22">    L2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> L.data</span>
<span id="cb22-23"></span>
<span id="cb22-24">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>((L2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>L1)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>h)</span></code></pre></div>
</div>
<div id="76339a31" class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#dL/da</span></span>
<span id="cb23-2">lol()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>6.000000000000227</code></pre>
</div>
</div>
<p>We can go through this entire network structure and set the gradients for each node with respect to <strong><em>L</em></strong>.</p>
<div id="91405de2" class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#We know dL/dL = 1</span></span>
<span id="cb25-2">L.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span></code></pre></div>
</div>
<div id="76ba40af" class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#L = d*f</span></span>
<span id="cb26-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#So dL/df = d</span></span>
<span id="cb26-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#and dL/dd = f</span></span>
<span id="cb26-4"></span>
<span id="cb26-5">f.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4.0</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># this is just the value of d</span></span>
<span id="cb26-6">d.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># this is just the value of f</span></span></code></pre></div>
</div>
<div id="6b9a5c55" class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># what is dL/dc?</span></span>
<span id="cb27-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># We can use dL/dd and dd/dc and apply the chain rule</span></span>
<span id="cb27-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># dL / dc = (dL/dd) * (dd/dc) = -2*1 = -2</span></span>
<span id="cb27-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># dL/de is the same, -2</span></span>
<span id="cb27-5">c.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># this is just the value of d</span></span>
<span id="cb27-6">e.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># this is just the value of f</span></span></code></pre></div>
</div>
<div id="d76ee1ae" class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># dL/da = dL/de * de/da = -2*b = -2*-3 = 6</span></span>
<span id="cb28-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># dL/db = dL/de * de/db = -2*a = -2*2 = -4</span></span>
<span id="cb28-3">a.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">6.0</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># this is just the value of d</span></span>
<span id="cb28-4">b.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4.0</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># this is just the value of f</span></span></code></pre></div>
</div>
<div id="e332d802" class="cell" data-execution_count="20">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1">draw_dot(L)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="70">
<div>
<figure class="figure">
<p><img src="https://vsriram24.github.io/posts/karpathy-1/index_files/figure-html/cell-21-output-1.svg" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Here is our key takeaway from this example:</p>
<p><strong>Backpropagation is just the recursive application of the <a href="https://en.wikipedia.org/wiki/Chain_rule">chain rule</a> backwards through the computational graph</strong> <strong>of your neural network.</strong></p>
</section>
<section id="introducing-an-activation-function." class="level1">
<h1>Introducing an activation function.</h1>
<p>In our previous example, we had an output <strong><em>L</em></strong> that could take on any value. Now let’s make use of the hyperbolic tangent (<img src="https://latex.codecogs.com/png.latex?tanh">) activation function to limit our output to a range of -1 to 1.</p>
<p><img src="https://latex.codecogs.com/png.latex?Tanh"> looks as follows:</p>
<div id="534e5218" class="cell" data-execution_count="21">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Squashing/activation function - tan(h)</span></span>
<span id="cb30-2">plt.plot(np.arange(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>), np.tanh(np.arange(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>)))<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb30-3">plt.grid()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://vsriram24.github.io/posts/karpathy-1/index_files/figure-html/cell-22-output-1.png" width="590" height="411" class="figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Let’s define a new function <img src="https://latex.codecogs.com/png.latex?o%20=%20tanh(x1*w1%20+%20x2*w2%20+%20b)"></p>
<div id="5bf3d1e3" class="cell" data-execution_count="22">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># inputs x1, x2</span></span>
<span id="cb31-2">x1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Value(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span>, label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x1'</span>)</span>
<span id="cb31-3">x2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Value(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>, label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x2'</span>)</span>
<span id="cb31-4"></span>
<span id="cb31-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># weights w1, w2</span></span>
<span id="cb31-6">w1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Value(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.0</span>, label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'w1'</span>)</span>
<span id="cb31-7">w2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Value(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>, label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'w2'</span>)</span>
<span id="cb31-8"></span>
<span id="cb31-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># bias of the neuron (crazy bias makes clean output in this example)</span></span>
<span id="cb31-10">b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Value (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">6.881373587019542</span>, label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'b'</span>)</span>
<span id="cb31-11"></span>
<span id="cb31-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#x1*w1 + x2*w2 + b</span></span>
<span id="cb31-13">x1w1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>w1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> x1w1.label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x1*w1'</span></span>
<span id="cb31-14">x2w2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>w2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> x2w2.label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x2*w2'</span></span>
<span id="cb31-15"></span>
<span id="cb31-16">x1w1x2w2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x1w1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> x2w2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb31-17">x1w1x2w2.label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x1*w1 + x2*w2'</span></span>
<span id="cb31-18"></span>
<span id="cb31-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># n is our cell body activation without the activation function</span></span>
<span id="cb31-20">n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x1w1x2w2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb31-21">n.label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'n'</span></span>
<span id="cb31-22"></span>
<span id="cb31-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Apply activation function (defined in Value class earlier)</span></span>
<span id="cb31-24">o <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> n.tanh()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> o.label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'o'</span></span></code></pre></div>
</div>
<p>Here is the network that represents the function we just defined:</p>
<div id="3abff129" class="cell" data-execution_count="23">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1">draw_dot(o)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="73">
<div>
<figure class="figure">
<p><img src="https://vsriram24.github.io/posts/karpathy-1/index_files/figure-html/cell-24-output-1.svg" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>We care most about the derivative of <strong><em>o</em></strong> with respect to the weights <em>w1</em> and <em>w2</em>. In a normal neural network, we would have many more input and intermediate nodes (not just the two as in this example). We will calculate the gradients for this network by hand.</p>
<div id="48bc68cc" class="cell" data-execution_count="24">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1">o.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span></span>
<span id="cb33-2"></span>
<span id="cb33-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># o = tanh(n)</span></span>
<span id="cb33-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># do/dn = 1-tanh^2(n) = 1 - o^2</span></span>
<span id="cb33-5">n.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>o.data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb33-6"></span>
<span id="cb33-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># do/db = do/dn * dn/db = (1-o^2)*1 = 1-o^2</span></span>
<span id="cb33-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># d(x1w1x2w2)/db = do/dn * dn/d(x1w1x2w2) = (1-o^2)*1 = 1-o^2</span></span>
<span id="cb33-9">x1w1x2w2.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>o.data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb33-10">b.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>o.data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb33-11"></span>
<span id="cb33-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># same logic of back-propagation wrt '+'</span></span>
<span id="cb33-13">x1w1.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>o.data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb33-14">x2w2.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>o.data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb33-15"></span>
<span id="cb33-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#do/dx2 = w2 * do/d(x2w2)</span></span>
<span id="cb33-17">x2.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> w2.data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x2w2.grad</span>
<span id="cb33-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#do/dw2 = x2 * do/d/(x2w2)</span></span>
<span id="cb33-19">w2.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x2.data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x2w2.grad</span>
<span id="cb33-20"></span>
<span id="cb33-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># same logic as for x2/w2</span></span>
<span id="cb33-22">x1.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> w1.data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x1w1.grad</span>
<span id="cb33-23">w1.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x1.data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x1w1.grad</span></code></pre></div>
</div>
<div id="1592598a" class="cell" data-execution_count="25">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1">draw_dot(o)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="75">
<div>
<figure class="figure">
<p><img src="https://vsriram24.github.io/posts/karpathy-1/index_files/figure-html/cell-26-output-1.svg" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>So, because <em>w1</em>’s gradient is positive, if we want this neuron’s output to increase, then we should increase <em>w1</em>. <em>w2</em> doesn’t affect the output of this function because its gradient is 0.</p>
</section>
<section id="automating-backpropagation" class="level1">
<h1>Automating backpropagation</h1>
<p>Let’s stop doing this back-propagation manually! Take a look at the logic for <code>_backward</code> and <code>backward</code>in the <code>Value</code> class to see how we handle this (we apply a topological sort to our data in the <code>backward</code> function). We also ensure that we never call <code>_backward</code> on a node before we’ve called it on its children. Lastly, we make sure that we accumulate gradients in the <code>backward</code> function.</p>
<div id="294c1be4" class="cell" data-execution_count="26">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1">o.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span></span>
<span id="cb35-2"></span>
<span id="cb35-3">o._backward()</span>
<span id="cb35-4">n._backward()</span>
<span id="cb35-5">b._backward()</span>
<span id="cb35-6">x1w1x2w2._backward()</span>
<span id="cb35-7">x2w2._backward()</span>
<span id="cb35-8">x1w1._backward()</span></code></pre></div>
</div>
<div id="467bd0af" class="cell" data-execution_count="27">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1">draw_dot(o)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="77">
<div>
<figure class="figure">
<p><img src="https://vsriram24.github.io/posts/karpathy-1/index_files/figure-html/cell-28-output-1.svg" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="81c6991a" class="cell" data-execution_count="28">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1">o.backward()</span>
<span id="cb37-2">draw_dot(o)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="78">
<div>
<figure class="figure">
<p><img src="https://vsriram24.github.io/posts/karpathy-1/index_files/figure-html/cell-29-output-1.svg" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="e499838f" class="cell" data-execution_count="29">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1">a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Value(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.0</span>, label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'a'</span>)</span>
<span id="cb38-2">b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> b.label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'b'</span></span>
<span id="cb38-3">b.backward()</span>
<span id="cb38-4">draw_dot(b)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="79">
<div>
<figure class="figure">
<p><img src="https://vsriram24.github.io/posts/karpathy-1/index_files/figure-html/cell-30-output-1.svg" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Everything works! Yay!</p>
</section>
<section id="breaking-up-tanh-into-its-individual-components" class="level1">
<h1>Breaking up <em><code>tanh</code></em> into its individual components</h1>
<p>Instead of using a <img src="https://latex.codecogs.com/png.latex?tanh"> function in our <code>Value</code> class, we can break it up into exponent and division functions to see an example of a more complicated network.</p>
<div id="dc4811c0" class="cell" data-execution_count="30">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># inputs x1, x2</span></span>
<span id="cb39-2">x1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Value(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span>, label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x1'</span>)</span>
<span id="cb39-3">x2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Value(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>, label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x2'</span>)</span>
<span id="cb39-4"></span>
<span id="cb39-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># weights w1, w2</span></span>
<span id="cb39-6">w1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Value(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.0</span>, label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'w1'</span>)</span>
<span id="cb39-7">w2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Value(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>, label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'w2'</span>)</span>
<span id="cb39-8"></span>
<span id="cb39-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># bias of the neuron</span></span>
<span id="cb39-10">b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Value (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">6.881373587019542</span>, label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'b'</span>)</span>
<span id="cb39-11"></span>
<span id="cb39-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#x1*w1 + x2*w2 + b</span></span>
<span id="cb39-13">x1w1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>w1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> x1w1.label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x1*w1'</span></span>
<span id="cb39-14">x2w2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>w2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> x2w2.label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x2*w2'</span></span>
<span id="cb39-15"></span>
<span id="cb39-16">x1w1x2w2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x1w1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> x2w2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb39-17">x1w1x2w2.label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x1*w1 + x2*w2'</span></span>
<span id="cb39-18"></span>
<span id="cb39-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># n is our cell body activation without the activation function</span></span>
<span id="cb39-20">n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x1w1x2w2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb39-21">n.label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'n'</span></span>
<span id="cb39-22"></span>
<span id="cb39-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Apply activation function (defined in Value class earlier)</span></span>
<span id="cb39-24">e <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>n).exp()</span>
<span id="cb39-25">o <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (e<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>(e<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb39-26">o.label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'o'</span></span>
<span id="cb39-27">o.backward()</span></code></pre></div>
</div>
<div id="ba764d8f" class="cell" data-execution_count="31">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1">draw_dot(o)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="81">
<div>
<figure class="figure">
<p><img src="https://vsriram24.github.io/posts/karpathy-1/index_files/figure-html/cell-32-output-1.svg" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>As we can see, even after breaking our <code>tanh</code> function into its individual components, our forward and backward passes are still correct! Note that the level at which you perform your individual operations is entirely up to you (e.g.&nbsp;<code>tanh</code> vs.&nbsp;its individual components). All that matters is that you have input and output and that you can do forward/backward passing of your operations.</p>
</section>
<section id="backpropagation-with-pytorch" class="level1">
<h1>Backpropagation with PyTorch</h1>
<p>Now that we’ve developed backpropagation manually, let’s see how it can be performed in <a href="https://pytorch.org/docs/stable/index.html">PyTorch</a>. With PyTorch, everything is based around <a href="https://en.wikipedia.org/wiki/Tensor#:~:text=In%20mathematics%2C%20a%20tensor%20is,scalars%2C%20and%20even%20other%20tensors.">tensors</a> rather than scalars.</p>
<div id="e7e2de18" class="cell" data-execution_count="32">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb41-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb41-2"></span>
<span id="cb41-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Cast to double to get 64bit precision</span></span>
<span id="cb41-4">x1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.Tensor([<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span>]).double()</span>
<span id="cb41-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># by default, pytorch will say leaf nodes don't have gradients to improve efficiency</span></span>
<span id="cb41-6">x1.requires_grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb41-7"></span>
<span id="cb41-8">x2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.Tensor([<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>]).double()</span>
<span id="cb41-9">x2.requires_grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb41-10"></span>
<span id="cb41-11">w1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.Tensor([<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.0</span>]).double()</span>
<span id="cb41-12">w1.requires_grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb41-13"></span>
<span id="cb41-14">w2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.Tensor([<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>]).double()</span>
<span id="cb41-15">w2.requires_grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb41-16"></span>
<span id="cb41-17">b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.Tensor([<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">6.8813735870195432</span>]).double()</span>
<span id="cb41-18">b.requires_grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb41-19"></span>
<span id="cb41-20">n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>w1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> x2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>w2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b</span>
<span id="cb41-21">o <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tanh(n)</span>
<span id="cb41-22"></span>
<span id="cb41-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># PyTorch tensors have data and grad elements</span></span>
<span id="cb41-24"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(o.data.item())</span>
<span id="cb41-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># PyTorch has a backward function too</span></span>
<span id="cb41-26">o.backward()</span>
<span id="cb41-27"></span>
<span id="cb41-28"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'---'</span>)</span>
<span id="cb41-29"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x2'</span>, x2.grad.item())</span>
<span id="cb41-30"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'w2'</span>, w2.grad.item())</span>
<span id="cb41-31"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x1'</span>, x1.grad.item())</span>
<span id="cb41-32"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'w1'</span>, w1.grad.item())</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>0.7071066904050358
---
x2 0.5000001283844369
w2 0.0
x1 -1.5000003851533106
w1 1.0000002567688737</code></pre>
</div>
</div>
<p>PyTorch makes all of our calculations much more efficient. We can do all of these operations in parallel with very large tensors and not just scalar values.</p>
</section>
<section id="a-simple-neural-network" class="level1">
<h1>A simple neural network</h1>
<p>We’ve had enough fun with “neural network adjacent” mathematical expressions and their corresponding computational topologies.</p>
<p>Let’s implement a simple neural network. We will base this off of a <a href="https://www.datacamp.com/tutorial/multilayer-perceptrons-in-machine-learning#">multilayer perceptron</a> (MLP). We can define a <code>Neuron</code> class, <code>Layer</code> class, and <code>MLP</code> class for our network.</p>
<p>A typical neural network neuron looks like the following:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://vsriram24.github.io/posts/karpathy-1/neuron.jpeg" class="img-fluid figure-img"></p>
<figcaption>A typical neuron in a neural network</figcaption>
</figure>
</div>
<div id="ad06d062" class="cell" data-execution_count="33">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb43-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Neuron:</span>
<span id="cb43-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, nin):</span>
<span id="cb43-3">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [Value(random.uniform(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(nin)]</span>
<span id="cb43-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Value(random.uniform(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb43-5">        </span>
<span id="cb43-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Python goes to __call__ when you use the class as a function</span></span>
<span id="cb43-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__call__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x):</span>
<span id="cb43-8">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># w.x + b</span></span>
<span id="cb43-9">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># start with self.b, add the dot product of w and x</span></span>
<span id="cb43-10">        act <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>((wi<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>xi <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> wi,xi <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w, x)), <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.b)</span>
<span id="cb43-11">        out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> act.tanh()</span>
<span id="cb43-12">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> out</span>
<span id="cb43-13"></span>
<span id="cb43-14">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> parameters(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb43-15">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> [<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.b]</span></code></pre></div>
</div>
<div id="737765b7" class="cell" data-execution_count="34">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb44-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Layer:</span>
<span id="cb44-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># nout is the size of the output of the layer</span></span>
<span id="cb44-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, nin, nout):</span>
<span id="cb44-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.neurons <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [Neuron(nin) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(nout)]</span>
<span id="cb44-5"></span>
<span id="cb44-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__call__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x):</span>
<span id="cb44-7">        outs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [n(x) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> n <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.neurons]</span>
<span id="cb44-8">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> outs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(outs) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> outs</span>
<span id="cb44-9"></span>
<span id="cb44-10">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> parameters(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb44-11">        params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb44-12">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> neuron <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.neurons:</span>
<span id="cb44-13">            ps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> neuron.parameters()</span>
<span id="cb44-14">            params.extend(ps)</span>
<span id="cb44-15">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> params</span>
<span id="cb44-16">        </span>
<span id="cb44-17">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Same as:</span></span>
<span id="cb44-18">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># return [p for neuron in self.neurons for p in neuron.parameters()]</span></span></code></pre></div>
</div>
<div id="cdfc4e65" class="cell" data-execution_count="35">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb45-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> MLP:</span>
<span id="cb45-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># nouts is the list of layer sizes we want</span></span>
<span id="cb45-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, nin, nouts):</span>
<span id="cb45-4">        sz <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [nin] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> nouts</span>
<span id="cb45-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.layers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [Layer(sz[i], sz[i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(nouts))]</span>
<span id="cb45-6"></span>
<span id="cb45-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__call__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x):</span>
<span id="cb45-8">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> layer <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.layers:</span>
<span id="cb45-9">            x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> layer(x)</span>
<span id="cb45-10">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> x</span>
<span id="cb45-11"></span>
<span id="cb45-12">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> parameters(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb45-13">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> [p <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> layer <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.layers <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> layer.parameters()]</span></code></pre></div>
</div>
<p>Based upon our defined classes, let’s initialize our MLP.</p>
<div id="82dcb60d" class="cell" data-execution_count="36">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb46-1">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.0</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>]</span>
<span id="cb46-2">n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> MLP(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb46-3">n(x)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="86">
<pre><code>Value(data=0.4944649312890593)</code></pre>
</div>
</div>
<div id="2b3565cf" class="cell" data-execution_count="37">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb48-1">draw_dot(n(x))</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="87">
<div>
<figure class="figure">
<p><img src="https://vsriram24.github.io/posts/karpathy-1/index_files/figure-html/cell-38-output-1.svg" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Wow, our function is much crazier than our initial examples! Obviously we’re never going to manually backpropagate such an example… let’s have PyTorch do it for us.</p>
<p>We start by defining some sample input data and our desired targets. We then use our baseline MLP to calculate model outputs from the input data.</p>
<div id="6338fd84" class="cell" data-execution_count="38">
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb49-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Example data</span></span>
<span id="cb49-2">xs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb49-3">    [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.0</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>],</span>
<span id="cb49-4">    [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.0</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>],</span>
<span id="cb49-5">    [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>],</span>
<span id="cb49-6">    [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>]</span>
<span id="cb49-7">]</span>
<span id="cb49-8"></span>
<span id="cb49-9">ys <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#desired targets</span></span>
<span id="cb49-10"></span>
<span id="cb49-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Apply our MLP to predict y from x</span></span>
<span id="cb49-12">ypred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [n(x) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> xs]</span>
<span id="cb49-13">ypred</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="88">
<pre><code>[Value(data=0.4944649312890593),
 Value(data=0.40977958134154474),
 Value(data=-0.4050151100259451),
 Value(data=0.3923524132012742)]</code></pre>
</div>
</div>
<p>We can compare our model outputs to the expected outputs using a loss function such as <a href="https://en.wikipedia.org/wiki/Mean_squared_error">mean squared error</a> (MSE).</p>
<div id="2e72e23d" class="cell" data-execution_count="39">
<div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb51-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># loss will measure how good our neural net is</span></span>
<span id="cb51-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># let's do mean squared error</span></span>
<span id="cb51-3">loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>((yout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> ygt)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> ygt, yout <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(ys, ypred))</span>
<span id="cb51-4">loss</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="89">
<pre><code>Value(data=2.96628678270387)</code></pre>
</div>
</div>
<p>Now let’s backpropagate (automatically this time)!</p>
<div id="b7597e28" class="cell" data-execution_count="40">
<div class="sourceCode cell-code" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb53-1">loss.backward()</span></code></pre></div>
</div>
<p>If the gradient of a weight is positive, then decreasing the weight will decrease the overall loss. Similarly, if the gradient is negative, then increasing the weight will decrease the loss.</p>
<div id="b2893698" class="cell" data-execution_count="41">
<div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb54-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If this gradient is positive, then decreasing this weight will decrease our loss</span></span>
<span id="cb54-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If this is negative, then increasing this weight will decrease our loss</span></span>
<span id="cb54-3">n.layers[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].neurons[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].w[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].grad</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="91">
<pre><code>-1.2640701291368466</code></pre>
</div>
</div>
<div id="d2aa9743" class="cell" data-execution_count="42">
<div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb56-1">n.layers[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].neurons[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].w[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].data</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="92">
<pre><code>-0.9567063145203327</code></pre>
</div>
</div>
<p>For every parameter in our neural network, let’s change the weights slightly to reduce the overall loss. We increase the weight for negative gradients and decrease the weight for positive gradients.</p>
<div id="824f7e5b" class="cell" data-execution_count="43">
<div class="sourceCode cell-code" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb58-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># for every parameter in our neural net, let's change the weights slightly to reduce the loss</span></span>
<span id="cb58-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># increase for negative grad, decrease for positive grad</span></span>
<span id="cb58-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> n.parameters():</span>
<span id="cb58-4">    p.data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>p.grad</span></code></pre></div>
</div>
<p>Our overall loss should have gone down a bit now. Let’s recalculate it.</p>
<div id="3d7062af" class="cell" data-execution_count="44">
<div class="sourceCode cell-code" id="cb59" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb59-1">ypred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [n(x) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> xs]</span>
<span id="cb59-2">loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>((yout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> ygt)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> ygt, yout <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(ys, ypred))</span>
<span id="cb59-3">loss</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="94">
<pre><code>Value(data=2.6726876872891854)</code></pre>
</div>
</div>
<div id="930f41d5" class="cell" data-execution_count="45">
<div class="sourceCode cell-code" id="cb61" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb61-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Propagate</span></span>
<span id="cb61-2">loss.backward()</span></code></pre></div>
</div>
<div id="f8f35ae1" class="cell" data-execution_count="46">
<div class="sourceCode cell-code" id="cb62" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb62-1">ypred</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="96">
<pre><code>[Value(data=0.4993403271200778),
 Value(data=0.3198034181833698),
 Value(data=-0.45493607758790167),
 Value(data=0.38108818311718595)]</code></pre>
</div>
</div>
<p>Nice, we’re able to train our data better now. Let’s formalize this process of updating gradients in a loop. This is the same thing as “<a href="https://en.wikipedia.org/wiki/Stochastic_gradient_descent">stochastic gradient descent</a>”.</p>
<div id="c63eae39" class="cell" data-execution_count="47">
<div class="sourceCode cell-code" id="cb64" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb64-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Reset the neural net</span></span>
<span id="cb64-2">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.0</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>]</span>
<span id="cb64-3">n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> MLP(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb64-4">n(x)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="97">
<pre><code>Value(data=0.34934876482956906)</code></pre>
</div>
</div>
<div id="b0fea047" class="cell" data-execution_count="48">
<div class="sourceCode cell-code" id="cb66" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb66-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize input data and desired targets</span></span>
<span id="cb66-2">xs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb66-3">    [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.0</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>],</span>
<span id="cb66-4">    [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.0</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>],</span>
<span id="cb66-5">    [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>],</span>
<span id="cb66-6">    [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>]</span>
<span id="cb66-7">]</span>
<span id="cb66-8"></span>
<span id="cb66-9">ys <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>]</span></code></pre></div>
</div>
<div id="5110a8e8" class="cell" data-execution_count="49">
<div class="sourceCode cell-code" id="cb67" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb67-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 20 iterations</span></span>
<span id="cb67-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> k <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>):</span>
<span id="cb67-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># forward pass</span></span>
<span id="cb67-4">    ypred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [n(x) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> xs]</span>
<span id="cb67-5">    loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>((yout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> ygt)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> ygt, yout <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(ys, ypred))</span>
<span id="cb67-6"></span>
<span id="cb67-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># backward pass</span></span>
<span id="cb67-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> n.parameters():</span>
<span id="cb67-9">        p.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span></span>
<span id="cb67-10">    loss.backward()</span>
<span id="cb67-11"></span>
<span id="cb67-12">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># update</span></span>
<span id="cb67-13">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># "stochastic gradient descent"</span></span>
<span id="cb67-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> n.parameters():</span>
<span id="cb67-15">        p.data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> p.grad</span>
<span id="cb67-16"></span>
<span id="cb67-17">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(k, loss.data)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>0 8.493929671336291
1 6.992068662805386
2 5.769077247651545
3 4.4735019295768295
4 3.989548688723282
5 3.7147609186944743
6 3.405667943207894
7 2.8620742530053116
8 1.7745806845463523
9 0.7698861574003086
10 0.4457449169022083
11 0.30780024751796564
12 0.23273878356815986
13 0.18590290331973824
14 0.15408948967655905
15 0.13116783996889828
16 0.11392081179247492
17 0.10050481438071963
18 0.08979065153648244
19 0.08104964070586138</code></pre>
</div>
</div>
<div id="f66f6a1b" class="cell" data-execution_count="50">
<div class="sourceCode cell-code" id="cb69" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb69-1">ypred</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="100">
<pre><code>[Value(data=0.9034116586940597),
 Value(data=-0.9567970932148172),
 Value(data=-0.8069423147548922),
 Value(data=0.8194935678632469)]</code></pre>
</div>
</div>
<p>Ta-da! We now understand the intuition behind developing simple neural networks and performing backpropagation to improve their predictive performance!</p>
</section>
<section id="takeaways-and-summary" class="level1">
<h1>Takeaways and summary</h1>
<p>Neural nets are simple mathematical expressions that take input data and weights. Working with neural networks involves a forward pass of input data followed by the application of a loss function.</p>
<p>The goal of a neural network for machine learning is to minimize the output loss to get the model to better predict desired targets. Backpropagation can be applied from the loss function to determine the gradients of the intermediate weights of the network. We can then tune the weights of these nodes against the gradient (i.e.&nbsp;gradient descent) to improve the predictive performance of the model.</p>
<p>Simulating a blob of neural tissue in this manner can handle all sorts of interesting problems. Generative Pre-trained Transformers (GPTs) uses massive amounts of text from the internet and then predict the next words in a sentence based on context. These are really just fancy neural networks with hundreds of billions of parameters. Different models may use different loss functions and different methods for gradient descent, but the underlying concepts are all consistent.</p>
<p>This concludes my walkthrough of Andrej’s first neural networks video tutorial. Until next time, [VS]Coders!</p>


</section>

 ]]></description>
  <category>Tutorials</category>
  <guid>https://vsriram24.github.io/posts/karpathy-1/</guid>
  <pubDate>Mon, 08 Jul 2024 07:00:00 GMT</pubDate>
  <media:content url="https://vsriram24.github.io/posts/karpathy-1/zolaFish.jpeg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>My doctoral research: takeaways and advice</title>
  <dc:creator>Vivek Sriram</dc:creator>
  <link>https://vsriram24.github.io/posts/phd-takeaways/</link>
  <description><![CDATA[ 





<p>In the last few posts, I have provided an overview of my PhD in <a href="https://www.med.upenn.edu/gcb/">Biomedical Informatics and Computational Genomics</a> that I completed under the mentorship of Dr.&nbsp;<a href="https://www.biomedinfolab.com">Dokyoon Kim</a> at the University of Pennsylvania Perelman School of Medicine. You can listen to a full presentation of my thesis defense <a href="https://mediasite.med.upenn.edu/mediasite/Play/d78f6d5d76bf4a9c8b673f5c3ba858d61d">here</a>, and you can read the full text of my dissertation <a href="https://repository.upenn.edu/entities/publication/d7441349-baa0-407e-b556-ec96c6930db8">here</a>. In today’s post, I will conclude this series on my doctoral research with my personal takeaways and tips for picking, pursuing, and finishing a PhD program.</p>
<p><img src="https://vsriram24.github.io/posts/phd-takeaways/beach.jpeg" class="img-fluid"></p>
<section id="motivations" class="level1">
<h1>Motivations</h1>
<p>I’ll start this post with explaining some of my personal motivators for pursuing a PhD.</p>
<section id="why-did-i-choose-to-pursue-a-phd-after-my-undergrad" class="level2">
<h2 class="anchored" data-anchor-id="why-did-i-choose-to-pursue-a-phd-after-my-undergrad">Why did I choose to pursue a PhD after my undergrad?</h2>
<p>As I explained in my previous <a href="https://vsriram24.github.io/posts/professional-journey/">post describing my professional journey</a>, I’ve always wanted to be a leader in impactful projects that made a clear benefit in people’s lives. When I was an undergrad, I began to research job opportunities that I found aligned with my interests. Looking at the qualifications required for these roles, and based on further advice from colleagues and mentors in my summer internships, I realized that in order for me to be able to become a leader in an interdisicplinary field in the future, I would have to pursue education beyond my undergraduate degree. Without a Master’s or PhD, I knew that I would eventually hit a wall in my career progression.</p>
<p>I knew earning a graduate degree in the future after working for some time was a completely valid option. But, I also felt that knowing my own personality, it would be harder to bring myself back to school after a few years - I would feel the pay differential more keenly, and I would have to retrain myself to become a student. So, I decided to apply for graduate programs during my senior year of college.</p>
<p>I considered both Master’s and PhD programs, but in weighing the opportunity costs for the computational fields I was considering, I ended up focusing my attention on doctorate degrees. I knew that a PhD would help me transition more clearly into cutting-edge research-based career opportunities. I also ideally wanted to avoid having to pay for a Master’s degree. A PhD program, on the other hand, would support me with a stipend for the duration of the program. Finally, I knew that with a computationally-focused PhD, it would be very reasonable to aim to graduate in about five years, which would be shorter than the average timeline for a PhD in the United States.</p>
<p>I applied only for PhD programs where I knew I would feel content about spending 5+ years of my time. I also applied to one Master’s program in case I didn’t get in to any PhD programs. If nothing worked out for me, my back-up plan would have been to try to find a 1-year Master’s program attached to my undergrad or look for a short-term research position so that I could gain more experience and reapply fully for Master’s programs in the following year. Luckily, PhD admissions worked out, and I found a program that fit with everything I was looking for!</p>
</section>
<section id="why-did-i-apply-for-bioinformatics-programs" class="level2">
<h2 class="anchored" data-anchor-id="why-did-i-apply-for-bioinformatics-programs">Why did I apply for bioinformatics programs?</h2>
<p>I chose to apply for bioinformatics / computational biology programs based on both my interest in the field as well as my likelihood of getting into such a department. I had always been motivated by the concepts of interdisclipinary research involving informational technology. So, I knew that I wanted to pursue a graduate degree related to data science, computer science, or statistics. At the same time, focusing on the area of biomedical research felt like an untapped market to me - there was so much data to work with and so much opportunity to advance the field. My time at Duke also gave me extensive exposure to research in the biomedical informatics domain. As a result, I felt that I would be a competitive applicant for cutting-edge programs in biomedical informatics and computational biology compared to other disciplines. I also felt that even if I wanted to pivot to a career that didn’t involve biomedical applications in the future, having a computational PhD would be sufficient to qualify me for such roles.</p>
</section>
<section id="why-did-i-pick-penn-genomics-and-computational-biology" class="level2">
<h2 class="anchored" data-anchor-id="why-did-i-pick-penn-genomics-and-computational-biology">Why did I pick <a href="https://www.med.upenn.edu/gcb/">Penn Genomics and Computational Biology</a>?</h2>
<p>Coming from a more computational background, I wanted a program that could help me catch up in topics in which I was lacking while also advancing further in my training for subjects where I already had the expertise. Penn GCB offered a very customized approach for selecting coursework, allowing me to take more foundational classes in genetics and molecular biology while pursuing more advanced curriculum in statistics and computer science.</p>
<p>Penn also had multiple professors under whom I could see myself working, as well as access to interesting medical data due to its association with the University of Pennsylvania Health System.</p>
<p>I also considered the happiness of students currently in the program and the livability of Philadelphia. It was apparent to me after my interview weekend that students were able to have fulfilling lives outside of their research, and that Philadelphia would be an exciting (and affordable) city for me to spend my twenties!</p>
<p>Lastly, I appreciated that Penn offered the opportunity to pursue a free <a href="https://doctoral-inside.wharton.upenn.edu/dual-master-of-arts-in-statistics-and-data-sciences/">Master’s degree in Statistics and Data Science</a> from the Wharton School of Business concurrently with my PhD. Given my undergraduate degree in Statistics, I felt that this would be something I could more easily pursue, and that it would also give me a leg up in terms of foundational knowledge and branding in the future if I chose to pivot away from biomedical research.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://vsriram24.github.io/posts/phd-takeaways/picard.jpg" height="300" class="figure-img"></p>
<figcaption>A view of my thinking face for all of my major life decisions during my PhD.</figcaption>
</figure>
</div>
</section>
<section id="how-did-i-choose-my-principal-investigator-pi" class="level2">
<h2 class="anchored" data-anchor-id="how-did-i-choose-my-principal-investigator-pi">How did I choose my Principal Investigator (PI)?</h2>
<p>The highest priority for me in picking my PhD lab was finding a group whose research spoke to me. After this, there were a few pieces that led me to settle on Dr.&nbsp;<a href="https://www.med.upenn.edu/apps/faculty/index.php/g275/p9240045">Dokyoon Kim</a>.</p>
<p>Coming directly out of my undergrad, I knew that I would need a lot of support from my PI. So, I wanted to work with a more junior professor who would have the time to help me when I needed it. I also liked the idea of being one of the first students in a new lab and marking my own path. Based on my rotation, I could tell that my PI was highly attentive, and I had plenty of face-time with him each week, as well as support from post-docs and engineers in the lab whenever I needed it.</p>
<p>Further, I appreciated that my PI had a program set up with internationally-based clinicians to stay in Philadelphia and work in the lab each year. This gave countless opportunities to learn from and collaborate with people in the medical field as well as gain deeper insight into the impact that our projects could have downstream.</p>
<p>Lastly, it just so happened that my rotation with my PI coincided with March 2020, the start of the full impact of the COVID-19 pandemic on the U.S. In the face of entirely remote work for an unknown amount of time, it was immediately apparent to me that my PI would be great about supporting me virtually for however long we were required to work from home.</p>
</section>
<section id="how-did-i-choose-my-dissertation-topic" class="level2">
<h2 class="anchored" data-anchor-id="how-did-i-choose-my-dissertation-topic">How did I choose my dissertation topic?</h2>
<p>To read more about the context and content of my dissertation, you can read my previous posts <a href="https://vsriram24.github.io/posts/phd-context/">here</a> and <a href="https://vsriram24.github.io/posts/phd-papers/">here</a>.</p>
<p>Personally, I’ve always found that I excel the most when I am passionate about the projects I’m pursuing. It is important for me to not only see the motivators of my work, but also its downstream impact. As a result, I wanted to pursue a dissertation that felt intuitive and important.</p>
<p>Coming from a computational background, I did not have a disease area of interest that I had to focus on. Indeed, the biological question at hand was less important to me in my initial choice of project than its impact.</p>
<p>Lastly, I wanted the opportunity to familiarize myself with new types of data, to develop new computational methods and tools that could be used by the biomedical research community, and to see the translational impact of my work on people’s lives.</p>
<p>My rotation project (you can read the published manuscript for this project <a href="https://academic.oup.com/gigascience/article/doi/10.1093/gigascience/giac002/6528770">here</a>) gave me an incredible view into the potential of my research trajectory at the start of my PhD. I loved how intuitive the baseline concepts of network medicine were, and I could see how it had the potential to bring together scientific storytelling aspects of data visualization with advanced technical research in graph-based machine learning. Ultimately, this dissertation topic felt like something that I could truly take full ownership of.</p>
</section>
</section>
<section id="takeaways" class="level1">
<h1>Takeaways</h1>
<p>Here are my personal views on the pros and cons of doing a PhD:</p>
<section id="my-personal-phd-pros" class="level2">
<h2 class="anchored" data-anchor-id="my-personal-phd-pros">My personal PhD pros</h2>
<ul>
<li>I gained strong interdisciplinary expertise in my subject matter:
<ul>
<li>Biomedical informatics, computational genomics, translational science</li>
<li>Data science, software development, statistics, machine learning</li>
</ul></li>
<li>I learned how to conduct independent research and lead the direction of projects</li>
<li>I gained valuable experience in mentoring and teaching others</li>
<li>I was able to network with many amazing colleagues both in academia and industry in my discipline</li>
<li>I was able to keep making income throughout the duration of my degree</li>
<li>After my degree, I am taken more seriously by people in my field whom I meet for the first time</li>
<li>I feel tremendously prepared to take on leadership roles in exciting interdisciplinary research areas in the future</li>
</ul>
</section>
<section id="my-personal-phd-cons" class="level2">
<h2 class="anchored" data-anchor-id="my-personal-phd-cons">My personal PhD cons</h2>
<ul>
<li>Having a PhD will make the jobs that you seek more niche
<ul>
<li>When you pursue a PhD for career advancement, you’re typically seeking a career that is beyond the norm</li>
<li>Bachelor’s-level (and to an extent, Master’s-level) jobs are less individually unique from one another, but they are more broadly available (e.g.&nbsp;software engineer)</li>
<li>Finding the right type of opportunity for a PhD-level individual requires patience</li>
</ul></li>
<li>Pursuing a PhD is a stressful experience!
<ul>
<li>It can be hard to set boundaries between your work and your personal life. There are no clear deadlines for your projects either… your work will expand to fill your time unless you set your own pace</li>
<li>A lot of luck is involved in how quickly you can make progress. There are so many factors out of your control that can affect the success of your experiments and your publications</li>
</ul></li>
<li>There is a financial cost to pursuing a PhD
<ul>
<li>If you can be accepted to a PhD program, then you can be accepted to a much higher-paying job in industry. It is a very personal decision regarding whether or not this drop in salary is worth it</li>
</ul></li>
</ul>
</section>
</section>
<section id="advice" class="level1">
<h1>Advice</h1>
<p>Based upon the experiences I had throughout my PhD, here is my advice for current, incoming, and aspiring PhD students.</p>
<section id="choosing-to-do-a-phd" class="level2">
<h2 class="anchored" data-anchor-id="choosing-to-do-a-phd">Choosing to do a PhD</h2>
<p>The biggest piece of advice I have here is… <strong>make sure you’re doing a PhD for the right reason.</strong></p>
<ul>
<li><p>It’s important to think about why you want a graduate degree in the first place… Becoming a professor? Seeking those longer-term “extraordinary” opportunities in industry? Pure academic curiosity?</p>
<ul>
<li>I know people in all three of these camps, and I think they’re all very justified reasons. There are plenty more reasons to do a PhD outside of these - everyone has their own individual biases that draw them to the experience.</li>
</ul></li>
<li><p>There are also plenty of reasons NOT to do a PhD.</p>
<ul>
<li><p>The worst reason to pursue a PhD is for the “prestige.”</p>
<ul>
<li><p>If you don’t find yourself intrinsically excited about the work you’re doing at the end of the day, then stop wasting your time! It’s not worth spending so much time on something just because you want other people to think more of you.</p></li>
<li><p>A caveat - this lack of intrinsic excitement is different from joining a PhD program and then experiencing lulls in your research where you’re frustrated with your progress. This latter occurrence is totally normal and quite common! At the end of the day, when the experiments work out, you’ll remember why you started your program in the first place.</p></li>
</ul></li>
<li><p>The second worst reason to pursue a PhD is that you don’t know what else to do with your time.</p>
<ul>
<li>Getting a PhD is not a passive experience. You cannot just “let it happen to you.” You have to be active about seeking out opportunities, making connections with others, and progressing on your work in order to succeed.</li>
</ul></li>
<li><p>If you find yourself in either of these camps, then I can guarantee that you will be miserable and that you <strong>will</strong> burn out.</p></li>
</ul></li>
<li><p>If you want to gain more knowledge, there are plenty of more lucrative / less time-intensive ways to do so than pursuing a PhD:</p>
<ul>
<li><p>Pursue a different type of graduate degree</p></li>
<li><p>Find a job relevant to your career</p></li>
<li><p>Join a technical bootcamp</p></li>
<li><p>Take individual classes / online courses</p></li>
<li><p>Pursue independent projects (maybe even start a blog! ;))</p></li>
</ul></li>
<li><p>There will always be a tradeoff when you decide to pursue a PhD. Some doors will open and other doors will close. Think about what’s best for YOU in your life and for your career.</p></li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://vsriram24.github.io/posts/phd-takeaways/yoda.jpeg" height="300" class="figure-img"></p>
<figcaption>My transition from first-year student to graduate. A pandemic and a doctorate degree will make you older AND wiser!</figcaption>
</figure>
</div>
</section>
<section id="selecting-a-program" class="level2">
<h2 class="anchored" data-anchor-id="selecting-a-program">Selecting a program</h2>
<p>I’ve discussed earlier why I personally chose to attend Penn GCB, but here are some good questions to ask yourself when selecting a PhD program to attend:</p>
<ol type="1">
<li><strong>Do you like the work that you’ll be doing?</strong>
<ul>
<li>This is the whole point of a PhD - to do cutting-edge work. You need to like the field you’re in and the opportunities that will be available to you</li>
</ul></li>
<li><strong>Is there more than one professor with whom you could see yourself working?</strong>
<ul>
<li>Even if you have a professor who has committed to taking you on, this point is important to consider. Professors are people too, and they move around universities all the time. Make sure you’re not joining a program just because of a single person - otherwise, if they leave or if you position doesn’t work out, you may find yourself scrambling to find a new professor in the middle of your PhD who may not even align with your research interests.</li>
</ul></li>
<li><strong>Will you have the right level of support for your background?</strong>
<ul>
<li><p>Some people will come with a lot of experience and need less guidance when they start their PhDs. Others will come with minimal experience and need more hand-holding.</p>
<ul>
<li>I was in this second camp - I needed lots of hand-holding for biomedical concepts, and I wanted more independence in my explorations of computer science and statistics</li>
</ul></li>
<li><p>Make sure that the program can help you up-skill as needed (i.e.&nbsp;through coursework, registering for conferences / workshops, connecting you with the right mentors, etc.)</p></li>
</ul></li>
<li><strong>How is work-life harmony handled in this program?</strong>
<ul>
<li><p>I cannot stress this enough - <strong>you are more than your work</strong>. You will need to work hard in a PhD, but you cannot let it absorb your entire life. You will burn out if you do. A PhD is a marathon and not a sprint.</p></li>
<li><p>You won’t necessarily need an active student community, but your peers are the only people who will truly understand the day-to-day of what being a PhD student means. You’ll find that being a part of such a community can be tremendously rewarding, and that your colleagues will be a huge help in your times of need.</p></li>
<li><p>You can gauge the status of how well work boundaries are set by your program through the students you meet during interview/admit visits. Obviously a lot of your work-life balance will come down to the lab you join. But in general, are the students happy with their choice to join this program? Do they have time for things outside of their work?</p></li>
</ul></li>
<li><strong>Do you like where will you be living?</strong>
<ul>
<li><p>Do you like the location of the program? Can you see yourself spending 5+ years there?</p></li>
<li><p>Is the place you’re living affordable given the stipend that the program offers? How are housing/rental costs in the area?</p></li>
<li><p>Is it easy to get to work? If not, how often will you expect to be coming in to campus?</p></li>
</ul></li>
<li><strong>How does the program support career progression and what are the types of opportunities that may be available to you after graduation?</strong>
<ul>
<li><p>What kinds of support systems does the program have for career development?</p>
<ul>
<li>Is there support for internships? Fellowships / grants? Travel opportunities to conferences? Mentorship / teaching opportunities? The ability to earn additional certificates / degrees?</li>
</ul></li>
<li><p>What do alumni from the program usually do after graduation? Where (physically) do they end up? How much did the program and/or their research focus help with finding a job?</p></li>
<li><p>In these situations, when you have an admission to a program and you’re trying to decide on it, it’s great to speak to not only current students but also alumni to get a sense for the pros and cons of the program. You may not know the right questions to ask during these informational interviews, but if the program has a good community, then they’ll be happy to help you out regardless.</p></li>
</ul></li>
</ol>
</section>
<section id="selecting-a-thesis-advisor" class="level2">
<h2 class="anchored" data-anchor-id="selecting-a-thesis-advisor">Selecting a thesis advisor</h2>
<ul>
<li><p>Your PhD advisor doesn’t have to be your <em>best</em> friend, but you should ideally have a friendly relationship with them :) Are they a nice person to work with? Do they have your best interests at heart? Or are they more concerned with using your time and work to advance the standing of their lab?</p></li>
<li><p>Do you like the work that you’d be doing with this PI? It’s important that you don’t pick a lab just because you like the mentor’s personality.</p></li>
<li><p>Pick a PI who will lift you up rather than hold you down</p>
<ul>
<li><p>You want to be challenged, but you don’t want to make life harder for yourself. Your PI is directly responsible for:</p>
<ul>
<li><p>the type of research you explore</p></li>
<li><p>when you graduate</p></li>
<li><p>how much work-life balance you have</p></li>
</ul></li>
<li><p>At the end of the day, a great PI should always be your advocate!</p></li>
</ul></li>
<li><p>Regarding co-mentorships…</p>
<ul>
<li><p>Co-mentorships across two groups can be great if you have the right projects in mind and need both labs’ expertise.</p></li>
<li><p>However, these can also go very poorly if your work aligns more with one group than the other. There’s a high likelihood that you will fall between the cracks and be stuck in your PhD for much longer than you need to be.</p>
<ul>
<li>Sometimes it’ll still work out, especially if both PI’s already collaborate. But in these cases, I personally think it seems unnecessary to have both professors be your mentor. You can always have one of these professors serve on your thesis committee instead.</li>
</ul></li>
<li><p>Here’s my personal opinion… If you are coming in with less experience, I would advise picking a single PI. If you are coming in with more experience and know exactly what type of dissertation you want to work on, then you can consider multiple PIs.</p></li>
</ul></li>
</ul>
</section>
<section id="picking-research-projects" class="level2">
<h2 class="anchored" data-anchor-id="picking-research-projects">Picking research projects</h2>
<ul>
<li><p>Here’s a big “duh” piece of advice – pick a research topic you’re excited about! Why would you spend 5+ years of your life on something that doesn’t get you excited?</p></li>
<li><p>Another point - prioritize skill-building when you can, but don’t prioritize it over progress on your dissertation.</p>
<ul>
<li>You can up-skill in specific areas as much as you want after your PhD. If you are distracted by “side-quests,” you will take longer to graduate when you could have instead finished your degree earlier and kept progressing in your career.</li>
</ul></li>
<li><p>Think about the trade-off between your academic passions and the logistics of your work. Try to find the optimal balance across academic curiosity, skill-building, and time required for the research project.</p>
<ul>
<li><strong>Data generation will always take longer than expected.</strong> The easiest way to cut down on the time needed for your PhD is to work on projects where the data are already generated :)</li>
</ul></li>
</ul>
</section>
<section id="wrapping-up-your-phd" class="level2">
<h2 class="anchored" data-anchor-id="wrapping-up-your-phd">Wrapping up your PhD</h2>
<ul>
<li><p>In my personal opinion, ending a PhD is an exercise in self-confidence and believing in oneself. Ultimately, completing your PhD means knowing how to advocate for yourself.</p>
<ul>
<li><p>This can be easier or harder depending on your PI and your thesis committee. Some PIs / committees will be on the same page as you. They may even say themselves that it’s time for you to defend.</p></li>
<li><p>Others will not tell you they think you are ready to leave. It is up to you to justify in your committee meetings why you feel qualified to defend and graduate.</p></li>
</ul></li>
<li><p>Here’s my biggest indicator for when it’s time to graduate - when you no longer feel that you NEED guidance from your superiors.</p>
<ul>
<li>You don’t need to feel that you have nothing more to learn. In fact, pursuing a PhD will teach you that you always have more to learn!</li>
<li>You don’t even have to have fulfilled all the goals of your dissertation… the aims that you come up with at the start of your disseration are somewhat arbitrary benchmarks.</li>
<li>Instead… Are you able to devise a full research project concept and methodology? Can you procure the right data and follow through on the analysis? Are you able to communicate your results in a cogent, impactful manner?</li>
</ul></li>
<li><p>I hit a point toward the end of my PhD where I felt I could still keep learning and exploring, but I was coming up with all of the directions of the exploration myself. In other words, I was an independent researcher! This was my cue to wrap up and defend.</p></li>
</ul>
<hr>
<p>With that, we’ve reached the conclusion of my series on my doctoral research! If you’ve read this far, I hope you found the information I shared to be useful. The process of picking, starting, and completing a PhD is a tremendous challenge, and if you’re struggling at any point with any of the concepts I’ve covered today, feel free to reach out to me on <a href="https://www.linkedin.com/in/vivek-sriram/">LinkedIn</a> or shoot me an email at <a href="mailto:vivek.sriram@gmail.com">vivek.sriram@gmail.com</a>! I am always happy to chat and offer my two cents.</p>
<p>And a last reminder… as I’ve said earlier in this post - <strong>you are not your work!</strong> Regardless of the stressors and major decisions that surround you, never forget to remember what matters most at the end of the day: your personal happiness and well-being. Make sure to take time to enjoy the little things in life, like this squirrel :)</p>
<p><img src="https://vsriram24.github.io/posts/phd-takeaways/squirrel.webp" height="300"></p>
<section id="image-references" class="level3">
<h3 class="anchored" data-anchor-id="image-references">Image References:</h3>
<ul>
<li><a href="https://www.paramountplus.com/shows/star-trek-discovery/photos/1006913/50-terms-you-know-because-of-star-trek/12/">Paramount Plus</a></li>
<li><a href="https://cheezburger.com/10708485/thirty-phd-memes-for-the-grad-student-whos-checked-the-eff-out">Memebase.com</a></li>
<li><a href="https://www.businessinsider.com/photographer-captured-moment-squirrel-stopped-to-smell-daisy-2019-11">Business Insider</a></li>
</ul>


</section>
</section>
</section>

 ]]></description>
  <category>Personal</category>
  <category>Advice</category>
  <guid>https://vsriram24.github.io/posts/phd-takeaways/</guid>
  <pubDate>Mon, 24 Jun 2024 07:00:00 GMT</pubDate>
  <media:content url="https://vsriram24.github.io/posts/phd-takeaways/zolaRainier.jpeg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>My doctoral research: the content</title>
  <dc:creator>Vivek Sriram</dc:creator>
  <link>https://vsriram24.github.io/posts/phd-papers/</link>
  <description><![CDATA[ 





<p>In last week’s post, I provided an overview of the context for my PhD research in <a href="https://www.med.upenn.edu/gcb/">Biomedical Informatics and Computational Genomics</a> that I completed under the mentorship of Dr.&nbsp;<a href="https://www.biomedinfolab.com">Dokyoon Kim</a> at the University of Pennsylvania Perelman School of Medicine. Today’s post will focus on some of the actual content that came out of my research. You can listen to a full presentation of my thesis defense <a href="https://mediasite.med.upenn.edu/mediasite/Play/d78f6d5d76bf4a9c8b673f5c3ba858d61d">here</a>, and you can read the full text of my dissertation <a href="https://repository.upenn.edu/entities/publication/d7441349-baa0-407e-b556-ec96c6930db8">here</a>. Note that all figures featured in this blog post were created using <a href="https://www.biorender.com">BioRender.com</a>.</p>
<p><img src="https://vsriram24.github.io/posts/phd-papers/washington.jpeg" class="img-fluid"></p>
<hr>
<p>As discussed last week, the objective of my dissertation was to apply a <a href="https://www.nature.com/articles/nrg2918">network medicine</a> approach to investigate genetic contributors to disease multimorbidities.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://vsriram24.github.io/posts/phd-papers/overview.png" class="img-fluid figure-img"></p>
<figcaption>Fig 1. An overview of the process of using PheWAS results from an EHR-linked biobank for network medicine</figcaption>
</figure>
</div>
<p>I broke this objective down into three chapters:</p>
<ol type="1">
<li><strong>Creation</strong>: construct and analyze a network of diseases derived from an EHR-linked biobank for the evaluation of genetic similarity between phenotypes</li>
<li><strong>Comparison</strong>. generate and compare different disease networks generated from different populations and from genetic components.</li>
<li><strong>Translation</strong>. extend the conclusions drawn from disease network analysis and comparison to downstream precision medicine applications.</li>
</ol>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://vsriram24.github.io/posts/phd-papers/chapters.png" class="img-fluid figure-img"></p>
<figcaption>Fig 2. The three sub-chapters of my PhD dissertation</figcaption>
</figure>
</div>
<p>In today’s post, I will provide an example manuscript from each of these chapters to provide more insight into some of the work that I did.</p>
<p><strong>Chapter 1. Creation</strong></p>
<p><strong>Example manuscript -</strong> <em>NETMAGE: A human disease phenotype map generator for the network-based visualization of phenome-wide association study results</em></p>
<ul>
<li><p>Disease-disease networks (DDNs), graphs where nodes represent diseases and edges represent associations between diseases, can provide an intuitive way of understanding the relationships between diseases.</p></li>
<li><p>Using summary statistics from a phenome-wide association study (<a href="https://academic.oup.com/bioinformatics/article/26/9/1205/201211">PheWAS</a>), we can generate a corresponding DDN where edges represent shared genetic variants (e.g.&nbsp;SNPs) between diseases.</p></li>
<li><p>Such a network can help us analyze genetic associations across the “<a href="https://academic.oup.com/bfg/article/11/6/533/236949">diseasome</a>,” the landscape of all human diseases, and identify potential genetic influences for disease <a href="https://www.ncbi.nlm.nih.gov/pmc/articles/PMC7613517/#:~:text=Multimorbidity%20refers%20to%20the%20presence,such%20as%20diabetes%20or%20schizophrenia">multimorbidities</a>.</p></li>
<li><p>To improve the ease of network-based analysis of shared genetic components across diseases, we developed the humaN disEase phenoType MAp GEnerator (NETMAGE), a web-based tool that produces interactive DDN visualizations from PheWAS summary statistics. You can try out the tool we developed at the following link: <a href="https://hdpm.biomedinfolab.com/netmage/" class="uri">https://hdpm.biomedinfolab.com/netmage/</a></p>
<ul>
<li>Users can search their generated maps by various attributes and select nodes to view related diseases, associated variants, and various network statistics.</li>
</ul></li>
<li><p>As a test case, we used NETMAGE to construct an example network from <a href="https://www.leelabsg.org/resources">UK BioBank (UKBB) PheWAS summary statistic data</a>. You can explore this network at the following link: <a href="https://hdpm.biomedinfolab.com/ddn/ukbb" class="uri">https://hdpm.biomedinfolab.com/ddn/ukbb</a></p>
<ul>
<li>Our map correctly displayed previously identified disease comorbidities from the UKBB and identified concentrations of hub diseases in the endocrine/metabolic and circulatory disease categories.</li>
</ul></li>
<li><p>By examining the associations between diseases in our map, we can identify potential genetic explanations for the relationships between diseases and better understand the underlying architecture of the human diseasome.</p></li>
<li><p>You can read the published manuscript for this project <a href="https://academic.oup.com/gigascience/article/doi/10.1093/gigascience/giac002/6528770?login=false">here</a>.</p></li>
</ul>
<p><strong>Chapter 2. Comparison</strong></p>
<p><strong>Example manuscript -</strong> <em>The interplay of sex and genotype in disease associations: a comprehensive network analysis in the UK Biobank</em></p>
<ul>
<li><p>Given that many individual diseases exhibit sex-specific differences in their genetic influences (also known as “genotype-by-sex” or “<a href="https://pubmed.ncbi.nlm.nih.gov/8314069/">GxS</a>” effects), we aimed to determine whether disease multimorbidities are also influenced by GxS interactions.</p></li>
<li><p>Through the comparison of sex-stratified DDNs, we investigated differences across the sexes in patterns of shared genetic architecture between diseases.</p></li>
<li><p>Using <a href="https://datashare.ed.ac.uk/handle/10283/3908">sex-stratified phenome-wide association study summary data from the UK Biobank</a>, we built male- and female-specific DDNs for 103 different diseases.</p></li>
<li><p>We compared our networks using the network comparison methods highlighted in figure 3:</p></li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://vsriram24.github.io/posts/phd-papers/gxsOverview.png" class="img-fluid figure-img"></p>
<figcaption>Fig 3. Overview of network comparison methods for comparing sex-stratified DDNs</figcaption>
</figure>
</div>
<ul>
<li>Comparing the two graphs reveals that the diseasomes of males and females are similar to one another in terms of network topology.</li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://vsriram24.github.io/posts/phd-papers/gxsNetworkStats.png" class="img-fluid figure-img"></p>
<figcaption>Table 1. Network statistics for our two sex-stratified DDNs</figcaption>
</figure>
</div>
<ul>
<li>Some diseases, however, seem to exhibit sex-specific influence in cross-phenotype associations. For instance, autoimmune and inflammatory disorders including multiple sclerosis and osteoarthritis are centrally involved only in the female-specific DDN, while cardiometabolic diseases and skin cancer are more prominent only in the male-specific DDN.</li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://vsriram24.github.io/posts/phd-papers/gxsCentralDiseases.png" class="img-fluid figure-img"></p>
<figcaption>Table 2. Most central diseases in our sex-stratified DDNs, based on centrality measures including degree, weighted degree, and betweenness centrality.</figcaption>
</figure>
</div>
<ul>
<li>Notably, discrepancies in embedding distances and clustering patterns across the networks imply a more expansive genetic influence on multimorbidity risk for females than males.</li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://vsriram24.github.io/posts/phd-papers/gxsEdgeSets.png" class="img-fluid figure-img"></p>
<figcaption>Fig 4. Heatmaps of edge sets across disease categories for our two sex-stratified DDNs. Brighter colors indicate more edges shared between disease categories.</figcaption>
</figure>
</div>
<ul>
<li><p>In summary, our analysis affirms the presence of GxS interactions in cross-phenotype associations, emphasizing the continued need for investigation of the role of sex in disease onset and its importance in biomedical discovery and precision medicine research.</p></li>
<li><p>This manuscript is currently under review for publication.</p></li>
</ul>
<p><strong>Chapter 3. Translation</strong></p>
<p><strong>Example chapter -</strong> <em>An enhanced disease network with robust cross-phenotype relationships via variant frequency-inverse phenotype frequency.</em></p>
<ul>
<li>DDNs constructed from PheWAS data offer a unique ability to observe and evaluate associations between diseases from large-scale biomedical data.</li>
<li>These publications all follow a similar approach when constructing a DDN:
<ul>
<li>(a) a single statistical significance level (p-value) is selected to determine associations between diseases and SNPs.</li>
<li>(b) the links between diseases and SNPs are compressed into links between diseases to generate the DDN</li>
<li>(c) a similarity metric such as <a href="https://en.wikipedia.org/wiki/Cosine_similarity">cosine similarity</a> is used to determine how similar two diseases are based on the number of shared associated SNPs</li>
</ul></li>
<li>This process for constructing DDN seems straightforward, but it has the following limitations (see Figure 5):
<ul>
<li>(a) the entire structure of the DDN can vary depending on the selection of significance level threshold in the PheWAS-driven complex relationship.</li>
<li>(b) the effect of individual SNPs on the interactions across more than 2 diseases is masked</li>
<li>(c) the chosen similarity metric can mask the exact amount of similarity between diseases</li>
</ul></li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://vsriram24.github.io/posts/phd-papers/nlpOverview.png" class="img-fluid figure-img"></p>
<figcaption>Fig 5. Overview of current approaches for constructing a DDN and their limitations.</figcaption>
</figure>
</div>
<ul>
<li><p>To address the discussed limitations of previous approaches to developing DDNs, we proposed a new method inspired by natural language processing to generate networks from PheWAS data</p></li>
<li><p>Taking inspiration from the NLP method “term frequency - inverse document frequency” (<a href="https://en.wikipedia.org/wiki/Tf–idf#:~:text=The%20tf–idf%20is%20the,document%20or%20a%20web%20page.">TF-IDF</a>), we propose a new method we call “variant frequency - inverse phenotype frequency” (VF-IPF), which will weight the contributions of SNPs to disease associations. The outcome of this method presents itself as follows:</p>
<ul>
<li><p>If a SNP is significant for only a few diseases, it is upweighted.</p></li>
<li><p>If a SNP is significant for many diseases, it is downweighted (similar to searching for the word “the” in a manuscript)</p></li>
<li><p>If a SNP is not significant for diseases, it is downweighted.</p></li>
</ul></li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://vsriram24.github.io/posts/phd-papers/nlpSteps.png" class="img-fluid figure-img"></p>
<figcaption>Fig 6. An overview of the VF-IPF algorithm</figcaption>
</figure>
</div>
<ul>
<li><p>To test how the proposed method affects the way we represent cross-phenotype associations, we constructed an enhanced disease-disease network (eDDN) using UK biobank PheWAS summary statistics and tested the eDDN with three downstream tasks (see Figure 7), including:</p>
<ol type="1">
<li><p>co-occurrence disease prediction when index disease of interest is given,</p></li>
<li><p>novel disease connection prediction, and</p></li>
<li><p>therapeutic drug prediction based on disease similarity.</p></li>
</ol></li>
</ul>
<p><img src="https://vsriram24.github.io/posts/phd-papers/nlp_ab.png" class="img-fluid"></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://vsriram24.github.io/posts/phd-papers/nlp_c.png" class="img-fluid figure-img"></p>
<figcaption>Fig 7. Downstream tasks for the eDDN</figcaption>
</figure>
</div>
<ul>
<li>Comparing our eDDN’s effectivness at predicting known disease comorbidities compared to other DDNs, we see that our eDDN has the highest <a href="https://www.analyticsvidhya.com/blog/2020/06/auc-roc-curve-machine-learning/#:~:text=The%20Area%20Under%20the%20Curve,the%20positive%20and%20negative%20classes.">AUC</a> (i.e.&nbsp;it has the best performance).</li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://vsriram24.github.io/posts/phd-papers/nlp_auc.png" class="img-fluid figure-img" width="437"></p>
<figcaption>Fig 8. The eDDN can predict disease comorbidities better than standard DDNs</figcaption>
</figure>
</div>
<ul>
<li>Furthermore, we see the utility of the eDDN in evaluating potential options for <a href="https://www.ncbi.nlm.nih.gov/pmc/articles/PMC9945820/#:~:text=Drug%20repurposing%20is%20the%20technique,serendipitous%20process%20that%20happens%20unexpectedly.">drug repurposing</a> in the treatment of rheumatoid arthritis.</li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://vsriram24.github.io/posts/phd-papers/nlp_ra.png" class="img-fluid figure-img"></p>
<figcaption>Fig 9. The eDDN can help with drug repurposing applications, suggesting alternative pre-existing treatments for rheumatoid arthritis.</figcaption>
</figure>
</div>
<ul>
<li><p>In summary, we find that our proposed eDDN more effectively captures genetic associations between diseases from PheWAS data compared to previous approaches.</p></li>
<li><p>This manuscript is currently under review for publication.</p></li>
</ul>
<hr>
<p>Today’s post was meant to give a sample of some of my work during my PhD. To read more about my currently published manuscripts, you can refer to my Google Scholar profile <a href="https://scholar.google.com/citations?user=ZN4ZFuUAAAAJ&amp;hl=en">here</a>.</p>
<p>In next week’s post, I will conclude this series on my PhD work with my personal takeaways from my program as well as tips for current, incoming, and aspiring PhD students, including selecting a program, selecting a thesis advisor, picking projects, and more! Until then~</p>



 ]]></description>
  <category>Personal</category>
  <category>Overviews</category>
  <guid>https://vsriram24.github.io/posts/phd-papers/</guid>
  <pubDate>Mon, 17 Jun 2024 07:00:00 GMT</pubDate>
  <media:content url="https://vsriram24.github.io/posts/phd-papers/zolaRunning.PNG" medium="image"/>
</item>
<item>
  <title>My doctoral research: the background</title>
  <dc:creator>Vivek Sriram</dc:creator>
  <link>https://vsriram24.github.io/posts/phd-context/</link>
  <description><![CDATA[ 





<p>In the next few posts, I will be providing an overview of my PhD in <a href="https://www.med.upenn.edu/gcb/">Biomedical Informatics and Computational Genomics</a> that I completed under the mentorship of Dr.&nbsp;<a href="https://www.biomedinfolab.com">Dokyoon Kim</a> at the University of Pennsylvania Perelman School of Medicine. You can listen to a full presentation of my thesis defense <a href="https://mediasite.med.upenn.edu/mediasite/Play/d78f6d5d76bf4a9c8b673f5c3ba858d61d">here</a>, and you can read the full text of my dissertation <a href="https://repository.upenn.edu/entities/publication/d7441349-baa0-407e-b556-ec96c6930db8">here</a>. Note that all figures featured in this blog post were created using <a href="https://www.biorender.com">BioRender.com</a>. Today’s post will focus on the background context that motivated my research. Without further ado, let’s get started!</p>
<p><img src="https://vsriram24.github.io/posts/phd-context/benfranklin.jpeg" class="img-fluid"></p>
<hr>
<p>Human biology is a complicated field. Millions of cells, cellular components, molecules, and chemicals interact with one another moment by moment to keep us alive each and every day. And while biologists and clinicians have defined a variety of classifications and <a href="https://guides.lib.umich.edu/ontology/ontologies">ontologies</a> to organize and understand these systems, the intricacies of the field continue to require extensive research and investment. Achieving a better understanding of human biology necessitates a unified language.</p>
<p>At the core of human biology and its defined ontologies lies the field of <em>genetics</em>. <a href="https://en.wikipedia.org/wiki/Genetics">Genetics</a> refers to the study of heritable traits (also known as <a href="https://www.genome.gov/genetics-glossary/Phenotype">phenotypes</a>). If we define genetics as the language of biology, then the vocabulary of genetics would be the <a href="https://en.wikipedia.org/wiki/Gene">gene</a> - a unit of heritable information that influences how we develop and operate. Extending the analogy further, the letters of genetics would be the <a href="https://en.wikipedia.org/wiki/Nucleotide">nucleotide</a>, a set of four molecules whose arrangements define different genes. Indeed, differences in individual nucleotides, also known as single-nucleotide variants/polymorphisms or “SNVs/<a href="https://en.wikipedia.org/wiki/Single-nucleotide_polymorphism">SNPs</a>”, are responsible for genetic variation across individuals and can lead to differing phenotypic outcomes. Genetic variation is a significant component of the diversity of life.</p>
<p>Given the complex interactions that occur across biomolecules in our bodies, it becomes apparent that networks of interacting genes drive our ability to live. Human diseases can be thought of as disruptions to these networks. The field of <a href="https://en.wikipedia.org/wiki/Medicine">medicine</a> aims to prevent, alleviate, and cure disease through the maintenance of health and the development of novel therapeutics.</p>
<p>Unfortunately, for the most part, medicine today still operates from a “good enough” perspective - many patients are treated with the same medications without regard for or understanding of differences in their individual backgrounds or health profiles. Indeed, much more can be done to enhance the accuracy and efficacy of treatment.</p>
<p>The field of <a href="https://health.ucdavis.edu/precision-medicine/what-is-precision-medicine.html#:~:text=Precision%20medicine%20is%20the%20intersection,change%20and%20interact%20over%20time.">precision medicine</a> uses large-scale multimodal/<a href="https://www.illumina.com/techniques/multiomics.html#:~:text=Multiomics%20(multiple%20'omics)%20provides,and%20their%20mechanism%20of%20action.">multiomic</a> data to individualize patient care and gain a comprehensive understanding of human health. The goal of precision medicine is to achieve more accurate and precise disease prediction, prevention, treatment, and therapeutics. The field of genomics, involving the study of genetics from a “big data” lens, offers a significant opportunity to advance precision medicine research.</p>
<p><a href="https://www.genomicseducation.hee.nhs.uk/education/core-concepts/what-is-genomics/#:~:text=Put%20simply%2C%20genomics%20is%20the,is%20made%20up%20of%20DNA.">Genomics</a> refers to the study of an individual’s entire set of genes (a.k.a. their genome). We can work with genomic data from large-scale biomedical data, including both electronic health records (EHRs) and patient biobanks. <a href="https://www.healthit.gov/faq/what-electronic-health-record-ehr">EHRs</a>, also known as electronic medical records (EMRs), refer to large clinical databases of patient medical history and clinical data. <a href="https://allofus.nih.gov/funding-and-program-partners/biobank">Biobanks</a>, on the other hand, refer to biomedical databases with large quantities of patient biological samples, often including access to their genetic information. Combining these two data sources into a merged <a href="https://www.ncbi.nlm.nih.gov/pmc/articles/PMC7983809/">EHR-linked biobank</a> provides an extra level of power in the study of genomics and medicine. EHR-linked biobanks offer the ability to identify and evaluate statistically significant genetic contributors to human disease. For instance, a genome-wide or phenome-wide association study (<a href="https://www.nature.com/articles/s43586-021-00056-9">GWAS</a>/<a href="https://pubmed.ncbi.nlm.nih.gov/34982132/">PheWAS</a>) applied to an EHR-linked biobank can identify associations between a variety of diseases and SNPs.</p>
<p>Many research efforts in the field of <a href="https://pubmed.ncbi.nlm.nih.gov/27147087/">precision medicine have used the results of PheWASs</a> to identify genetic contributors to diseases. With such discoveries, patient genetic profiles can be built into diagnosis/treatment pipelines, allowing for the personalization of patient care.</p>
<p>Notably, so far, most precision medicine research efforts that have made their way into the clinic have focused on one disease at a time. However, complex diseases rarely impact patients one-at-a-time. Shared SNPs and genes can contribute to the onset of multiple diseases in a single patient over time. These disease “<a href="https://www.ncbi.nlm.nih.gov/pmc/articles/PMC7613517/#:~:text=Multimorbidity%20refers%20to%20the%20presence,as%20frailty%20or%20chronic%20pain">multimorbidities</a>” can lead to increase healthcare costs, health burdens, and risk of death. Thus, it becomes clear that we must evaluate the genetics of not only individual diseases but also cross-phenotype associations if we wish to gain a deeper understanding of overall patient health.</p>
<p>Given the significance of cross-phenotype associations, the field of “<a href="https://www.nature.com/articles/nrg2918">network medicine</a>” offers a helpful framework to investigate the associations between diseases. Thus, the objective of my dissertation was to apply a “network medicine” approach to investigate genetic contributors to disease multimorbidities:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://vsriram24.github.io/posts/phd-context/overview.png" class="img-fluid figure-img"></p>
<figcaption>Fig 1. An overview of the process of using PheWAS results from an EHR-linked biobank for network medicine</figcaption>
</figure>
</div>
<p>I broke this objective down into three chapters:</p>
<ol type="1">
<li><strong>Creation</strong>: construct and analyze a network of diseases derived from an EHR-linked biobank for the evaluation of genetic similarity between phenotypes</li>
<li><strong>Comparison</strong>. generate and compare different disease networks generated from different populations and from genetic components.</li>
<li><strong>Translation</strong>. extend the conclusions drawn from disease network analysis and comparison to downstream precision medicine applications.</li>
</ol>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://vsriram24.github.io/posts/phd-context/chapters.png" class="img-fluid figure-img"></p>
<figcaption>Fig 2. The three sub-chapters of my PhD dissertation</figcaption>
</figure>
</div>
<p>In the coming week(s), I will go in-depth into the published manuscripts and preprints that correspond to these chapters, as well as my overall takeaways from my PhD research! Till next time~</p>



 ]]></description>
  <category>Personal</category>
  <category>Overviews</category>
  <guid>https://vsriram24.github.io/posts/phd-context/</guid>
  <pubDate>Mon, 10 Jun 2024 07:00:00 GMT</pubDate>
  <media:content url="https://vsriram24.github.io/posts/phd-context/zolaStairs.jpeg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Biomedical Data Science sub-disciplines (v0)</title>
  <dc:creator>Vivek Sriram</dc:creator>
  <link>https://vsriram24.github.io/posts/terminologies/</link>
  <description><![CDATA[ 





<p>Welcome to another week of <em>[VS]Codes</em>! In today’s post, I will be summarizing my personal definitions and interpretations of the various subdisciplines in biomedical data science. Given my prior background and experience in this subject area, I figured that writing this post would be an easy task! However, referencing the literature further made me realize that the boundaries across the subfields of health technology are fairly nebulous. Different departments, organizations, and individuals all have their own opinions of what their work involves. Dr.&nbsp;<a href="https://www.ohsu.edu/people/william-r-hersh-md">Bill Hersh</a> from Oregon Health and Science University has a great paper (all the way back from 2009!) on the need to converge on consistent terminology in the field of biomedical informatics: you can give it a read <a href="https://bmcmedinformdecismak.biomedcentral.com/articles/10.1186/1472-6947-9-24">here</a>.</p>
<p>Given the lack of clarity in the subfields of biomedical data science, my goal today will be to provide my personal interpretation of the breakdown of relevant fields, informed by some of the definitions I’ve collated from external references. This description is absolutely meant to be a first draft of sorts (hence the v0 in the title)… I aim to refine these terms further based on additional input down the road.</p>
<section id="my-priors" class="level1">
<h1>My Priors</h1>
<p>One of my sources of inspiration for this post comes from a rotation mentor of mine during my PhD, Dr.&nbsp;<a href="https://researchers.cedars-sinai.edu/Ryan.Urbanowicz">Ryan Urbanowicz</a>. Ryan is an outstanding educator and has released several useful educational resources related to data science and machine learning in the past (for instance, his video series on <a href="https://www.youtube.com/playlist?list=PLafPhSv1OSDfEqFsBnurxzJbcwZSJA8X4">Machine Learning Essentials for Biomedical Data Science</a>). In my first year of graduate school, I found his Venn diagram of data science terms gave me a lot of clarity as I was starting off - you can refer to his original tweet <a href="https://x.com/DocUrbs/status/1007375834347376642">here</a>. My hope is that this post will provide a similar degree of intuition to those entering the field.</p>
<p><img src="https://vsriram24.github.io/posts/terminologies/docUrbs.jpeg" class="img-fluid"></p>
<p>Another source of inspiration for my definitions comes from the description of my graduate program at the University of Pennsylvania - the “<a href="https://www.med.upenn.edu/gcb/about/">Genomics and Computational Biology</a>” (GCB) graduate group. Here are some snippets from the program’s website that I found relevant to today’s discussion:</p>
<ul>
<li><p>“GCB accomplishes its training goals by administering a comprehensive training program that gives students a broad foundation in the biological and quantitative sciences along with practical experience in computational genomics, experimental genomics, or biomedical informatics.”</p></li>
<li><p>“These disciplines take a holistic approach to ask about the origins, functions, and interactions of whole systems, using both experimental and theoretical work.”</p></li>
<li><p>“The synthesis and integration of biology, computer science, mathematics, statistics, and engineering requires a new generation of scientists that thrives in cross-disciplinary research. This can include molecular, cellular, and organismal biology (including genetics), mathematics, statistics, chemistry, and engineering.”</p></li>
<li><p>“As examples of areas of study one might explore: (a) Complex disease mapping, human genetic variation, and evolution of populations, (b) Genome-scale functional analysis of RNA, protein, and pathways, (c) Biophysical models of molecules and their interactions, (d) Design of novel experimental systems using microfluidics, nano-fabrication, and optics, (e) Development of computational algorithms for genome-scale data, (f) Construction of computational pipelines and software engineering of analysis systems, (g) System-level modeling of cell processes and organismal development, (h) Evolutionary dynamics of genomes, transcriptomes, pathways, and organisms”</p></li>
<li><p>“[Our] mission … is to train the next generation of quantitative scientists with an integrated and deep understanding of the biological basis of health and disease.</p></li>
</ul>
<p>Based on these pieces of information, it is evident that biomedical data science is made up of multiple interdisciplinary, overlapping fields. So, the terms that I define today should not be taken as ground truths - a lot of things are open to personal interpretation.</p>
<p>With all this context out of the way, let’s jump into my personal definitions - I’ll start with terms related to information and data, then explore the distinctions between biomedical informatics and computational biology, and finally conclude with a summary of health tech and biotech.</p>
</section>
<section id="definitions" class="level1">
<h1>Definitions</h1>
<section id="information-and-data" class="level2">
<h2 class="anchored" data-anchor-id="information-and-data">Information and Data</h2>
<p><strong>Information Technology (IT)</strong></p>
<p><em>Information technology (IT)</em> refers to the use of computer systems to manage, process, protect, and exchange information. The overarching goal among its specializations is to use technology systems to solve problems and handle information. [<a href="https://www.coursera.org/articles/what-is-information-technology#">5</a>]</p>
<p><strong>Information Science</strong></p>
<p><em>Information science</em> is the theoretical study of how information is created, organized, managed, stored, retrieved, and used. It is an interdisciplinary field that combines aspects of computer science and information management. [<a href="https://www.si.umich.edu/student-experience/what-information-science">6</a>]</p>
<p><strong>Informatics</strong></p>
<p><em>Informatics</em> refers to the use and implementation of technology systems to analyze and manage information. Its primary focus is its application to specific external domains “for the good of people, organizations, and society”. [<a href="https://ischool.uw.edu/programs/informatics/what-is-informatics">7</a>, <a href="http://nces.ed.gov/ipeds/cipcode/cipdetail.aspx?y=55&amp;cipid=89325">8</a>]</p>
<p><strong>Data Science</strong></p>
<p><em>Data science</em> refers the study of data to extract meaningful insights and acquire knowledge. It is an interdisciplinary field that combines principles from a broad range of fields, including mathematics, statistics, artificial intelligence, and computer engineering, to collect, process, and analyze large amounts of data. There is a stronger focus on predictive modeling and algorithmic design. [<a href="https://aws.amazon.com/what-is/data-science/">9</a>, <a href="https://www.ibm.com/topics/data-science">10</a>, <a href="https://www.nnlm.gov/guides/data-glossary/data-science">11</a>]</p>
<p><strong>Data Analytics</strong></p>
<p><em>Data analysis</em> involves the analysis and examination of large amounts of data to better understand trends in the system being studied. There is a stronger focus on developing tables, visualizations, and overarching products to comprehend the data. [<a href="https://graduate.northeastern.edu/resources/data-analytics-vs-data-science/">12</a>]</p>
<p>Based on the above definitions, I visualize the interplay of information and data as follows:</p>
<p><img src="https://vsriram24.github.io/posts/terminologies/infoTech.png" class="img-fluid"></p>
<p>Information technology serves as the overarching guidebook for computational work. Within IT, information science dictates the way that we collect, store, organize, and manage our data. And finally, under both information technology and information science, data science, data analytics, and informatics intersect with one another, allowing for the development of predictive models and the analysis of data for applications to external domains.</p>
</section>
<section id="biomedical-informatics-and-computational-biology" class="level2">
<h2 class="anchored" data-anchor-id="biomedical-informatics-and-computational-biology">Biomedical Informatics and Computational Biology</h2>
<p><strong>Biomedicine</strong></p>
<p><em>Biomedicine</em> and the biomedical sciences refer to a set of sciences that apply understandings of biology and the natural sciences to develop knowledge, interventions, or technology that are of use in healthcare or public health. [<a href="https://en.wikipedia.org/wiki/Biomedical_sciences#cite_note-1">13</a>]</p>
<section id="biomedical-informatics" class="level3">
<h3 class="anchored" data-anchor-id="biomedical-informatics">Biomedical Informatics</h3>
<p><strong>Biomedical Informatics</strong></p>
<p><em>Biomedical informatics</em> is an interdisciplinary field seeking to study and advance the use of biomedical data to improve individual health, public health, and healthcare. It investigates, simulates, experiments with and translates a wide swath of biological systems to connect basic and clinical research with practical application for the overall betterment of healthcare. [17, 18, 19]</p>
<p><strong>Bioinformatics</strong></p>
<p><em>Bioinformatics</em>, the application of biomedical informatics in cellular and molecular biology (often with a focus on genomics), is a scientific subdiscipline that involves using computer technology to collect, store, analyze, and disseminate biological data and information, such as DNA and amino acid sequences or annotations about those sequences, to increase our understanding of health and disease. [<a href="https://www.ohsu.edu/school-of-medicine/medical-informatics-and-clinical-epidemiology/what-biomedical-informatics">19</a>, <a href="https://www.genome.gov/genetics-glossary/Bioinformatics">20</a>]</p>
<p><strong>Translational Informatics</strong></p>
<p><em>Translational informatics</em>, the application of biomedical informatics to human health, is focused on the study and application of existing biomedical data to bridge new ways to improve diagnosis, staging, prognosis, and treatment of human disease. [<a href="https://www.ohsu.edu/school-of-medicine/medical-informatics-and-clinical-epidemiology/what-biomedical-informatics">19</a>, <a href="https://bmir.stanford.edu/research-groups/translational-informatics.html">21</a>]</p>
<p><strong>Clinical Informatics</strong></p>
<p><em>Clinical informatics</em>, the subdiscipline of biomedical informatics related to patient data (typically from electronic medical records), focuses on the application of informatics to specific clinical subdisciplines, such as healthcare, nursing, dentistry, and pathology. [<a href="https://www.ohsu.edu/school-of-medicine/medical-informatics-and-clinical-epidemiology/what-biomedical-informatics">19</a>, <a href="https://www.usfhealthonline.com/resources/health-informatics/biomedical-informatics/">22</a>]</p>
<p>The subfields of biomedical informatics can be represented in the following hierarchy:</p>
<p><img src="https://vsriram24.github.io/posts/terminologies/bioInfo.png" class="img-fluid"></p>
<p>Bioinformatics is focused on processing the core data of biological systems, translational informatics is focused on the translation from biology to medicine, and clinical informatics is focused on the analysis of medical and healthcare data.</p>
</section>
<section id="computational-biology" class="level3">
<h3 class="anchored" data-anchor-id="computational-biology">Computational Biology</h3>
<p><strong>Computational Biology</strong></p>
<p><em>Computational biology</em> refers to the use of mathematics, statistics, and algorithms to understand biological systems based on data from experimental measurements. Examples of biological questions that may be tackled include what:</p>
<ul>
<li><p>biological tasks are carried out by particular nucleic acid or peptide sequences</p></li>
<li><p>which gene (or genes) when expressed produce a particular phenotype or behavior</p></li>
<li><p>what sequence of changes in gene or protein expression or localization lead to a particular disease</p></li>
<li><p>how do changes in cell organization influence cell behavior. [<a href="https://cbd.cmu.edu/about-us/what-is-computational-biology.html">23</a>]</p></li>
</ul>
<p><strong>Computational Genomics</strong></p>
<p><em>Genomics</em> is a subfield of biomedicine focused on studying the entire set of DNA of an organism. Genomics research involves identifying and characterizing all the genes and functional elements in an organism’s genome as well as how they interact. [<a href="https://www.genome.gov/genetics-glossary/genomics">14</a>, <a href="https://www.illumina.com/techniques/multiomics.html">15</a>] <em>Computational genomics</em> refers to the use of computational and statistical analysis to decipher biology from genome sequences and related data, including both DNA and RNA sequence as well as other “post-genomic” data. [<a href="https://en.wikipedia.org/wiki/Computational_genomics">24</a>]</p>
<p>The following figure shows some of the subfields of biology that can be addressed through computation. Computational genomics could be utilized in all three cases.</p>
<p><img src="https://vsriram24.github.io/posts/terminologies/compBio.png" class="img-fluid"></p>
</section>
<section id="differentiating-biomedical-informatics-and-computational-biology" class="level3">
<h3 class="anchored" data-anchor-id="differentiating-biomedical-informatics-and-computational-biology">Differentiating biomedical informatics and computational biology</h3>
<p>Biomedical informatics and computational biology are very similar terms to one another - both involve the interdisciplinary application of information technology to biomedicine. The key differentiators I see between the two terms are the order of prioritization in disciplines and the nature of the data under consideration.</p>
<p>In biomedical informatics, the focus is on the development computational infrastructure and analysis to handle large-scale biomedical data.</p>
<p>On the other hand, computational biology starts with the focus on a biological experiment. From a biological question, corresponding data are generated, and computational analyses are applied.</p>
<p>Indeed, I see the second word in each phrase as the “order of operations”: biomedical informatics is centered on the informatics, and computational biology is centered on the biology.</p>
<p><img src="https://vsriram24.github.io/posts/terminologies/bioinfoVsCompbio.png" width="695" height="405"></p>
</section>
</section>
<section id="health-technology-and-biotechnology" class="level2">
<h2 class="anchored" data-anchor-id="health-technology-and-biotechnology">Health Technology and Biotechnology</h2>
<p><strong>Health Technology</strong></p>
<p><em>Health technology</em>, or “health tech,” refers to the use of technologies developed for the purpose of improving any and all aspects of the healthcare system. It is focused primarily on the development of healthcare products and services. [<a href="https://builtin.com/healthcare-technology">25</a>]</p>
<p><strong>Health Information Technology</strong></p>
<p><em>Health information technology</em> (health IT) involves the processing, storage, and exchange of health information in an electronic environment. Applications include enhancing the quality of healthcare, preventing medical errors, reducing healthcare costs, and expanding access to healthcare. [<a href="https://www.hhs.gov/hipaa/for-professionals/special-topics/health-information-technology/index.html">26</a>]</p>
<p><strong>Biotechnology</strong></p>
<p><em>Biotechnology</em> (biotech) involves the use of living organisms and/or biological systems to develop or create different products [<a href="https://www.ntnu.edu/ibt/about-us/what-is-biotechnology">27</a>].</p>
<p><strong>Bioengineering</strong></p>
<p><em>Bioengineering</em> involves the application of engineering principles in combination with living organisms and/or biological systems to develop or create different products. These solutions may take the form of devices or computer programs (e.g., simulation of biomedical processes). However, the focus is on the biomedical problem to be solved, not data, information or knowledge. [<a href="https://www.ncbi.nlm.nih.gov/pmc/articles/PMC2814957/">28</a>]</p>
<p><strong>Digital Health</strong></p>
<p><em>Digital health</em> refers to the use of information and communications technologies in medicine and other health professions to manage illnesses and health risks and to promote wellness. [<a href="https://www.ncbi.nlm.nih.gov/books/NBK470260/">29</a>]</p>
<p>I see health technology and biotechnology as synonymous fields to one another, with health tech focused more on advancing human healthcare and biotech focused more on the use of biological systems. The incorporation of IT into health technology yields digital health and health IT, while the incorporation of engineering into biotechnology yields bioengineering.</p>
<p><img src="https://vsriram24.github.io/posts/terminologies/healthVsBioTech.png" class="img-fluid"></p>
</section>
</section>
<section id="conclusions" class="level1">
<h1>Conclusions</h1>
<ul>
<li><p>Data science, data analytics, and informatics can be thought of as complementary terms to one another. On the whole, these terms can pretty much be used interchangeably. However, the real nuance is that data science is focused primarily on the development of models and algorithms, data analytics is focused on data tabulation and visualization, and informatics is focused on the application of data analysis to external sub-domains.</p></li>
<li><p>Computational Biology and Biomedical Informatics are fairly interchangeable - however, I like to think that computational biology prioritizes the impact of the biological question, while biomedical informatics prioritizes the computational systems needed to analyze large-scale biomedical data.</p></li>
<li><p>Health tech and biotech are parallel industries that both involve information technology and biomedicine, with an emphasis on human healthcare in the former and biological systems in the latter.</p></li>
</ul>
<p>Based on these definitions, here is how I would define my own work:</p>
<ul>
<li><p>In my PhD, I pursued computational biology research, with an emphasis on computational systems biology. I made use of both biomedical informatics and computational genomics methods in my work. My biomedical informatics research included both bioinformatics and translational informatics, and my computational methods included informatics, data science, and data analysis.</p></li>
<li><p>Now, as a data scientist at the Fred Hutchinson Cancer Center, my work is centered more broadly on biomedical data science, with an emphasis on the translational and clinical informatics subfields of biomedical informatics. My computational methods included informatics, data science, and data analysis. I have a more explicit focus on health IT/digital health now too.</p></li>
</ul>
<p>Hopefully, today’s post has given you a relatively clear summary of the nuances in biomedical data science. In future posts, I will refine on these definitions and dive deeper into more of the terms described today. Until next week!</p>
</section>
<section id="references" class="level1">
<h1>References</h1>
<ol type="1">
<li>https://bmcmedinformdecismak.biomedcentral.com/articles/10.1186/1472-6947-9-24</li>
<li>https://x.com/DocUrbs/status/1007375834347376642/photo/1</li>
<li>https://dmice.ohsu.edu/hersh/whatis/</li>
<li>https://dmice.ohsu.edu/hersh/whatis/WhatIs01.pdf</li>
<li>https://www.coursera.org/articles/what-is-information-technology#</li>
<li>https://www.si.umich.edu/student-experience/what-information-science</li>
<li>https://ischool.uw.edu/programs/informatics/what-is-informatics</li>
<li>http://nces.ed.gov/ipeds/cipcode/cipdetail.aspx?y=55&amp;cipid=89325</li>
<li>https://aws.amazon.com/what-is/data-science/</li>
<li>https://www.ibm.com/topics/data-science</li>
<li>https://www.nnlm.gov/guides/data-glossary/data-science</li>
<li>https://graduate.northeastern.edu/resources/data-analytics-vs-data-science/</li>
<li>https://en.wikipedia.org/wiki/Biomedical_sciences#cite_note-1</li>
<li>https://www.genome.gov/genetics-glossary/genomics</li>
<li>https://www.illumina.com/techniques/multiomics.html</li>
<li>https://irp.nih.gov/catalyst/19/6/systems-biology-as-defined-by-nih</li>
<li>https://dmice.ohsu.edu/hersh/whatis/WhatIs01.pdf</li>
<li>https://www.usfhealthonline.com/resources/health-informatics/biomedical-informatics/</li>
<li>https://www.ohsu.edu/school-of-medicine/medical-informatics-and-clinical-epidemiology/what-biomedical-informatics</li>
<li>https://www.genome.gov/genetics-glossary/Bioinformatics</li>
<li>https://bmir.stanford.edu/research-groups/translational-informatics.html</li>
<li>https://www.usfhealthonline.com/resources/health-informatics/biomedical-informatics/</li>
<li>https://cbd.cmu.edu/about-us/what-is-computational-biology.html</li>
<li>https://en.wikipedia.org/wiki/Computational_genomics</li>
<li>https://builtin.com/healthcare-technology</li>
<li>https://www.hhs.gov/hipaa/for-professionals/special-topics/health-information-technology/index.html</li>
<li>https://www.ntnu.edu/ibt/about-us/what-is-biotechnology</li>
<li>https://www.ncbi.nlm.nih.gov/pmc/articles/PMC2814957/</li>
<li>https://www.ncbi.nlm.nih.gov/books/NBK470260/</li>
</ol>


</section>

 ]]></description>
  <category>Overviews</category>
  <guid>https://vsriram24.github.io/posts/terminologies/</guid>
  <pubDate>Mon, 03 Jun 2024 07:00:00 GMT</pubDate>
  <media:content url="https://vsriram24.github.io/posts/terminologies/IMG_6833.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Correcting batch effects in single cell RNA-seq data with Monocle 3</title>
  <dc:creator>Vivek Sriram</dc:creator>
  <link>https://vsriram24.github.io/posts/sasc-workshop2/</link>
  <description><![CDATA[ 





<p>In this week’s blog, I’ll be summarizing takeaways and a code example from the Seattle Area Single Cell (<a href="http://www.brotmanbatyinstitute.org/news/seattle-area-single-cell-user-group-to-launch-february-13">SASC</a>) User Group’s second workshop of the year, which was held on May 16th, 2024. Slides from the workshop can be found <a href="https://mcusercontent.com/866d1ce75e95c7523153ac12f/files/269008ef-2e56-30f4-9464-7793817a7a0d/SASC_Presentation_05162024.pdf">here</a>.</p>
<p>The SASC User Group, directed by Dr.&nbsp;<a href="https://www.linkedin.com/in/oneillmb1/">Mary O’Neill</a> at the <a href="http://brotmanbaty.org">Brotman Baty Institute</a>, is designed to create connections and foster community among single-cell researchers at Fred Hutch, UW Medicine, Seattle Children’s, as well as other Seattle-area researchers working with single-cell data. If you are interested in joining the group, you can subscribe to their listserv <a href="https://mailchi.mp/668c21581425/seattle-area-single-cell-sasc">here</a>. The group holds quarterly meetings rotating across the three campuses, each with a different focus. May’s workshop was dedicated to applying batch correction methods using <em>Monocle 3</em> to analyze <a href="https://www.illumina.com/techniques/sequencing/rna-sequencing/ultra-low-input-single-cell-rna-seq.html#:~:text=Single%2Dcell%20sequencing%20is%20a,cell%2Dto%2Dcell%20variation">single-cell RNA-seq</a> (scRNA-seq) data.</p>
<p><img src="https://vsriram24.github.io/posts/sasc-workshop2/SASC.png" class="img-fluid"></p>
<p>All credit for the data and code in this workshop goes to Mary and the folks at the BBI who helped organize this community. I have simply summarized their content and added a few clarifiers in various sections! I claim no significant knowledge myself of working with single cell data - in the future, I hope to release a post that highlights some more of the biological context highlighted through this workshop. You can follow along with the original tutorial and code example at the SASC GitHub page <a href="https://github.com/bbi-lab/SASC/tree/main">here</a>.</p>
<p>And so, with context out of the way, let’s get started!</p>
<hr>
<section id="background" class="level1">
<h1>1. Background</h1>
<p><a href="https://cole-trapnell-lab.github.io/monocle3/">Monocle 3</a> is “an analysis toolkit for single-cell RNA-seq data”, developed by the <a href="https://cole-trapnell-lab.github.io">Trapnell Lab</a> at the University of Washington Department of Genome Sciences.</p>
<p>When analyzing any form of data, especially single cell data, it is important to keep the right sources of variation (see <a href="https://www.nature.com/articles/s41586-023-06422-9">Aquino, Bisiaux, Li et al., Nature 2024</a>). Batch effects refer to technical, non-biological factors that cause variation in data, and must be appropriately addressed to avoid confounding in results.</p>
<p>The best way to get around batch effects is to avoid introducing them in the first place! Nothing can salvage a poor study design. In a similar vein, it is important to determine whether or not there are actually batch effects in the first place that are influencing your data. Sometimes, batch corrections can introduce more artifacts than they alleviate. So, when applying batch correction methods, apply them thoughtfully. Know what they are doing, what to use them for, and where they can lead you astray.</p>
<p>A variety of batch correction methods exist for scRNA-seq data (see <a href="https://www.biorxiv.org/content/10.1101/2024.03.19.585562v1">Antonsson, Melsted, bioRXiv 2024</a>). Generally, single cell analysis falls into two camps:</p>
<ol type="1">
<li><p>Batch correction is only for visualization. The batch category is used as a covariate in downstream analysis</p></li>
<li><p>Batch correction is incorporated into the data processing pipeline. Batch corrected data are used in downstream analysis.</p></li>
</ol>
<p>For our code example, the data we are using represent a subset of heart data generated by the BBI after processing through <a href="https://scale.bio">Scale Biosciences</a>’ and <a href="https://www.parsebiosciences.com/?utm_term=parse%20bio&amp;utm_campaign=SO-Brand&amp;utm_source=adwords&amp;utm_medium=ppc&amp;hsa_acc=2102361796&amp;hsa_cam=13426955429&amp;hsa_grp=132369215427&amp;hsa_ad=559252349451&amp;hsa_src=g&amp;hsa_tgt=kwd-1180951410162&amp;hsa_kw=parse%20bio&amp;hsa_mt=e&amp;hsa_net=adwords&amp;hsa_ver=3&amp;gad_source=1&amp;gbraid=0AAAAAChPTjeBWJ0X988olMLq6sXDSGQfp&amp;gclid=EAIaIQobChMI26DP16mfhgMVIQetBh2-2gwSEAAYASAAEgKMnvD_BwE">Parse Biosciences</a>’ respective single-cell sequencing assays. The same samples are used in both assays - each sample had two different donors. Data were mixed together, and then genetic demultiplexing was performed.</p>
<p>We start off by calling our required packages for analysis. In this case, we are using R version 4.4.0. Refer to the following links (or the <a href="https://github.com/bbi-lab/SASC/tree/main">SASC GitHub page</a>) for help with installing required packages:</p>
<ul>
<li><p><a href="https://www.bioconductor.org/install/">Bioconductor Installation</a></p></li>
<li><p><a href="https://cole-trapnell-lab.github.io/monocle3/docs/installation/">Monocle 3 Installation</a></p></li>
<li><p><a href="https://github.com/theislab/kBET">kBET Installation</a></p></li>
<li><p><a href="https://github.com/immunogenomics/harmony">Harmony Installation</a></p></li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setwd</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"~/Documents/Developer/vsriram24.github.io/posts/sasc-workshop2"</span>)</span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#load required packages</span></span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(monocle3)</span>
<span id="cb1-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb1-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyverse)</span>
<span id="cb1-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(viridis)</span>
<span id="cb1-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(randomcoloR)</span>
<span id="cb1-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(kBET)</span>
<span id="cb1-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(cowplot)</span>
<span id="cb1-11"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(harmony)</span>
<span id="cb1-12"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(uwot)</span>
<span id="cb1-13"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(batchelor)</span></code></pre></div>
</div>
</section>
<section id="reading-in-the-data" class="level1">
<h1>2. Reading in the data</h1>
<p>With our environment ready to go, we start by reading in our input scRNA-seq data. This dataset is in the form of an S4 object, the standard format for representing sequencing data in <em>Monocle 3</em>. Other packages such as <a href="https://satijalab.org/seurat/">Seurat</a> will have their own file formats to represent data.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Read in the cell data set containing a random sub-sampling of 35K barcodes from</span></span>
<span id="cb2-2">sasc <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">readRDS</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"BBI_heart_hs_mix_36601humangenes_35000barcodes.RDS"</span>)</span></code></pre></div>
</div>
<p>We can use the <em>detect_genes</em> function to count how many cells in our data are expressed above a minimum threshold.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">sasc <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">detect_genes</span>(sasc)</span>
<span id="cb3-2"></span>
<span id="cb3-3">expressed <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rowData</span>(sasc)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb3-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">desc</span>(num_cells_expressed))</span></code></pre></div>
</div>
<p>We then use the <em>n.umi</em> attribute from the output of detect_genes to see how many unique molecular identifiers (<a href="https://www.illumina.com/techniques/sequencing/ngs-library-prep/multiplexing/unique-molecular-identifiers.html">UMIs</a>) are in our data.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summary</span>(sasc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>n.umi)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
    100     306     837    2084    2311  179927 </code></pre>
</div>
</div>
<p>Looking at the donor attribute of our data, and we see that there are numerous doublet (appearing for both donors) as well as unassigned (appearing for neither donor) UMIs in our data that may belong to either of our donors.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">table</span>(sasc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>donor)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
         0          1    doublet unassigned 
     16410      14938        274       3378 </code></pre>
</div>
</div>
<p>We are also able to see the breakdown of UMIs processed by our Parse and Scale scRNA-seq assays respectively.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">table</span>(sasc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>batch)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
Parse Scale 
16263 18737 </code></pre>
</div>
</div>
</section>
<section id="quality-control" class="level1">
<h1>3. Quality control</h1>
<p>Now that we have a breakdown of our data, we can perform quality control.</p>
<p>We start by calculating the mitochondrial DNA content in our scRNA-seq data. The presence of mitochondrial DNA (mtDNA) in our data represents <a href="https://kb.10xgenomics.com/hc/en-us/articles/360026508452-How-can-I-exclude-poor-quality-cells-such-as-those-that-show-enrichment-of-MT-genes">low quality calls</a>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Search for genes with "MT" in their name.</span></span>
<span id="cb10-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fData</span>(sasc)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>MT <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grepl</span>(</span>
<span id="cb10-3">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"MT-"</span>, </span>
<span id="cb10-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rowData</span>(sasc)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>gene_short_name</span>
<span id="cb10-5">)</span>
<span id="cb10-6"></span>
<span id="cb10-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">table</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fData</span>(sasc)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>MT)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
FALSE  TRUE 
36588    13 </code></pre>
</div>
</div>
<p>Based upon the mitochondrial DNA content we calculated, we can evaluate the percentage of mitochondrial reads in our data.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pData</span>(sasc)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>MT_reads <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> Matrix<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">colSums</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exprs</span>(sasc)[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fData</span>(sasc)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>MT,])</span>
<span id="cb12-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pData</span>(sasc)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>MT_perc <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pData</span>(sasc)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>MT_reads<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>Matrix<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">colSums</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exprs</span>(sasc))<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span></span>
<span id="cb12-3"></span>
<span id="cb12-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summary</span>(sasc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>MT_perc)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's 
 0.0000  0.1303  0.9560  2.8839  3.2258 61.3861       1 </code></pre>
</div>
</div>
<p>With our calculated mitochondrial percentages, we can start to visualize our data.</p>
<p>Let’s look at a plot of genes by UMIs, colored by mitochondrial percentage.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(</span>
<span id="cb14-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pData</span>(sasc)), </span>
<span id="cb14-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> n.umi, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> num_genes_expressed)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb14-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_wrap</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>batch, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb14-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> MT_perc)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb14-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_light</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb14-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">axis.text.x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_text</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">angle =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">45</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">hjust =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>),</span>
<span id="cb14-8">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">axis.title =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_text</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>),</span>
<span id="cb14-9">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">axis.text.y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_text</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>),</span>
<span id="cb14-10">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">aspect.ratio =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb14-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_color_viridis</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb14-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">xlab</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"UMIs"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb14-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ylab</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Number of Genes Captured"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb14-14">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_log10</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb14-15">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_x_log10</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb14-16">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_abline</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">slope =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"grey"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb14-17">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_hline</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">yintercept =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linetype =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dotted"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb14-18">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_vline</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xintercept =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">300</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linetype =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dotted"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://vsriram24.github.io/posts/sasc-workshop2/index_files/figure-html/unnamed-chunk-9-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>We can see that in spite of the fact that our two samples were identical, different mitochondrial content are exhibited across our assays. In particular, we see a lot of noise for the UMIs that correspond to under 200 genes.</p>
<p>Now let’s look at mitochondrial percentage by donor type.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(</span>
<span id="cb15-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pData</span>(sasc)), </span>
<span id="cb15-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> donor, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> MT_perc)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb15-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_wrap</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>batch, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">drop =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">scales =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"free_x"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb15-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_violin</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> batch)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb15-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_boxplot</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">notch =</span> T, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"white"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">outlier.shape =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb15-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_light</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb15-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">axis.text.x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_text</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">angle =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">45</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">hjust =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>),</span>
<span id="cb15-9">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">axis.title =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_text</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>),</span>
<span id="cb15-10">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">axis.text.y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_text</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb15-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">xlab</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb15-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ylab</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"MT %"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb15-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">legend.position =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Notch went outside hinges
ℹ Do you want `notch = FALSE`?</code></pre>
</div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://vsriram24.github.io/posts/sasc-workshop2/index_files/figure-html/unnamed-chunk-10-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>We again see differences across our assays here in terms of MT percentage - in particular, it seems like we would want to have mitochondrial percentage no greater than 10% in our data.</p>
<p>Now let’s look at UMIs by donor type.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(</span>
<span id="cb17-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pData</span>(sasc)), </span>
<span id="cb17-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> donor, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> n.umi)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb17-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_wrap</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>batch, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">drop =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">scales =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"free_x"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb17-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_violin</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> batch)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb17-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_boxplot</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">notch =</span> T, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"white"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">outlier.shape =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb17-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_light</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb17-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_hline</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">yintercept =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">300</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linetype =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dashed"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"blue"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#change to thresholds</span></span>
<span id="cb17-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">axis.text.x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_text</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">angle =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">45</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">hjust =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>),</span>
<span id="cb17-10">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">axis.title =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_text</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>),</span>
<span id="cb17-11">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">axis.text.y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_text</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb17-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_log10</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb17-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">xlab</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb17-14">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ylab</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"UMIs"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb17-15">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">legend.position =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://vsriram24.github.io/posts/sasc-workshop2/index_files/figure-html/unnamed-chunk-11-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>Here, it seems like data are hard to differentiate under a certain number of UMIs (in this case, 300).</p>
<p>So, let’s establish a QC filter for our data: 300 UMIs, 200 genes, and over 10% mitochondrial content.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Let's remove everything under 300 UMIs, 200 genes, and over 10% mitochondrial percentage</span></span>
<span id="cb18-2">sasc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>qcflag <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ifelse</span>(</span>
<span id="cb18-3">  sasc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>n.umi <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">300</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> </span>
<span id="cb18-4">  sasc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>num_genes_expressed <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> </span>
<span id="cb18-5">  sasc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>MT_perc <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, </span>
<span id="cb18-6">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PASS"</span>, </span>
<span id="cb18-7">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"FAIL"</span></span>
<span id="cb18-8">)</span>
<span id="cb18-9"></span>
<span id="cb18-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">table</span>(sasc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>qcflag)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
 FAIL  PASS 
10180 24820 </code></pre>
</div>
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1">sasc <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> sasc[,sasc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>qcflag <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PASS"</span>] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#filter out failing barcodes</span></span>
<span id="cb20-2">sasc</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>class: cell_data_set 
dim: 36601 24820 
metadata(1): cds_version
assays(1): counts
rownames(36601): ENSG00000243485 ENSG00000237613 ... ENSG00000278817
  ENSG00000277196
rowData names(6): id gene_short_name ... num_cells_expressed MT
colnames(24820): AGGATAATCTCGGCCTTACAGGTCAGCTT 22_60_95__s4 ...
  24_87_10__s1 20_17_34__s4
colData names(12): barcode n.umi ... MT_perc qcflag
reducedDimNames(0):
mainExpName: NULL
altExpNames(0):</code></pre>
</div>
</div>
<p>Let’s also remove UMIs that were mapped to the wrong genome, nonassignable to a donor, or deemed a doublet.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1">sasc <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> sasc[,sasc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>organism <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"human"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> sasc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>donor <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)]</span>
<span id="cb22-2">sasc</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>class: cell_data_set 
dim: 36601 24216 
metadata(1): cds_version
assays(1): counts
rownames(36601): ENSG00000243485 ENSG00000237613 ... ENSG00000278817
  ENSG00000277196
rowData names(6): id gene_short_name ... num_cells_expressed MT
colnames(24216): AGGATAATCTCGGCCTTACAGGTCAGCTT 22_60_95__s4 ...
  24_87_10__s1 20_17_34__s4
colData names(12): barcode n.umi ... MT_perc qcflag
reducedDimNames(0):
mainExpName: NULL
altExpNames(0):</code></pre>
</div>
</div>
<p>Finally, we have our semi-cleaned data!</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">table</span>(sasc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>batch)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
Parse Scale 
11474 12742 </code></pre>
</div>
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">table</span>(sasc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>batch, sasc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>donor)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>       
           0    1 doublet unassigned
  Parse 8637 2837       0          0
  Scale 4506 8236       0          0</code></pre>
</div>
</div>
</section>
<section id="pre-processing-and-data-visualization" class="level1">
<h1>4. Pre-processing and data visualization</h1>
<p>After completing quality control of our data, we can start to pre-process it.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># remove non-expressed/non-captured genes </span></span>
<span id="cb28-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hist</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fData</span>(sasc)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>num_cells_expressed)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://vsriram24.github.io/posts/sasc-workshop2/index_files/figure-html/unnamed-chunk-15-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>We can also conduct feature selection for genes if we want. This step is not necessary in every case, but it can help with reducing computational loads. Here, we filter out genes that are not expressed in at least 25 cells.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">table</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fData</span>(sasc)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>num_cells_expressed <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
FALSE  TRUE 
15315 21286 </code></pre>
</div>
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># filter out genes not expressed in at least 25 cells</span></span>
<span id="cb31-2">sasc <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> sasc[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fData</span>(sasc)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>num_cells_expressed <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, ]</span>
<span id="cb31-3">sasc </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>class: cell_data_set 
dim: 21286 24216 
metadata(1): cds_version
assays(1): counts
rownames(21286): ENSG00000238009 ENSG00000241860 ... ENSG00000278817
  ENSG00000277196
rowData names(6): id gene_short_name ... num_cells_expressed MT
colnames(24216): AGGATAATCTCGGCCTTACAGGTCAGCTT 22_60_95__s4 ...
  24_87_10__s1 20_17_34__s4
colData names(12): barcode n.umi ... MT_perc qcflag
reducedDimNames(0):
mainExpName: NULL
altExpNames(0):</code></pre>
</div>
</div>
<p>Now we apply the <em>estimate_size_factors</em> function from <em>Monocle 3</em> to <a href="https://bioconductor.org/books/3.17/OSCA.basic/normalization.html#">evaluate the relative bias in each cell</a>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb33-1">sasc <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">estimate_size_factors</span>(sasc)</span></code></pre></div>
</div>
<p>After estimating size factors, we can run <em>preprocess_cds</em>, a standardized workflow in the <em>Monocle 3</em> package that normalizes the data by log and size factor to address depth differences, and then calculates a lower dimensional space that will be used as the input for further dimensionality reduction.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb34-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>)</span>
<span id="cb34-2">sasc <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">preprocess_cds</span>(sasc) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#this may take a few minutes</span></span></code></pre></div>
</div>
<p>We can then call <em>reduce_dimensions</em> from <em>Monocle 3</em> on our data to get down to the most relevant components.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb35-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>)</span>
<span id="cb35-2">sasc <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reduce_dimension</span>(sasc) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#this may take a few minutes</span></span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>No preprocess_method specified, using preprocess_method = 'PCA'</code></pre>
</div>
</div>
<p>Now let’s plot the cells in our data (first colored by batch and then by donor)</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb37-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot_cells</span>(sasc, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color_cells_by =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"batch"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>No trajectory to plot. Has learn_graph() been called yet?</code></pre>
</div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://vsriram24.github.io/posts/sasc-workshop2/index_files/figure-html/unnamed-chunk-20-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb39-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot_cells</span>(sasc, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color_cells_by =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"donor"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>No trajectory to plot. Has learn_graph() been called yet?</code></pre>
</div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://vsriram24.github.io/posts/sasc-workshop2/index_files/figure-html/unnamed-chunk-20-2.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>We now have our dimensionality-reduced data! Let’s use k-means clustering to categorize our cells into clusters.</p>
<p>One can (and should) spend a lot of time tweaking their clustering parameters. In this situation, we’ll go with a k of 40 for Leiden clustering. It is advisable to try several k-values and/or resolutions during this exploratory data analysis.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb41-1">sasc <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cluster_cells</span>(</span>
<span id="cb41-2">  sasc, </span>
<span id="cb41-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">k=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span>, </span>
<span id="cb41-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cluster_method=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"leiden"</span>, </span>
<span id="cb41-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">random_seed=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span></span>
<span id="cb41-6">) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#this may take a few minutes</span></span>
<span id="cb41-7"></span>
<span id="cb41-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># add cluster information for each cell</span></span>
<span id="cb41-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">colData</span>(sasc)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>k40_leiden_clusters <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">clusters</span>(sasc) </span>
<span id="cb41-10"></span>
<span id="cb41-11"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot_cells</span>(sasc)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://vsriram24.github.io/posts/sasc-workshop2/index_files/figure-html/unnamed-chunk-21-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>Let’s get the top marker genes based on our Leiden clustering:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb42-1">top_marker_genes <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">top_markers</span>(</span>
<span id="cb42-2">  sasc, </span>
<span id="cb42-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">group_cells_by=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"k40_leiden_clusters"</span></span>
<span id="cb42-4">)</span>
<span id="cb42-5"></span>
<span id="cb42-6">keep <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> top_marker_genes <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb42-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(fraction_expressing <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.30</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb42-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(cell_group) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb42-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">top_n</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, marker_score) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb42-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pull</span>(gene_short_name) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb42-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unique</span>()</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb43-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot_genes_by_group</span>(</span>
<span id="cb43-2">  sasc,</span>
<span id="cb43-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(keep),</span>
<span id="cb43-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">group_cells_by =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"k40_leiden_clusters"</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#"partition", "cluster"</span></span>
<span id="cb43-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ordering_type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"maximal_on_diag"</span>,</span>
<span id="cb43-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max.size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb43-7">)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://vsriram24.github.io/posts/sasc-workshop2/index_files/figure-html/unnamed-chunk-23-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>Let’s do some more data visualization here. We’ll move out of <em>Monocle 3</em> and into <em>ggplot2</em> to improve our flexibility with plotting.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb44-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#add UMAP coordinates to the colData for easy plotting</span></span>
<span id="cb44-2">sasc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>UMAP1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reducedDim</span>(sasc, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"UMAP"</span>)[,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb44-3">sasc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>UMAP2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reducedDim</span>(sasc, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"UMAP"</span>)[,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb45-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#generate a distinguishable color scheme</span></span>
<span id="cb45-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>)</span>
<span id="cb45-3">colpal <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> randomcoloR<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">distinctColorPalette</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">k=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>)</span>
<span id="cb45-4"></span>
<span id="cb45-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(</span>
<span id="cb45-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pData</span>(sasc)), </span>
<span id="cb45-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x=</span>UMAP1, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y=</span>UMAP2, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color=</span>cell_type)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb45-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_wrap</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>batch<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>donor) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb45-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb45-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_bw</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb45-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_color_manual</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values=</span>colpal) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb45-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">legend.position=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bottom"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">aspect.ratio =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">panel.grid=</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_blank</span>()) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb45-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">guides</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">guide_legend</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">override.aes =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)))</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://vsriram24.github.io/posts/sasc-workshop2/index_files/figure-html/unnamed-chunk-25-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>From our visualizations, clusters 2, 3, 4, and 9 all appear to be related cell types - <a href="https://www.ptglab.com/news/blog/atrial-and-ventricular-myocytes/#:~:text=Atrial%20and%20ventricular%20cardiomyocytes%20form,and%20ion%20channels%20(2).">ventricular cardiomyocytes</a>.</p>
<p>We can also see across our four plots that we have clear evidence of both technical (batch) and biological (donor) variation!</p>
</section>
<section id="quantifying-a-batch-effect" class="level1">
<h1>5. Quantifying a batch effect</h1>
<p>Now that we have evidence of a batch effect, let’s quantify it! We’ll make use of the <em>kBET</em> (k-nearest neighbor batch effect test) package from the <a href="https://github.com/theislab/kBET?tab=readme-ov-file">Theis lab</a>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb46-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#kBET - k-nearest neighbour batch effect test</span></span>
<span id="cb46-2">data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reducedDim</span>(sasc)</span>
<span id="cb46-3">batch <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> sasc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>batch</span>
<span id="cb46-4"></span>
<span id="cb46-5">subset_size <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#subsample to 10% of the data for speed</span></span>
<span id="cb46-6">subset_id <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample.int</span>(</span>
<span id="cb46-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(batch), </span>
<span id="cb46-8">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">floor</span>(subset_size <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(batch)), </span>
<span id="cb46-9">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replace=</span><span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb46-10">)</span>
<span id="cb46-11"></span>
<span id="cb46-12"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>)</span>
<span id="cb46-13">batch.estimate <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">kBET</span>(</span>
<span id="cb46-14">  data[subset_id,], </span>
<span id="cb46-15">  batch[subset_id]</span>
<span id="cb46-16">) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#this may take a few minutes</span></span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://vsriram24.github.io/posts/sasc-workshop2/index_files/figure-html/unnamed-chunk-26-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb47-1">batch.estimate<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>summary</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>      kBET.expected kBET.observed kBET.signif
mean    0.002482853     0.9888066           0
2.5%    0.000000000     0.9753086           0
50%     0.002743484     0.9917695           0
97.5%   0.006207133     1.0000000           0</code></pre>
</div>
</div>
<p>Based on our rejection rate plot, it really does seem that we have a batch effect in our data. We can simulate a random batch assignment in our data and look at the same plot to convince ourselves of this observation.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb49-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>)</span>
<span id="cb49-2">randombatch <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(sasc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>batch, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dim</span>(sasc)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>])</span>
<span id="cb49-3">batch.estimate.fake <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">kBET</span>(</span>
<span id="cb49-4">  data[subset_id,], </span>
<span id="cb49-5">  randombatch[subset_id]</span>
<span id="cb49-6">) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#this may take a few minutes</span></span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://vsriram24.github.io/posts/sasc-workshop2/index_files/figure-html/unnamed-chunk-28-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>Alright, so we clearly do have a batch effect!</p>
</section>
<section id="batch-correction" class="level1">
<h1>6. Batch correction</h1>
<p>Since we’ve proven that we have a batch effect in our data, let’s perform batch correction using <em>Monocle 3</em>. We make use of the <em>align_cds</em> function, a wrapper built around the <em>reducedMNN</em> function from the <em>batchelor</em> package developed by the <a href="https://www.ebi.ac.uk/research/marioni/">Marioni Lab</a> at the University of Cambridge.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb50-1"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">### Batch correction built-in to Monocle3</span></span>
<span id="cb50-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>)</span>
<span id="cb50-3">bc_cds <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">align_cds</span>(</span>
<span id="cb50-4">  sasc, </span>
<span id="cb50-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alignment_group =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"batch"</span>, </span>
<span id="cb50-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">k =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span></span>
<span id="cb50-7">) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#this may take a minute</span></span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Aligning cells from different batches using Batchelor.
Please remember to cite:
     Haghverdi L, Lun ATL, Morgan MD, Marioni JC (2018). 'Batch effects in single-cell RNA-sequencing data are corrected by matching mutual nearest neighbors.' Nat. Biotechnol., 36(5), 421-427. doi: 10.1038/nbt.4091</code></pre>
</div>
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb52-1">bc_cds</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>class: cell_data_set 
dim: 21286 24216 
metadata(2): cds_version citations
assays(1): counts
rownames(21286): ENSG00000238009 ENSG00000241860 ... ENSG00000278817
  ENSG00000277196
rowData names(6): id gene_short_name ... num_cells_expressed MT
colnames(24216): AGGATAATCTCGGCCTTACAGGTCAGCTT 22_60_95__s4 ...
  24_87_10__s1 20_17_34__s4
colData names(16): barcode n.umi ... UMAP1 UMAP2
reducedDimNames(3): PCA UMAP Aligned
mainExpName: NULL
altExpNames(0):</code></pre>
</div>
</div>
<p>Based on our ‘aligned’ PCA, we can then call <em>reduce_dimensions</em> to generate a corresponding UMAP.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb54-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># We can run reduce_dimensions to generate a UMAP from the 'aligned' PCA</span></span>
<span id="cb54-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>)</span>
<span id="cb54-3">bc_cds <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reduce_dimension</span>(</span>
<span id="cb54-4">  bc_cds, </span>
<span id="cb54-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">reduction_method =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"UMAP"</span>, </span>
<span id="cb54-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">preprocess_method =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Aligned"</span></span>
<span id="cb54-7">)</span>
<span id="cb54-8"></span>
<span id="cb54-9">sasc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>aligned_UMAP1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reducedDim</span>(bc_cds, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"UMAP"</span>)[,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#save these in our original cds</span></span>
<span id="cb54-10">sasc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>aligned_UMAP2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reducedDim</span>(bc_cds, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"UMAP"</span>)[,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#save these in our original cds</span></span>
<span id="cb54-11"></span>
<span id="cb54-12"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot_cells</span>(bc_cds, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color_cells_by =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"batch"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>No trajectory to plot. Has learn_graph() been called yet?</code></pre>
</div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://vsriram24.github.io/posts/sasc-workshop2/index_files/figure-html/unnamed-chunk-30-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>Finally, we use <em>kBET</em> again to quantitatively verify that we have removed our batch effect from our data.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb56-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Use kBET to quantitatively ask if it removes the batch effect</span></span>
<span id="cb56-2">data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reducedDim</span>(bc_cds, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"UMAP"</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#note that we are running this on the UMAP</span></span>
<span id="cb56-3">batch <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> bc_cds<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>batch</span>
<span id="cb56-4">subset_size <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#subsample to 10% of the data</span></span>
<span id="cb56-5">subset_id <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample.int</span>(</span>
<span id="cb56-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(batch), </span>
<span id="cb56-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">floor</span>(subset_size <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(batch)), </span>
<span id="cb56-8">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replace =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb56-9">)</span>
<span id="cb56-10"></span>
<span id="cb56-11"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>)</span>
<span id="cb56-12">batch.estimate <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">kBET</span>(</span>
<span id="cb56-13">  data[subset_id,], </span>
<span id="cb56-14">  batch[subset_id]</span>
<span id="cb56-15">) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#this may take a few minutes</span></span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://vsriram24.github.io/posts/sasc-workshop2/index_files/figure-html/unnamed-chunk-31-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
<div class="sourceCode cell-code" id="cb57" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb57-1">batch.estimate<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>summary</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>      kBET.expected kBET.observed kBET.signif
mean     0.02403292     0.8678189           0
2.5%     0.01574074     0.8291152           0
50%      0.02331962     0.8683128           0
97.5%    0.03364198     0.9012346           0</code></pre>
</div>
</div>
<p>While the UMAP looks much better, the <em>kBET</em> metric is telling us that there is still a batch effect. If we run <em>kBET</em> on the ‘aligned’ PCs, the rejection rate is still close to 1. Is it possible we introduced artifacts through our batch correction? Let’s try the <em>Harmony</em> package from the <a href="https://immunogenomics.hms.harvard.edu">Raychaudhuri Lab</a> at Harvard and see if anything is different.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb59" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb59-1"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">### Batch correction with Harmony</span></span>
<span id="cb59-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>)</span>
<span id="cb59-3">harm_cds <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">RunHarmony</span>(sasc, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'batch'</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#this may take a few minutes</span></span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Transposing data matrix</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Initializing state using k-means centroids initialization</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Harmony 1/10</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Harmony 2/10</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Harmony 3/10</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Harmony 4/10</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Harmony converged after 4 iterations</code></pre>
</div>
<div class="sourceCode cell-code" id="cb67" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb67-1">harm_cds <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#note the "HARMONY" in reducedDim</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>class: cell_data_set 
dim: 21286 24216 
metadata(2): cds_version citations
assays(1): counts
rownames(21286): ENSG00000238009 ENSG00000241860 ... ENSG00000278817
  ENSG00000277196
rowData names(6): id gene_short_name ... num_cells_expressed MT
colnames(24216): AGGATAATCTCGGCCTTACAGGTCAGCTT 22_60_95__s4 ...
  24_87_10__s1 20_17_34__s4
colData names(18): barcode n.umi ... aligned_UMAP1 aligned_UMAP2
reducedDimNames(3): PCA UMAP HARMONY
mainExpName: NULL
altExpNames(0):</code></pre>
</div>
<div class="sourceCode cell-code" id="cb69" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb69-1">sasc</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>class: cell_data_set 
dim: 21286 24216 
metadata(2): cds_version citations
assays(1): counts
rownames(21286): ENSG00000238009 ENSG00000241860 ... ENSG00000278817
  ENSG00000277196
rowData names(6): id gene_short_name ... num_cells_expressed MT
colnames(24216): AGGATAATCTCGGCCTTACAGGTCAGCTT 22_60_95__s4 ...
  24_87_10__s1 20_17_34__s4
colData names(18): barcode n.umi ... aligned_UMAP1 aligned_UMAP2
reducedDimNames(2): PCA UMAP
mainExpName: NULL
altExpNames(0):</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb71" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb71-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Under the hood, Monocle 3 is using the uwot package to generate UMAPs</span></span>
<span id="cb71-2">harmony_umap <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">umap</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reducedDim</span>(harm_cds, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"HARMONY"</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#this may take a minute</span></span>
<span id="cb71-3">sasc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>harmony_UMAP1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> harmony_umap[,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#save these to our original cds</span></span>
<span id="cb71-4">sasc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>harmony_UMAP2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> harmony_umap[,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#save these to our original cds</span></span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb72" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb72-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Plot</span></span>
<span id="cb72-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(</span>
<span id="cb72-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pData</span>(sasc)), </span>
<span id="cb72-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> harmony_UMAP1, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> harmony_UMAP2, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> batch)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb72-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb72-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_bw</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb72-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_color_viridis</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">discrete=</span>T, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">begin=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">end=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.9</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">option=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb72-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">legend.position=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bottom"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">aspect.ratio =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">panel.grid=</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_blank</span>()) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb72-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">guides</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">guide_legend</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">override.aes =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)))</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://vsriram24.github.io/posts/sasc-workshop2/index_files/figure-html/unnamed-chunk-34-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb73" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb73-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Use kBET to quantitatively ask</span></span>
<span id="cb73-2">data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> harmony_umap <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#note, we could alternatively run kBET at the level of the corrected PCs </span></span>
<span id="cb73-3">batch <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> harm_cds<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>batch</span>
<span id="cb73-4">subset_size <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#subsample to 10% of the data</span></span>
<span id="cb73-5">subset_id <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample.int</span>(</span>
<span id="cb73-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(batch),</span>
<span id="cb73-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">floor</span>(subset_size <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(batch)), </span>
<span id="cb73-8">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replace =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb73-9"></span>
<span id="cb73-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>)</span>
<span id="cb73-11">batch.estimate <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">kBET</span>(data[subset_id,], batch[subset_id]) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#this may take a few minutes</span></span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://vsriram24.github.io/posts/sasc-workshop2/index_files/figure-html/unnamed-chunk-35-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
<div class="sourceCode cell-code" id="cb74" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb74-1">batch.estimate<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>summary</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>      kBET.expected kBET.observed kBET.signif
mean    0.003004115     0.8504115           0
2.5%    0.000000000     0.8106996           0
50%     0.002743484     0.8518519           0
97.5%   0.008230453     0.8973251           0</code></pre>
</div>
</div>
<p>Once again, our UMAP looks better, but our <em>kBET</em> metric suggests that it is still far from perfect.</p>
<p>So what benefit does batch correction offer? This is debatable, but certainly one thing it can do is help in identifying cell types. In our case, our toy dataset already had annotated cell types, but if we didn’t know these ahead of time, batch correction could help us identify them.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb76" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb76-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#cluster cells that have been aligned and plot these on our original UMAP</span></span>
<span id="cb76-2">bc_cds <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cluster_cells</span>(</span>
<span id="cb76-3">  bc_cds, </span>
<span id="cb76-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">k =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span>, </span>
<span id="cb76-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cluster_method =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"leiden"</span>, </span>
<span id="cb76-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">random_seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span></span>
<span id="cb76-7">) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#this may take a few minutes</span></span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb77" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb77-1">sasc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>aligned_clusters <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">clusters</span>(bc_cds) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#save to original cds object</span></span>
<span id="cb77-2">sasc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>aligned_partitions <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">partitions</span>(bc_cds) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#save to original cds object</span></span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb78" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb78-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(</span>
<span id="cb78-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pData</span>(sasc)), </span>
<span id="cb78-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> UMAP1, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> UMAP2, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> k40_leiden_clusters)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb78-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb78-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_bw</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb78-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_color_manual</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values =</span> colpal) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb78-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">legend.position =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bottom"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">aspect.ratio =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">panel.grid =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_blank</span>()) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb78-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">guides</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">guide_legend</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">override.aes =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)))</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://vsriram24.github.io/posts/sasc-workshop2/index_files/figure-html/unnamed-chunk-38-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb79" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb79-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">colData</span>(sasc)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb79-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(cell_type) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb79-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count</span>(aligned_partitions) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb79-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">spread</span>(aligned_partitions, n)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 12 × 6
# Groups:   cell_type [12]
   cell_type                   `1`   `2`   `3`   `4`   `5`
   &lt;fct&gt;                     &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;
 1 Adipocyte                     1    NA    NA    63    NA
 2 Atrial Cardiomyocyte          5    NA    NA    NA    NA
 3 Cytoplasmic Cardiomyocyte  1368    16     3     2     3
 4 Endothelium                2309     9   238    NA    31
 5 Fibroblast                 2666     6     4    NA     1
 6 Lymphocyte                  192    NA    NA    NA    NA
 7 Macrophage                 1752     4    11    NA    NA
 8 Neuronal                    445     4     2    NA    NA
 9 Pericyte                    280   880     2     1    NA
10 Unknown                    2981    71    34    15    17
11 Vascular Smooth Muscle      116    87     1    NA    NA
12 Ventricular Cardiomyocyte 10556    15     1    23     1</code></pre>
</div>
</div>
<p>Even with our imperfect batch correction methods, our analysis has started to show us that some of our original clusters are related (ventricular cardiomyocytes).</p>
</section>
<section id="differential-gene-expression" class="level1">
<h1>7. Differential gene expression</h1>
<p>We are going to focus specifically on the ventricular cardiomyocytes for the rest of this code example. We start by subsetting our data down to ventricular cardiomyocytes that belong to clusters 2, 3, 4, and 9.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb81" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb81-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#combine batch and donor as a new column </span></span>
<span id="cb81-2">sasc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>id <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(sasc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>batch, sasc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>donor, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_"</span>)</span>
<span id="cb81-3"></span>
<span id="cb81-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#subset ventricular cardiomyocyte data only </span></span>
<span id="cb81-5">cds_vent <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> sasc[,sasc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>cell_type <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Ventricular Cardiomyocyte"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span></span>
<span id="cb81-6">                   sasc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>k40_leiden_clusters <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"3"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"4"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"9"</span>)]</span></code></pre></div>
</div>
<p>Differential expression analysis can take a long time, so we will run the following code on a subset of pre-defined genes.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb82" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb82-1">gene_list <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"LINC00486"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"TTN"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"LINC-PINT"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"TAS2R14"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"MT-CO1"</span>,</span>
<span id="cb82-2">               <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"MT-ND4"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"FN1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"LAMA2"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"XIST"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PDK4"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ZBTB16"</span>,</span>
<span id="cb82-3">               <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PPP1R3E"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"TMTC1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"NT5DC3"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"RBX1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"MRPL45"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ESR2"</span>,</span>
<span id="cb82-4">               <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"TUBGCP4"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"MYH7"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"MYL2"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"MB"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ACTC1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"TPM1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"MYH6"</span>)</span>
<span id="cb82-5"></span>
<span id="cb82-6">cds_subset <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> cds_vent[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rowData</span>(cds_vent)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>gene_short_name <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> gene_list,]</span></code></pre></div>
</div>
<p>We now plot expression levels of these genes, split by donor.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb83" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb83-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot_genes_violin</span>(cds_subset, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">group_cells_by =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"donor"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb83-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">axis.text.x=</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_text</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">angle =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">45</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">hjust =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning in scale_y_log10(): log-10 transformation introduced infinite values.
log-10 transformation introduced infinite values.
log-10 transformation introduced infinite values.</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning: Removed 108135 rows containing non-finite outside the scale range
(`stat_ydensity()`).</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning: Removed 108135 rows containing non-finite outside the scale range
(`stat_summary()`).</code></pre>
</div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://vsriram24.github.io/posts/sasc-workshop2/index_files/figure-html/unnamed-chunk-42-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>It is clear that some of our genes are differentially expressed across our two donors. How do we tell what contribution comes from donors and what comes from assay batch? Let’s build models for our data and compare.</p>
<p>In the donor model, we assume there are no batch effects and the only contributing variable is <em>donor.</em></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb87" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb87-1">donor_model <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fit_models</span>(</span>
<span id="cb87-2">  cds_subset,</span>
<span id="cb87-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">model_formula_str =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"~donor"</span>,</span>
<span id="cb87-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expression_family=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"negbinomial"</span></span>
<span id="cb87-5">)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb88" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb88-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coefficient_table</span>(donor_model) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb88-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(term <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"donor1"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb88-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(q_value <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb88-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(id, gene_short_name, term, q_value, estimate) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb88-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(gene_short_name)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 15 × 5
   id              gene_short_name term     q_value estimate
   &lt;chr&gt;           &lt;chr&gt;           &lt;chr&gt;      &lt;dbl&gt;    &lt;dbl&gt;
 1 ENSG00000159251 ACTC1           donor1 5.46e-125   0.671 
 2 ENSG00000115414 FN1             donor1 0           2.40  
 3 ENSG00000196569 LAMA2           donor1 2.56e- 88  -0.245 
 4 ENSG00000231721 LINC-PINT       donor1 1.67e-258  -1.91  
 5 ENSG00000230876 LINC00486       donor1 4.42e-217   1.14  
 6 ENSG00000198125 MB              donor1 1.38e- 55   0.463 
 7 ENSG00000198804 MT-CO1          donor1 2.12e-214   1.23  
 8 ENSG00000198886 MT-ND4          donor1 1.25e-170   1.13  
 9 ENSG00000092054 MYH7            donor1 1.46e-107  -0.460 
10 ENSG00000111245 MYL2            donor1 1.76e- 22   0.299 
11 ENSG00000004799 PDK4            donor1 5.25e- 29  -0.165 
12 ENSG00000212127 TAS2R14         donor1 6.18e-155  -3.80  
13 ENSG00000155657 TTN             donor1 2.41e- 24  -0.0999
14 ENSG00000229807 XIST            donor1 1.59e-167  -5.55  
15 ENSG00000109906 ZBTB16          donor1 3.44e-178  -0.579 </code></pre>
</div>
</div>
<p>In our second model, we include batch effects as a predictor variable.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb90" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb90-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#controlling for batch effects</span></span>
<span id="cb90-2">donor_batch_model <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fit_models</span>(</span>
<span id="cb90-3">  cds_subset,</span>
<span id="cb90-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">model_formula_str =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"~donor + batch"</span>,</span>
<span id="cb90-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expression_family=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"negbinomial"</span></span>
<span id="cb90-6">)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb91" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb91-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coefficient_table</span>(donor_batch_model) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb91-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(term <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"donor1"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb91-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(q_value <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb91-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(id, gene_short_name, term, q_value, estimate) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb91-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(gene_short_name)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 15 × 5
   id              gene_short_name term     q_value estimate
   &lt;chr&gt;           &lt;chr&gt;           &lt;chr&gt;      &lt;dbl&gt;    &lt;dbl&gt;
 1 ENSG00000159251 ACTC1           donor1 6.11e-  6   0.165 
 2 ENSG00000115414 FN1             donor1 2.00e-200   2.37  
 3 ENSG00000196569 LAMA2           donor1 3.44e- 72  -0.275 
 4 ENSG00000231721 LINC-PINT       donor1 3.45e-  2   0.228 
 5 ENSG00000198125 MB              donor1 4.23e-  2  -0.0950
 6 ENSG00000198804 MT-CO1          donor1 4.17e- 43   0.605 
 7 ENSG00000198886 MT-ND4          donor1 1.48e- 21   0.422 
 8 ENSG00000197616 MYH6            donor1 6.76e- 23   0.303 
 9 ENSG00000092054 MYH7            donor1 7.85e- 16  -0.215 
10 ENSG00000111245 MYL2            donor1 1.12e- 13   0.299 
11 ENSG00000004799 PDK4            donor1 5.56e-243  -0.534 
12 ENSG00000212127 TAS2R14         donor1 9.17e-  3  -0.527 
13 ENSG00000155657 TTN             donor1 2.00e- 36   0.142 
14 ENSG00000229807 XIST            donor1 1.15e-167  -5.56  
15 ENSG00000109906 ZBTB16          donor1 3.01e-  3  -0.0961</code></pre>
</div>
</div>
<p>Comparing these two models, we can see that some of our genes are significantly influenced by the introduction of batch as a predictor.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb93" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb93-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Comparing models of gene expression</span></span>
<span id="cb93-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">compare_models</span>(donor_batch_model, donor_model) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb93-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(gene_short_name, q_value) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb93-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   gene_short_name       q_value
1        LINC00486  0.000000e+00
2              TTN 4.329415e-286
3              FN1  1.000000e+00
4            LAMA2  1.020045e-02
5             PDK4  0.000000e+00
6        LINC-PINT  0.000000e+00
7           ZBTB16 6.655693e-187
8          TAS2R14  0.000000e+00
9            TMTC1  2.872632e-05
10          NT5DC3  5.740679e-02
11            MYL2  1.000000e+00
12         PPP1R3E  4.636225e-01
13            MYH6  1.999277e-62
14            MYH7  5.726891e-61
15            ESR2  2.311010e-02
16           ACTC1 4.529192e-170
17         TUBGCP4  5.352325e-01
18            TPM1  9.684985e-01
19          MRPL45  1.000000e+00
20              MB 4.086623e-205
21            RBX1  1.000000e+00
22            XIST  1.000000e+00
23          MT-CO1 7.757731e-279
24          MT-ND4  0.000000e+00</code></pre>
</div>
</div>
<p>Let’s take a closer look at two example genes: LINC00486 and TTN, both of which have highly significant <a href="https://en.wikipedia.org/wiki/Q-value_(statistics)"><em>q</em>-values</a> (close to 0).</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb95" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb95-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get normalized counts</span></span>
<span id="cb95-2">cntmtx <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">normalized_counts</span>(cds_subset)</span>
<span id="cb95-3">cds_subset<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>LINC00486 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> cntmtx[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ENSG00000230876"</span>,]</span>
<span id="cb95-4">cds_subset<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>TTN <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> cntmtx[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ENSG00000155657"</span>,]</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb96" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb96-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#the case of LINC00486</span></span>
<span id="cb96-2">a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(</span>
<span id="cb96-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pData</span>(cds_subset)), </span>
<span id="cb96-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> donor, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> LINC00486)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb96-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_violin</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> donor)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb96-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_boxplot</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"white"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">outlier.shape =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb96-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_bw</span>() </span>
<span id="cb96-8"></span>
<span id="cb96-9">b <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(</span>
<span id="cb96-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pData</span>(cds_subset)), </span>
<span id="cb96-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> batch, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> LINC00486)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb96-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_violin</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"salmon"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb96-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_boxplot</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"white"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">outlier.shape =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb96-14">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_bw</span>() </span>
<span id="cb96-15"></span>
<span id="cb96-16">c <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(</span>
<span id="cb96-17">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pData</span>(cds_subset)), </span>
<span id="cb96-18">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> id, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> LINC00486, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> donor)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb96-19">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_violin</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb96-20">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_boxplot</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"white"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">outlier.shape =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb96-21">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_bw</span>() </span>
<span id="cb96-22"></span>
<span id="cb96-23"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot_grid</span>(a <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">legend.position =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>),</span>
<span id="cb96-24">          b <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">legend.position =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ylab</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>),</span>
<span id="cb96-25">          c <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">legend.position =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ylab</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>), </span>
<span id="cb96-26">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">labels=</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C"</span>),</span>
<span id="cb96-27">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://vsriram24.github.io/posts/sasc-workshop2/index_files/figure-html/unnamed-chunk-49-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>From our model, we can see that the batch variable was the primary contributor to differences in LINC00486 expression across our data.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb97" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb97-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coefficient_table</span>(donor_model) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb97-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(gene_short_name <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"LINC00486"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> term <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"donor1"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb97-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(id, gene_short_name, term, q_value, estimate) </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 1 × 5
  id              gene_short_name term     q_value estimate
  &lt;chr&gt;           &lt;chr&gt;           &lt;chr&gt;      &lt;dbl&gt;    &lt;dbl&gt;
1 ENSG00000230876 LINC00486       donor1 4.42e-217     1.14</code></pre>
</div>
<div class="sourceCode cell-code" id="cb99" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb99-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coefficient_table</span>(donor_batch_model) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb99-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(gene_short_name <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"LINC00486"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> term <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"donor1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"batchScale"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb99-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(id, gene_short_name, term, q_value, estimate) </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 2 × 5
  id              gene_short_name term       q_value estimate
  &lt;chr&gt;           &lt;chr&gt;           &lt;chr&gt;        &lt;dbl&gt;    &lt;dbl&gt;
1 ENSG00000230876 LINC00486       donor1           1   0.0133
2 ENSG00000230876 LINC00486       batchScale       0   3.64  </code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb101" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb101-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#the case of TNN</span></span>
<span id="cb101-2">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(</span>
<span id="cb101-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pData</span>(cds_subset)), </span>
<span id="cb101-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> donor, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> TTN)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb101-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_violin</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> donor)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb101-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_boxplot</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"white"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">outlier.shape =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb101-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_bw</span>() </span>
<span id="cb101-8"></span>
<span id="cb101-9">y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(</span>
<span id="cb101-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pData</span>(cds_subset)), </span>
<span id="cb101-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> batch, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> TTN)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb101-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_violin</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"salmon"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb101-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_boxplot</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"white"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">outlier.shape =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb101-14">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_bw</span>() </span>
<span id="cb101-15"></span>
<span id="cb101-16">z <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(</span>
<span id="cb101-17">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pData</span>(cds_subset)), </span>
<span id="cb101-18">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> id, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> TTN, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> donor)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb101-19">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_violin</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb101-20">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_boxplot</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"white"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">outlier.shape =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb101-21">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_bw</span>() </span>
<span id="cb101-22"></span>
<span id="cb101-23"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot_grid</span>(</span>
<span id="cb101-24">  x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">legend.position=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>),</span>
<span id="cb101-25">  y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">legend.position=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ylab</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>),</span>
<span id="cb101-26">  z <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">legend.position=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ylab</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>), </span>
<span id="cb101-27">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">labels=</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C"</span>),</span>
<span id="cb101-28">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://vsriram24.github.io/posts/sasc-workshop2/index_files/figure-html/unnamed-chunk-51-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>On the other hand, in the case of TTN, we see that both donor and batch affected its expression.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb102" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb102-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coefficient_table</span>(donor_model) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb102-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(gene_short_name <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"TTN"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> term <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"donor1"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb102-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(id, gene_short_name, term, q_value, estimate) </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 1 × 5
  id              gene_short_name term    q_value estimate
  &lt;chr&gt;           &lt;chr&gt;           &lt;chr&gt;     &lt;dbl&gt;    &lt;dbl&gt;
1 ENSG00000155657 TTN             donor1 2.41e-24  -0.0999</code></pre>
</div>
<div class="sourceCode cell-code" id="cb104" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb104-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coefficient_table</span>(donor_batch_model) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb104-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(gene_short_name <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"TTN"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> term <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"donor1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"batchScale"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb104-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(id, gene_short_name, term, q_value, estimate) </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 2 × 5
  id              gene_short_name term        q_value estimate
  &lt;chr&gt;           &lt;chr&gt;           &lt;chr&gt;         &lt;dbl&gt;    &lt;dbl&gt;
1 ENSG00000155657 TTN             donor1     2.00e-36    0.142
2 ENSG00000155657 TTN             batchScale 0          -0.405</code></pre>
</div>
</div>
</section>
<section id="key-takeaways-and-suggestions" class="level1">
<h1>8. Key takeaways and suggestions</h1>
<ul>
<li><p>Do not blindly apply batch correction! You risk introducing more artifacts than you remove.</p></li>
<li><p>In general, it is better to use batch correction methods for data exploration and visualization rather than analysis.</p></li>
<li><p>If you have a batch effect, model it in your downstream analysis (i.e include it as a covariate) instead of modifying your data directly.</p></li>
</ul>
</section>
<section id="conclusions" class="level1">
<h1>9. Conclusions</h1>
<p>This concludes the content that was covered in the SASC User Group workshop on batch correction. I’d like to give a huge thank you again to Mary and the team at the BBI for organizing this tutorial and sharing it freely with the public! I look forward to covering more from these meetings in the future, as well as sharing my own thoughts and exploration of single cell data down the road.</p>


</section>

 ]]></description>
  <category>Tutorials</category>
  <guid>https://vsriram24.github.io/posts/sasc-workshop2/</guid>
  <pubDate>Mon, 27 May 2024 07:00:00 GMT</pubDate>
  <media:content url="https://vsriram24.github.io/posts/sasc-workshop2/IMG_7480.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>My professional journey</title>
  <dc:creator>Vivek Sriram</dc:creator>
  <link>https://vsriram24.github.io/posts/professional-journey/</link>
  <description><![CDATA[ 





<p>For my first “real” post, I figured it would be a helpful exercise to go through my professional journey and track how I ended up where I currently am. This description is meant to be more of an overview, and I intend to provide more details on individual portions of it in the future.</p>
<p><img src="https://vsriram24.github.io/posts/professional-journey/IMG_8386.JPG" height="500"></p>
<p>Having grown up in the Silicon Valley, I always had a front-row seat to the power and potential of technology to improve people’s lives. All of the biggest tech companies had their headquarters within driving distance from my home, and every day, I could see how they had impacted not only myself but also everyone around me: computers, cellphones, social media, education, automobiles, entertainment… everything was shaped by <a href="https://en.wikipedia.org/wiki/Information_technology">information technology</a>. Both of my parents were in the software industry too, and seeing the productive, fulfilling jobs that they were able to have made me certain that I wanted to involve technology in my future career. Learning how to code from my mother in high school made me feel like I was being imparted with some special kind of magic - entering the world of software engineering truly felt right at my fingertips.</p>
<p>At the same time, growing up in the Silicon Valley felt like growing up in a bubble. I yearned to explore the link between information technology and its downstream applications beyond my baseline understanding of how to write code. So, I sought out more. In high school, I took a breadth of science classes, and I found myself inspired by the concept of “<a href="https://en.wikipedia.org/wiki/Interdisciplinarity">interdisciplinarity</a>”. Instead of being drawn to “information technology,” I was drawn closer and closer to the world of “<a href="https://en.wikipedia.org/wiki/Information_science">information science</a>” and its applications to multiple disciplines, including biology and medicine. My drive for interdisciplinary experiences and my desire to explore a world of technological applications outside of the Bay Area led me to <a href="https://duke.edu">Duke University</a> for my undergraduate education - in fact, one of the mantras of the university was “<a href="https://interdisciplinary.duke.edu">creative thinking across intellectual boundaries</a>”. At Duke, I completed double majors in Computer Science and Statistics. Duke’s affiliated medical campus also gave me chances to explore interdisciplinary applications in the world of <a href="https://www.ncbi.nlm.nih.gov/pmc/articles/PMC2814957/#:~:text=Biomedical%20informatics%20is%20the%20application,to%20problems%20of%20biomedical%20interest.">biomedical informatics</a>, and I pursued multiple research opportunities, including an <a href="https://dukestatsci.github.io/thesis-sp19-sriram-microbiome/index.html">Honor’s thesis</a> for my Statistics degree under the supervision of Dr.&nbsp;<a href="http://www2.stat.duke.edu/~lm186/">Li Ma</a>. I also completed a minor in Computational Biology, taking classes such as <a href="https://courses.cs.duke.edu/spring24/compsci260/">Computational Genomics</a> with Dr.&nbsp;<a href="https://users.cs.duke.edu/~amink/">Alexander Hartemink</a> and <a href="https://donaldlab.cs.duke.edu/Teaching/Seminar18/">Computational Structural Biology</a> with Dr.&nbsp;<a href="https://users.cs.duke.edu/~brd/">Bruce Donald</a>. Lastly, I was lucky to have great summer internship mentors (including Li-Yuan Chern at <a href="https://www.pharmacyclics.com">Pharmacyclics</a> and Drs. <a href="https://wangz10.github.io">Zichen Wang</a> and <a href="https://labs.icahn.mssm.edu/maayanlab/">Avi Ma’ayan</a> at the <a href="https://icahn.mssm.edu/?pk_vid=76db1b7fb968016e171579141885538b">Icahn School of Medicine</a>), who kept me motivated and inspired to stick to my path and pursue an advanced interdisciplinary career.</p>
<p>By the end of my undergrad, I knew that I wasn’t going to enter the traditional computer science recruitment cycle for software engineering roles - I instead applied to doctoral programs in biomedical informatics and computational biology that would allow me to build my knowledge base further and prepare me to become a leader in impactful projects that made a clear benefit in people’s lives. I was lucky to earn an admission with the <a href="https://www.med.upenn.edu/gcb/">Genomics and Computational Biology</a> program at the <a href="https://en.wikipedia.org/wiki/Perelman_School_of_Medicine_at_the_University_of_Pennsylvania">University of Pennsylvania Perelman School of Medicine</a>. Again, great mentors from my classes and research rotations (including Drs. <a href="https://researchers.cedars-sinai.edu/Ryan.Urbanowicz">Ryan Urbanowicz</a> and <a href="https://ritchielab.org/people/marylyn-ritchie">Marylyn Ritchie</a> to name a few) helped advance my training and made me a better researcher and scientist day by day. I am most indebted to my PhD advisor, Dr.&nbsp;<a href="https://www.dbei.med.upenn.edu/bio/dokyoon-kim-phd">Dokyoon Kim</a>, for his support and mentorship throughout my PhD and subsequent post-doctoral position. With his leadership style and work ethic, he was a true role model for me throughout my graduate degree. I also fell in love with the combination of technical research and scientific storytelling that came out of my <a href="https://mediasite.med.upenn.edu/mediasite/Play/d78f6d5d76bf4a9c8b673f5c3ba858d61d">dissertation</a> (to be discussed in a later post). During my PhD, I was able to complete a Master’s degree in Statistics and Data Science from the <a href="https://statistics.wharton.upenn.edu">Wharton School of Business</a> under the supervision of Dr.&nbsp;<a href="https://statistics.wharton.upenn.edu/profile/ayz/">Anderson Zhang</a>, as well as a summer internship as a User Experience Researcher in Health AI/ML under the supervision of Dr.&nbsp;<a href="https://www.microsoft.com/en-us/research/people/amhal/">Mandi Hall</a> with the <a href="https://www.microsoft.com/en-us/research/lab/microsoft-health-futures/">Health Futures</a> team at Microsoft Research. All of these opportunities helped me to refine a set of motivators for my long-term career:</p>
<ul>
<li>impact</li>
<li>connection</li>
<li>passion</li>
<li>leadership</li>
</ul>
<p>These values aided me tremendously in my search for my first job upon the completion of my PhD. Today, I work as a clinical data scientist in the <a href="https://hutchdatascience.org/tr-analytics/">Translational Analytics and Informatics</a> group at the Fred Hutchinson Cancer Center’s Data Science Lab (<a href="https://hutchdatascience.org">DaSL</a>) in Seattle, WA (also to be discussed more in a future post). I am tremendously grateful to be a part of a supportive, driven community of fellow data scientists and researchers as we develop the clinical data infrastructure at Fred Hutch, and I look forward to sharing more about my work and career as the years progress!</p>



 ]]></description>
  <category>Personal</category>
  <guid>https://vsriram24.github.io/posts/professional-journey/</guid>
  <pubDate>Wed, 15 May 2024 07:00:00 GMT</pubDate>
  <media:content url="https://vsriram24.github.io/posts/professional-journey/lifeIsAHighway.png" medium="image" type="image/png" height="192" width="144"/>
</item>
<item>
  <title>Hello world!</title>
  <dc:creator>Vivek Sriram</dc:creator>
  <link>https://vsriram24.github.io/posts/hello-world/</link>
  <description><![CDATA[ 





<p>Hello world, and welcome to my official blog! I’ve had numerous thoughts swirling around in my head over the past several years, but have had trouble formally committing to bringing them out into the world… however, encouragement from colleagues and recent reading (i.e.&nbsp;Dorie Clark’s <a href="https://dorieclark.com/longgame/">The Long Game</a>) have convinced me to finally bring my virtual pen to paper. In particular, I found myself tremendously inspired by the Fred Hutch <a href="https://hutchdatascience.org/news/dasl-culture/">DaSL Culture and Work Style</a> document and the mantra of “ship as soon as you can.” The following graphic does a great job at reminding us how to avoid the pit of perfectionism!</p>
<p><img src="https://vsriram24.github.io/posts/hello-world/daslGoals.png" height="500"></p>
<p>My hopes for this blog are to (a) build a community, (b) share my knowledge, and (c) learn alongside my readers. I aim to write weekly (if not more frequent) posts on a variety of subjects, including:</p>
<ul>
<li>my personal story</li>
<li>advice to others in my field</li>
<li>technical tutorials</li>
<li>subject matter overviews, and</li>
<li>miscellaneous detours</li>
</ul>
<p>I have no expectations that my content will be perfect, but then again, learning from mistakes is one of the best parts of life :)</p>
<p>Given my background and expertise, my general focus will be on the world of biomedical data science and health technology, but the sky is the limit for the topics we may cover!</p>
<p>Thanks for tuning in - I’m delighted to have you along for the ride…</p>



 ]]></description>
  <category>Personal</category>
  <guid>https://vsriram24.github.io/posts/hello-world/</guid>
  <pubDate>Tue, 14 May 2024 07:00:00 GMT</pubDate>
  <media:content url="https://vsriram24.github.io/posts/hello-world/zolaSaysHi.png" medium="image" type="image/png" height="192" width="144"/>
</item>
</channel>
</rss>
