library(ggplot2)
library(tidyverse)
library(data.table)
library(MOFA2)
library(MOFAdata)
utils::data( "CLL_data" )
lapply(CLL_data, dim)
MOFAobject <- create_mofa(CLL_data)
plot_data_overview( MOFAobject )
data_opts <- get_default_data_options( MOFAobject )
model_opts <- get_default_model_options( MOFAobject ) model_opts$num_factors <- 15
data_opts <- get_default_data_options(MOFAobject)
model_opts <- get_default_model_options(MOFAobject)
model_opts$num_factors <- 15
train_opts <- get_default_training_options(MOFAobject)
train_opts$seed <- 1
train_opts$save_interrupted <- TRUE
train_opts$convergence_mode <- "slow"
MOFAobject <- prepare_mofa( MOFAobject,
training_options = train_opts,
model_options = model_opts,
data_options = data_opts )
MOFAobject <- run_mofa( MOFAobject,
outfile="/Users/ogurb/Downloads/MOFA2_CLL.hdf5" )
MOFAobject <- prepare_mofa( MOFAobject,
training_options = train_opts,
model_options = model_opts,
data_options = data_opts )
MOFAobject <- prepare_mofa( MOFAobject,
training_options = train_opts,
model_options = model_opts,
data_options = data_opts )
# Load sample metadata
CLL_metadata <- fread( "ftp://ftp.ebi.ac.uk/pub/databases/mofa/cll_vignette/sample_metadata.txt" )
# Add sample metadata to the model
samples_metadata( MOFAobject ) <- CLL_metadata
plot_factor_cor( MOFAobject )
plot_variance_explained( MOFAobject,
max_r2=15 )
setwd("~/Documents/Developer/vsriram24.github.io/posts/multiomics-fa")
library(ggplot2)
library(tidyverse)
library(data.table)
library(MOFA2)
library(MOFAdata)
utils::data( "CLL_data" )
lapply(CLL_data, dim)
plot_data_overview(MOFAobject)
plot_data_overview(MOFAobject)
data_opts <- get_default_data_options(MOFAobject)
model_opts <- get_default_model_options(MOFAobject)
model_opts$num_factors <- 15
train_opts <- get_default_training_options(MOFAobject)
train_opts$seed <- 1
train_opts$save_interrupted <- TRUE
train_opts$convergence_mode <- "slow"
MOFAobject <- prepare_mofa(
MOFAobject,
training_options = train_opts,
model_options = model_opts,
data_options = data_opts
)
MOFAobject <- run_mofa(
MOFAobject
)
MOFAobject <- prepare_mofa(
MOFAobject,
training_options = train_opts,
model_options = model_opts,
data_options = data_opts
)
setwd("~/Documents/Developer/vsriram24.github.io/posts/multiomics-fa")
library(ggplot2)
library(tidyverse)
library(data.table)
library(MOFA2)
library(MOFAdata)
utils::data( "CLL_data" )
lapply(CLL_data, dim)
MOFAobject <- create_mofa(CLL_data)
plot_data_overview(MOFAobject)
data_opts <- get_default_data_options(MOFAobject)
model_opts <- get_default_model_options(MOFAobject)
model_opts$num_factors <- 15
train_opts <- get_default_training_options(MOFAobject)
train_opts$seed <- 1
train_opts$save_interrupted <- TRUE
train_opts$convergence_mode <- "slow"
MOFAobject <- prepare_mofa(
MOFAobject,
training_options = train_opts,
model_options = model_opts,
data_options = data_opts
)
MOFAobject <- run_mofa(
MOFAobject,
outfile = "~/Documents/Developer/vsriram24.github.io/posts/multiomics-fa/MOFA2_CLL.hdf5"
)
MOFAobject <- run_mofa(
MOFAobject,
outfile = "~/Documents/Developer/vsriram24.github.io/posts/multiomics-fa/MOFA2_CLL.hdf5"
)
library(reticulate)
py_install("mofapy", envname = "mofa_env", method="conda",
conda = "/opt/anaconda/3-5.0.1/bin/conda", pip=TRUE)
py_install("mofapy", envname = "mofa_env", method = "conda", conda = "/opt/anaconda3/bin/conda", pip = TRUE)
setwd("~/Documents/Developer/vsriram24.github.io/posts/multiomics-fa")
library(ggplot2)
library(tidyverse)
library(data.table)
library(MOFA2)
library(MOFAdata)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("MOFA2")
BiocManager::install("MOFA2", force = TRUE)
setwd("~/Documents/Developer/vsriram24.github.io/posts/multiomics-fa")
library(ggplot2)
library(tidyverse)
library(data.table)
library(MOFA2)
library(MOFAdata)
utils::data( "CLL_data" )
lapply(CLL_data, dim)
MOFAobject <- create_mofa(CLL_data)
plot_data_overview(MOFAobject)
data_opts <- get_default_data_options(MOFAobject)
model_opts <- get_default_model_options(MOFAobject)
model_opts$num_factors <- 15
train_opts <- get_default_training_options(MOFAobject)
train_opts$seed <- 1
train_opts$save_interrupted <- TRUE
train_opts$convergence_mode <- "slow"
MOFAobject <- prepare_mofa(
MOFAobject,
training_options = train_opts,
model_options = model_opts,
data_options = data_opts
)
MOFAobject <- run_mofa(
MOFAobject,
outfile = "~/Documents/Developer/vsriram24.github.io/posts/multiomics-fa/MOFA2_CLL.hdf5"
)
# Load sample metadata
CLL_metadata <- fread( "ftp://ftp.ebi.ac.uk/pub/databases/mofa/cll_vignette/sample_metadata.txt" )
# Add sample metadata to the model
samples_metadata( MOFAobject ) <- CLL_metadata
plot_factor_cor(MOFAobject)
# Load sample metadata
CLL_metadata <- fread( "ftp://ftp.ebi.ac.uk/pub/databases/mofa/cll_vignette/sample_metadata.txt" )
# Add sample metadata to the model
samples_metadata( MOFAobject ) <- CLL_metadata
plot_factor_cor(MOFAobject)
setwd("~/Documents/Developer/vsriram24.github.io/posts/multiomics-fa")
library(ggplot2)
library(tidyverse)
library(data.table)
library(MOFA2)
library(MOFAdata)
utils::data( "CLL_data" )
lapply(CLL_data, dim)
MOFAobject <- create_mofa(CLL_data)
plot_data_overview(MOFAobject)
data_opts <- get_default_data_options(MOFAobject)
model_opts <- get_default_model_options(MOFAobject)
model_opts$num_factors <- 15
train_opts <- get_default_training_options(MOFAobject)
train_opts$seed <- 1
train_opts$save_interrupted <- TRUE
train_opts$convergence_mode <- "slow"
MOFAobject <- prepare_mofa(
MOFAobject,
training_options = train_opts,
model_options = model_opts,
data_options = data_opts
)
MOFAobject <- run_mofa(
MOFAobject,
outfile = "~/MOFA2_CLL.hdf5"
)
# Load sample metadata
CLL_metadata <- fread( "ftp://ftp.ebi.ac.uk/pub/databases/mofa/cll_vignette/sample_metadata.txt" )
# Add sample metadata to the model
samples_metadata( MOFAobject ) <- CLL_metadata
plot_factor_cor(MOFAobject)
setwd("~/Documents/Developer/vsriram24.github.io/posts/multiomics-fa")
library(ggplot2)
library(tidyverse)
library(data.table)
library(MOFA2)
library(MOFAdata)
utils::data( "CLL_data" )
lapply(CLL_data, dim)
MOFAobject <- create_mofa(CLL_data)
plot_data_overview(MOFAobject)
data_opts <- get_default_data_options(MOFAobject)
model_opts <- get_default_model_options(MOFAobject)
model_opts$num_factors <- 15
train_opts <- get_default_training_options(MOFAobject)
train_opts$seed <- 1
train_opts$save_interrupted <- TRUE
train_opts$convergence_mode <- "slow"
MOFAobject <- prepare_mofa(
MOFAobject,
training_options = train_opts,
model_options = model_opts,
data_options = data_opts
)
MOFAobject_trained <- run_mofa(
MOFAobject,
outfile = "MOFA2_CLL_trained.hdf5"
)
data_opts <- get_default_data_options(MOFAobject)
model_opts <- get_default_model_options(MOFAobject)
model_opts$num_factors <- 15
train_opts <- get_default_training_options(MOFAobject)
train_opts$seed <- 1
train_opts$save_interrupted <- TRUE
train_opts$maxiter = 100
train_opts$convergence_mode <- "slow"
MOFAobject <- prepare_mofa(
MOFAobject,
training_options = train_opts,
model_options = model_opts,
data_options = data_opts
)
MOFAobject_trained <- run_mofa(
MOFAobject,
outfile = "MOFA2_CLL_trained.hdf5"
)
saveRDS(
MOFAobject_trained,
"MOFA2_CLL_trained_saved.hdf5"
)
# Load sample metadata
CLL_metadata <- fread( "ftp://ftp.ebi.ac.uk/pub/databases/mofa/cll_vignette/sample_metadata.txt" )
# Add sample metadata to the model
samples_metadata(MOFAobject_trained) <- CLL_metadata
plot_factor_cor(MOFAobject_trained)
plot_variance_explained( MOFAobject_trained,
max_r2=15 )
plot_variance_explained( MOFAobject_trained,
max_r2=15 )
plot_variance_explained( MOFAobject_trained,
plot_total = T )[[2]]
correlate_factors_with_covariates( MOFAobject_trained,
covariates = c("Gender","Died","Age"),
plot = "log_pval" )
correlate_factors_with_covariates(MOFAobject_trained,
covariates = c("Gender","Died","Age"),
plot = "log_pval" )
plot_factor( MOFAobject_trained,
color_by = "Factor1",
factors=1)
plot_weights( MOFAobject_trained,
view = "Mutations",
factor=1,
nfeatures = 15,
scale = T)
plot_top_weights( MOFAobject_trained,
view = "Mutations",
nfeatures = 15,
scale = T,
factor=1,
view = "Mutations")
plot_top_weights( MOFAobject_trained,
view = "Mutations",
nfeatures = 15,
scale = T,
factor=1)
plot_factor( MOFAobject_trained,
dodge = TRUE,
add_violin = TRUE,
color_by = "IGHV",
factors=1)
plot_factor( MOFAobject_trained,
dodge = TRUE,
add_violin = TRUE,
color_by = "IGHV",
factors=1)
plot_weights( MOFAobject_trained,
nfeatures = 10,
view = "mRNA",
factor=1)
plot_data_heatmap( MOFAobject_trained,
scale = "row",
cluster_cols = FALSE,
cluster_rows = FALSE,
show_colnames = FALSE,
show_colnames = FALSE,
denoise = TRUE,
features = 25,
view = "mRNA",
factor=1)
plot_data_heatmap( MOFAobject_trained,
scale = "row",
cluster_cols = FALSE,
cluster_rows = FALSE,
show_colnames = FALSE,
denoise = TRUE,
features = 25,
view = "mRNA",
factor=1)
correlate_factors_with_covariates(MOFAobject_trained,
covariates = c("Gender","died","age"),
plot = "log_pval" )
install.packages("psych")
correlate_factors_with_covariates(MOFAobject_trained,
covariates = c("Gender","died","age"),
plot = "log_pval" )
utils::data("CLL_data")
#lapply(
#  CLL_data,
#  dim)
dim(CLL_data)
utils::data("CLL_data")
#lapply(
#  CLL_data,
#  dim)
dim(CLL_data[0])
utils::data("CLL_data")
lapply(
CLL_data,
dim
)
clear
clear()
library(devtools)
packageVersion("devtools")
install.packages(c("devtools", "roxygen2", "testthat", "knitr"))
library(devtools)
use_devtools()
library(usethis)
use_git_config(user.name = "vsriram24", user.email = "vsriram@fredhutch.org")
git_sitrep()
library(usethis)
use_git_config(core.editor = "nano")
library(devtools)
# Git/GitHub "situation report"
git_sitrep()
# clones the Git repo holding the source of the usethis package
# if your GitHub PAT is set up correctly, it will FORK and clone
create_from_github("r-lib/usethis")
# if you want to test whether you can install packages, from source, that have
# compiled code, try this:
install.packages("cli", type = "source")
plot_variance_explained(
MOFAobject_trained,
plot_total = T
)[[2]]
setwd("~/Documents/Developer/vsriram24.github.io/posts/multiomics-fa")
library(ggplot2)
library(tidyverse)
library(data.table)
library(MOFA2)
library(MOFAdata)
utils::data("CLL_data")
lapply(
CLL_data,
dim
)
MOFAobject <- create_mofa(CLL_data)
plot_data_overview(MOFAobject)
data_opts <- get_default_data_options(MOFAobject)
model_opts <- get_default_model_options(MOFAobject)
model_opts$num_factors <- 15
train_opts <- get_default_training_options(MOFAobject)
train_opts$seed <- 1
train_opts$save_interrupted <- TRUE
train_opts$maxiter = 100
train_opts$convergence_mode <- "slow"
MOFAobject <- prepare_mofa(
MOFAobject,
training_options = train_opts,
model_options = model_opts,
data_options = data_opts
)
MOFAobject_trained <- run_mofa(
MOFAobject,
outfile = "MOFA2_CLL_trained.hdf5"
)
# Load sample metadata
CLL_metadata <- fread("ftp://ftp.ebi.ac.uk/pub/databases/mofa/cll_vignette/sample_metadata.txt")
# Add sample metadata to the model
samples_metadata(MOFAobject_trained) <- CLL_metadata
plot_factor_cor(MOFAobject_trained)
plot_variance_explained(
MOFAobject_trained,
max_r2 = 15
)
plot_variance_explained(
MOFAobject_trained,
plot_total = T
)[[2]]
plot_variance_explained(
MOFAobject_trained,
plot_total = T
)[[1]]
plot_variance_explained(
MOFAobject_trained,
plot_total = T
)[[2]]
plot_variance_explained(
MOFAobject_trained,
plot_total = T
)[[3]]
plot_variance_explained(
MOFAobject_trained,
plot_total = T
)[[2]]
correlate_factors_with_covariates(
MOFAobject_trained,
covariates = c("Gender","died","age", "treatedAfter"),
plot = "log_pval"
)
plot_factor(
MOFAobject_trained,
color_by = "Factor1",
factors=1
)
plot_factor(
MOFAobject_trained,
factors=1
)
plot_factor(
MOFAobject_trained,
factors=c(1, 2)
)
plot_factor(
MOFAobject_trained,
factors=c(1, 15)
)
plot_weights(
MOFAobject_trained,
view = "Mutations",
factor=1,
nfeatures = 15,
scale = T
)
plot_top_weights(
MOFAobject_trained,
view = "Mutations",
nfeatures = 15,
scale = T,
factor=1
)
plot_factor(
MOFAobject_trained,
dodge = TRUE,
add_violin = TRUE,
color_by = "IGHV",
factors=1
)
plot_factor(
MOFAobject_trained,
dodge = TRUE,
add_violin = TRUE,
factors=c(1, 15)
)
plot_factor(
MOFAobject_trained,
add_violin = TRUE,
factors=c(1, 15)
)
plot_factor(
MOFAobject_trained,
dodge = TRUE,
add_violin = TRUE,
factors=c(1, 15)
)
plot_factor(
MOFAobject_trained,
add_violin = TRUE,
factors=c(1, 15)
)
plot_factor(
MOFAobject_trained,
dodge = TRUE,
add_violin = TRUE,
factors=c(1, 15)
)
plot_factor(
MOFAobject_trained,
dodge = TRUE,
add_violin = TRUE,
color_by = "IGHV",
factors = c(1)
)
plot_weights(
MOFAobject_trained,
nfeatures = 10,
view = "mRNA",
factor = 1
)
plot_weights(
MOFAobject_trained,
nfeatures = 10,
view = "mRNA",
factor = 1
)
plot_data_heatmap(
MOFAobject_trained,
scale = "row",
cluster_cols = FALSE,
cluster_rows = FALSE,
show_colnames = FALSE,
denoise = TRUE,
features = 25,
view = "mRNA",
factor=1
)
reticulate::repl_python()
